<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StarryLand</title>
  
  <subtitle>我的全部道路，就是从孤独走向人间</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rollingstarky.github.io/"/>
  <updated>2021-05-18T17:00:13.482Z</updated>
  <id>https://rollingstarky.github.io/</id>
  
  <author>
    <name>星舞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Miniconda 和 poetry 搭建 Python 开发环境（支持多版本、依赖管理）</title>
    <link href="https://rollingstarky.github.io/2021/05/19/build-python-development-environment-with-miniconda-and-poetry/"/>
    <id>https://rollingstarky.github.io/2021/05/19/build-python-development-environment-with-miniconda-and-poetry/</id>
    <published>2021-05-18T16:00:00.000Z</published>
    <updated>2021-05-18T17:00:13.482Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于自己的日常习惯测试整理，通过 Windows 系统演示（Linux 系统操作步骤大同小异）。<a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener">Miniconda</a> 用来提供 <code>conda</code> 命令管理多个 Python 版本（如 Python 3.8、Python 3.9）；<a href="https://python-poetry.org/" target="_blank" rel="noopener">poetry</a> 则用来创建基于项目的虚拟环境，维护对应的包依赖关系。</p></blockquote><h4 id="一、效果演示"><a href="#一、效果演示" class="headerlink" title="一、效果演示"></a>一、效果演示</h4><p><code>conda</code> 命令查看安装的 Python 版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;conda env list</span><br><span class="line"># conda environments:</span><br><span class="line">#</span><br><span class="line">base                  *  C:\Users\xniu\Miniconda3</span><br><span class="line">python2.7.18             C:\Users\xniu\Miniconda3\envs\python2.7.18</span><br><span class="line">python3.9.4              C:\Users\xniu\Miniconda3\envs\python3.9.4</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-9b8721fa7a29c760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="conda env list"></p><p><code>poetry</code> 查看某个项目的包依赖关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\auto-test&gt;poetry show</span><br><span class="line">certifi  2020.12.5 Python package for providing Mozilla&apos;s CA Bundle.</span><br><span class="line">chardet  4.0.0     Universal encoding detector for Python 2 and 3</span><br><span class="line">idna     2.10      Internationalized Domain Names in Applications (IDNA)</span><br><span class="line">requests 2.25.1    Python HTTP for Humans.</span><br><span class="line">selenium 3.141.0   Python bindings for Selenium</span><br><span class="line">urllib3  1.26.4    HTTP library with thread-safe connection pooling, file post, and more.</span><br><span class="line"></span><br><span class="line">(python3.9.4) C:\Users\Administrator\projects\auto-test&gt;poetry show -t</span><br><span class="line">requests 2.25.1 Python HTTP for Humans.</span><br><span class="line">|-- certifi &gt;=2017.4.17</span><br><span class="line">|-- chardet &gt;=3.0.2,&lt;5</span><br><span class="line">|-- idna &gt;=2.5,&lt;3</span><br><span class="line">`-- urllib3 &gt;=1.21.1,&lt;1.27</span><br><span class="line">selenium 3.141.0 Python bindings for Selenium</span><br><span class="line">`-- urllib3 *</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-e8240c1acb75577f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="poetry show"></p><h4 id="二、安装-Miniconda"><a href="#二、安装-Miniconda" class="headerlink" title="二、安装 Miniconda"></a>二、安装 Miniconda</h4><p>Miniconda 软件提供了 <code>conda</code> 命令，可以用来创建基于不同 Python 版本的虚拟环境。</p><p>访问 <a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener">Miniconda 官网</a>，下载对应系统版本的安装包并安装。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-2c77ef6a30057998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="package"></p><p>安装完成后，添加 <code>conda</code> 命令的路径（安装目录下的 <code>Scripts</code> 目录）到 <strong>PATH</strong> 环境变量。其路径一般为 <code>C:\Users\xxx\Miniconda3\Scripts\</code>。</p><p>添加完成后，打开一个新的命令提示符，运行 <code>conda</code> 命令看是否有反应。</p><h5 id="创建基于不同-Python-版本的虚拟环境"><a href="#创建基于不同-Python-版本的虚拟环境" class="headerlink" title="创建基于不同 Python 版本的虚拟环境"></a>创建基于不同 Python 版本的虚拟环境</h5><p><code>conda create -n python3.9.4 python=3.9.4</code><br>上述命令会创建一个新的 Python 虚拟环境，并安装 Python 3.9.4。</p><p>其中 <code>-n</code> 选项用于指定该虚拟环境的名称，方便后续通过 <code>conda activate xxx</code> 启用该虚拟环境；<br><code>python=3.9.4</code> 命令用于安装指定版本的 Python 程序。</p><p>虚拟环境创建成功后，即可使用 <code>conda activate python3.9.4</code> 命令启用该虚拟环境。<br>此后在该命令提示符环境下任何 <code>python</code> 命令都会自动使用 Python3.9.4 执行。</p><p><code>conda env list</code> 命令可以查看现有的 Python 虚拟环境。</p><p><strong>PS</strong>：更多 <code>conda</code> 命令可参考 <a href="https://docs.conda.io/projects/conda/en/latest/commands.html" target="_blank" rel="noopener">Command reference</a>。</p><h4 id="三、安装-poetry"><a href="#三、安装-poetry" class="headerlink" title="三、安装 poetry"></a>三、安装 poetry</h4><p>poetry 的安装可参考 <a href="https://python-poetry.org/docs/#installation" target="_blank" rel="noopener">poetry 官方文档</a>。对于 Windows 系统可直接打开一个 PowerShell 窗口，运行以下命令：<br><code>(Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -UseBasicParsing).Content | python -</code></p><p>安装成功后，<code>poetry</code> 命令会自动添加到 PATH 环境变量中。</p><h5 id="创建基于项目的虚拟环境"><a href="#创建基于项目的虚拟环境" class="headerlink" title="创建基于项目的虚拟环境"></a>创建基于项目的虚拟环境</h5><p>打开一个新的命令提示符，使用 <code>conda activate python3.9.4</code> 命令激活某个 Python 版本。</p><p>进入到项目路径下，运行 <code>poetry init</code> 命令初始化配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry init</span><br><span class="line"></span><br><span class="line">This command will guide you through creating your pyproject.toml config.</span><br><span class="line"></span><br><span class="line">Package name [test-poetry]:</span><br><span class="line">Version [0.1.0]:</span><br><span class="line">Description []:</span><br><span class="line">Author [None, n to skip]:  n</span><br><span class="line">License []:</span><br><span class="line">Compatible Python versions [^3.9]:</span><br><span class="line"></span><br><span class="line">Would you like to define your main dependencies interactively? (yes/no) [yes] no</span><br><span class="line">Would you like to define your development dependencies interactively? (yes/no) [yes] no</span><br><span class="line">Generated file</span><br><span class="line"></span><br><span class="line">[tool.poetry]</span><br><span class="line">name = &quot;test-poetry&quot;</span><br><span class="line">version = &quot;0.1.0&quot;</span><br><span class="line">description = &quot;&quot;</span><br><span class="line">authors = [&quot;Your Name &lt;you@example.com&gt;&quot;]</span><br><span class="line"></span><br><span class="line">[tool.poetry.dependencies]</span><br><span class="line">python = &quot;^3.9&quot;</span><br><span class="line"></span><br><span class="line">[tool.poetry.dev-dependencies]</span><br><span class="line"></span><br><span class="line">[build-system]</span><br><span class="line">requires = [&quot;poetry-core&gt;=1.0.0&quot;]</span><br><span class="line">build-backend = &quot;poetry.core.masonry.api&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you confirm generation? (yes/no) [yes] yes</span><br></pre></td></tr></table></figure></p><p>上述操作会在项目目录下自动创建 <code>pyproject.toml</code> 配置文件，内容如下：<br><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"test-poetry"</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">"0.1.0"</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">""</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">"Your Name &lt;you@example.com&gt;"</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">python</span> = <span class="string">"^3.9"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dev-dependencies]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [<span class="string">"poetry-core&gt;=1.0.0"</span>]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">"poetry.core.masonry.api"</span></span><br></pre></td></tr></table></figure></p><p>使用 <code>poetry shell</code> 命令自动创建<strong>基于当前项目</strong>的虚拟环境并激活该环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry shell</span><br><span class="line">Creating virtualenv test-poetry-thSlgjIV-py3.9 in C:\Users\Administrator\AppData\Local\pypoetry\Cache\virtualenvs</span><br><span class="line">Spawning shell within C:\Users\Administrator\AppData\Local\pypoetry\Cache\virtualenvs\test-poetry-thSlgjIV-py3.9</span><br><span class="line">Microsoft Windows [Version 10.0.18363.1316]</span><br><span class="line">(c) 2019 Microsoft Corporation. All rights reserved.</span><br></pre></td></tr></table></figure></p><p>运行 <code>code .</code> 命令使用 VSCode 软件打开本项目，此时即可在 IDE 中切换到新创建的基于本项目的虚拟环境（VSCode 已经安装了 Python 插件）。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-14910e736377b051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VSCode"></p><h5 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h5><p><code>poetry add xxx</code> 命令可以用来在当前环境中安装某个依赖包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry add requests</span><br><span class="line">Using version ^2.25.1 for requests</span><br><span class="line"></span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies...</span><br><span class="line"></span><br><span class="line">Writing lock file</span><br><span class="line"></span><br><span class="line">Package operations: 5 installs, 0 updates, 0 removals</span><br><span class="line"></span><br><span class="line">  • Installing certifi (2020.12.5)</span><br><span class="line">  • Installing chardet (4.0.0)</span><br><span class="line">  • Installing idna (2.10)</span><br><span class="line">  • Installing urllib3 (1.26.4)</span><br><span class="line">  • Installing requests (2.25.1)</span><br></pre></td></tr></table></figure></p><p><code>poetry add xxx -D</code> 命令可以用来安装针对开发环境的某个依赖包（用 <code>poetry remove</code> 命令卸载此类包时也需要指定 <code>-D</code> 选项）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry add autopep8 -D</span><br><span class="line">Using version ^1.5.7 for autopep8</span><br><span class="line"></span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies...</span><br><span class="line"></span><br><span class="line">Writing lock file</span><br><span class="line"></span><br><span class="line">Package operations: 3 installs, 0 updates, 0 removals</span><br><span class="line"></span><br><span class="line">  • Installing pycodestyle (2.7.0)</span><br><span class="line">  • Installing toml (0.10.2)</span><br><span class="line">  • Installing autopep8 (1.5.7)</span><br></pre></td></tr></table></figure></p><p>同时，安装的依赖包信息也会自动添加到 <code>pyproject.toml</code> 配置文件中：<br><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"test-poetry"</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">"0.1.0"</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">""</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">"Your Name &lt;you@example.com&gt;"</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">python</span> = <span class="string">"^3.9"</span></span><br><span class="line"><span class="attr">requests</span> = <span class="string">"^2.25.1"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dev-dependencies]</span></span><br><span class="line"><span class="attr">autopep8</span> = <span class="string">"^1.5.7"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [<span class="string">"poetry-core&gt;=1.0.0"</span>]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">"poetry.core.masonry.api"</span></span><br></pre></td></tr></table></figure></p><p>后续配置新的环境时，<code>pyproject.toml</code> 可以发挥类似 <code>requirements.txt</code> 文件的作用。即借助此文件中的配置，可以直接使用 <code>peotry install</code> 命令自动安装文件中包含的依赖项。</p><h5 id="维护环境依赖"><a href="#维护环境依赖" class="headerlink" title="维护环境依赖"></a>维护环境依赖</h5><p>使用 <code>poetry show</code> 命令查看当前安装的依赖包列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry show</span><br><span class="line">autopep8    1.5.7     A tool that automatically formats Python code to conform to the PEP 8 style guide</span><br><span class="line">certifi     2020.12.5 Python package for providing Mozilla&apos;s CA Bundle.</span><br><span class="line">chardet     4.0.0     Universal encoding detector for Python 2 and 3</span><br><span class="line">idna        2.10      Internationalized Domain Names in Applications (IDNA)</span><br><span class="line">pycodestyle 2.7.0     Python style guide checker</span><br><span class="line">requests    2.25.1    Python HTTP for Humans.</span><br><span class="line">toml        0.10.2    Python Library for Tom&apos;s Obvious, Minimal Language</span><br><span class="line">urllib3     1.26.4    HTTP library with thread-safe connection pooling, file post, and more.</span><br></pre></td></tr></table></figure></p><p>使用 <code>poetry show -t</code> 命令查看当前环境中各包之间的依赖关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry show -t</span><br><span class="line">autopep8 1.5.7 A tool that automatically formats Python code to conform to the PEP 8 style guide</span><br><span class="line">|-- pycodestyle &gt;=2.7.0</span><br><span class="line">`-- toml *</span><br><span class="line">requests 2.25.1 Python HTTP for Humans.</span><br><span class="line">|-- certifi &gt;=2017.4.17</span><br><span class="line">|-- chardet &gt;=3.0.2,&lt;5</span><br><span class="line">|-- idna &gt;=2.5,&lt;3</span><br><span class="line">`-- urllib3 &gt;=1.21.1,&lt;1.27</span><br></pre></td></tr></table></figure></p><p>若此时使用 <code>poetry remove autopep8 -D</code> 命令移除 <code>autopep8</code>，则之前自动安装的 <code>pycodestyle</code>、<code>toml</code> 依赖项也会被移除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry remove autopep8 -D</span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies...</span><br><span class="line"></span><br><span class="line">Writing lock file</span><br><span class="line"></span><br><span class="line">Package operations: 0 installs, 0 updates, 3 removals</span><br><span class="line"></span><br><span class="line">  • Removing autopep8 (1.5.7)</span><br><span class="line">  • Removing pycodestyle (2.7.0)</span><br><span class="line">  • Removing toml (0.10.2)</span><br></pre></td></tr></table></figure></p><p><strong>PS</strong>：更多 <code>poetry</code> 命令和用法可参考官方文档：<a href="https://python-poetry.org/docs/cli/" target="_blank" rel="noopener">Poetry Commands</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;基于自己的日常习惯测试整理，通过 Windows 系统演示（Linux 系统操作步骤大同小异）。&lt;a href=&quot;https://docs.conda.io/en/latest/miniconda.html&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="Poetry" scheme="https://rollingstarky.github.io/tags/Poetry/"/>
    
      <category term="Miniconda" scheme="https://rollingstarky.github.io/tags/Miniconda/"/>
    
      <category term="Conda" scheme="https://rollingstarky.github.io/tags/Conda/"/>
    
      <category term="Package" scheme="https://rollingstarky.github.io/tags/Package/"/>
    
  </entry>
  
  <entry>
    <title>Django（drf）配合 Vue Element 实现文件上传下载功能</title>
    <link href="https://rollingstarky.github.io/2021/03/13/django-drf-and-vue-element-file-upload-and-download/"/>
    <id>https://rollingstarky.github.io/2021/03/13/django-drf-and-vue-element-file-upload-and-download/</id>
    <published>2021-03-12T16:00:00.000Z</published>
    <updated>2021-03-13T15:22:28.864Z</updated>
    
    <content type="html"><![CDATA[<h4 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h4><h5 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h5><p>编辑 <code>models.py</code> 代码，通过 <code>FileField</code> 字段记录文件信息：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilesModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    file = models.FileField(upload_to=<span class="string">'uploads/'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'files_storage'</span></span><br><span class="line">        ordering = [<span class="string">'-id'</span>]</span><br></pre></td></tr></table></figure></p><h5 id="Serializer"><a href="#Serializer" class="headerlink" title="Serializer"></a>Serializer</h5><p>这里使用 Django REST framework 实现后端 REST API，需要创建序列化器 <code>serializers.py</code>，内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="comment"># files 是 app 的名字</span></span><br><span class="line"><span class="keyword">from</span> files <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilesSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.FilesModel</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure></p><h5 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h5><p>编辑 <code>views.py</code> 代码，内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> files <span class="keyword">import</span> models, serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = models.FilesModel.objects.all()</span><br><span class="line">    serializer_class = serializers.FilesSerializer</span><br></pre></td></tr></table></figure></p><h5 id="Urls"><a href="#Urls" class="headerlink" title="Urls"></a>Urls</h5><p>在 files 路径下新建 <code>urls.py</code> 文件，填写路由配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"><span class="keyword">from</span> files <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'files'</span>, views.FileViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>在项目总配置路径下（<code>settings.py</code> 所在的路径）编辑根路由配置文件 <code>urls.py</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'storage/'</span>, include(<span class="string">'files.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h5 id="测试后端-API"><a href="#测试后端-API" class="headerlink" title="测试后端 API"></a>测试后端 API</h5><p>运行后台服务 <code>python manage.py runserver 0.0.0.0:8000</code>，访问 <a href="http://xx.xx.xx.xx:8000/storage/files/，界面如下：" target="_blank" rel="noopener">http://xx.xx.xx.xx:8000/storage/files/，界面如下：</a><br><img src="https://upload-images.jianshu.io/upload_images/6875152-ed76119688b03565.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Django REST framework"></p><p>测试上传文件，效果如下：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-010d20514b00401a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上传成功"></p><h4 id="前端代码（手动上传）"><a href="#前端代码（手动上传）" class="headerlink" title="前端代码（手动上传）"></a>前端代码（手动上传）</h4><p>借助 Element UI 的 upload 组件，Vue 代码（<code>index.vue</code>）如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-upload</span><br><span class="line">      ref=&quot;upload&quot;</span><br><span class="line">      drag</span><br><span class="line">      action=&quot;http://xx.xx.xx.xx:8000/storage/files/&quot;</span><br><span class="line">      :auto-upload=&quot;false&quot;</span><br><span class="line">      :on-success=&quot;onSuccess&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;i class=&quot;el-icon-upload&quot; /&gt;</span><br><span class="line">      &lt;div class=&quot;el-upload__text&quot;&gt;将文件拖到此处，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">    &lt;el-button style=&quot;margin-left: 10px;&quot; size=&quot;small&quot; type=&quot;success&quot; @click=&quot;submitUpload&quot;&gt;上传到服务器&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;UploadDemo&apos;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submitUpload() &#123;</span><br><span class="line">      this.$refs.upload.submit()</span><br><span class="line">    &#125;,</span><br><span class="line">    onSuccess() &#123;</span><br><span class="line">      this.$message.success(&apos;上传成功&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>其中 <code>el-upload</code> 组件的 <code>action</code> 属性用于指定后台 API 的 URI；<br><code>:auto-upload</code> 属性用于设置是否自动上传（这里设置为 <code>false</code>，手动触发上传动作）；<br><code>:on-success</code> 属性用于指定上传成功后触发的方法。</p><p><code>submitUpload()</code> 中的 <code>this.$refs.upload.submit()</code> 方法触发文件上传动作。</p><p>界面如下：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-65b26a1e943716c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上传界面"></p><p>测试文件上传：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-7ccc4d25b88df2c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上传成功"></p><p>后台数据如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/template.html"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/20171215091830_55126_hSnPtZR.png"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">17</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h4 id="文件上传的同时添加其他数据"><a href="#文件上传的同时添加其他数据" class="headerlink" title="文件上传的同时添加其他数据"></a>文件上传的同时添加其他数据</h4><h5 id="修改数据库模型"><a href="#修改数据库模型" class="headerlink" title="修改数据库模型"></a>修改数据库模型</h5><p>编辑后端 <code>models.py</code> 文件，添加其他字段：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilesModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, default=<span class="string">''</span>)</span><br><span class="line">    file = models.FileField(upload_to=<span class="string">'uploads/'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'files_storage'</span></span><br><span class="line">        ordering = [<span class="string">'-id'</span>]</span><br></pre></td></tr></table></figure></p><p>数据库迁移后，重启后台 Web 服务。</p><p>后台数据如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/template.html"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/20171215091830_55126_hSnPtZR.png"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">17</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h5 id="修改前端代码"><a href="#修改前端代码" class="headerlink" title="修改前端代码"></a>修改前端代码</h5><p>添加其他数据的输入界面，同时将附加数据绑定到 <code>el-upload</code> 组件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-label&gt;名称&lt;/el-label&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;fileData.name&quot; style=&quot;width: 20%&quot; /&gt;</span><br><span class="line">    &lt;el-upload</span><br><span class="line">      ref=&quot;upload&quot;</span><br><span class="line">      drag</span><br><span class="line">      class=&quot;upload-demo&quot;</span><br><span class="line">      action=&quot;http://xx.xx.xx.xx:8000/storage/files/&quot;</span><br><span class="line">      :data=&quot;fileData&quot;</span><br><span class="line">      :auto-upload=&quot;false&quot;</span><br><span class="line">      :on-success=&quot;onSuccess&quot;</span><br><span class="line">      style=&quot;padding: 30px&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;i class=&quot;el-icon-upload&quot; /&gt;</span><br><span class="line">      &lt;div class=&quot;el-upload__text&quot;&gt;将文件拖到此处，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">    &lt;el-button style=&quot;margin-left: 10px;&quot; size=&quot;small&quot; type=&quot;success&quot; @click=&quot;submitUpload&quot;&gt;上传到服务器&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;UploadDemo&apos;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      fileData: &#123;</span><br><span class="line">        name: &apos;&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submitUpload() &#123;</span><br><span class="line">      this.$refs.upload.submit()</span><br><span class="line">    &#125;,</span><br><span class="line">    onSuccess() &#123;</span><br><span class="line">      this.$message.success(&apos;上传成功&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>其中 <code>el-upload</code> 组件的 <code>:data</code> 属性用于指定文件上传时附加的数据（类型为 JavaScript 对象）。</p><p>文件上传测试：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-5f22e11cd28c0ee4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件上传（带数据）"></p><p>上传完成，后台数据如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/AnyDesk.exe"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">19</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"测试文件"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/template.html"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/20171215091830_55126_hSnPtZR.png"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">17</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><p>修改后台视图代码（<code>views.py</code>），添加文件下载的 API 响应逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> files <span class="keyword">import</span> models, serializers</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> FileResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = models.FilesModel.objects.all()</span><br><span class="line">    serializer_class = serializers.FilesSerializer</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(methods=['get', 'post'], detail=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self, request, pk=None, *args, **kwargs)</span>:</span></span><br><span class="line">        file_obj = self.get_object()</span><br><span class="line">        response = FileResponse(open(file_obj.file.path, <span class="string">'rb'</span>))</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>此时访问 <a href="http://xx.xx.xx.xx:8000/storage/files/[id]/download/" target="_blank" rel="noopener">http://xx.xx.xx.xx:8000/storage/files/[id]/download/</a> 链接，即可直接下载上传到服务器上的文件。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-bb5a7c0448592919.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载文件"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o anydesk.exe <span class="number">172</span>.<span class="number">20</span>.<span class="number">23</span>.<span class="number">34</span>:<span class="number">8000</span>/storage/files/<span class="number">19</span>/download/</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   <span class="built_in">Time</span>    <span class="built_in">Time</span>     <span class="built_in">Time</span>  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line"><span class="number">100</span> <span class="number">3584</span>k  <span class="number">100</span> <span class="number">3584</span>k    <span class="number">0</span>     <span class="number">0</span>   <span class="number">102</span>M      <span class="number">0</span> --:--:-- --:--:-- --:--:--  <span class="number">102</span>M</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://element.eleme.cn/#/zh-CN/component/upload" target="_blank" rel="noopener">Element UI 官方文档</a><br><a href="https://docs.djangoproject.com/en/3.1/topics/http/file-uploads/" target="_blank" rel="noopener">Django 官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;后台代码&quot;&gt;&lt;a href=&quot;#后台代码&quot; class=&quot;headerlink&quot; title=&quot;后台代码&quot;&gt;&lt;/a&gt;后台代码&lt;/h4&gt;&lt;h5 id=&quot;Models&quot;&gt;&lt;a href=&quot;#Models&quot; class=&quot;headerlink&quot; title=&quot;Model
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Web" scheme="https://rollingstarky.github.io/tags/Web/"/>
    
      <category term="Django" scheme="https://rollingstarky.github.io/tags/Django/"/>
    
      <category term="Vue" scheme="https://rollingstarky.github.io/tags/Vue/"/>
    
      <category term="drf" scheme="https://rollingstarky.github.io/tags/drf/"/>
    
      <category term="Element" scheme="https://rollingstarky.github.io/tags/Element/"/>
    
      <category term="File" scheme="https://rollingstarky.github.io/tags/File/"/>
    
  </entry>
  
  <entry>
    <title>基本算法问题的 Python 解法——图（Graph）问题</title>
    <link href="https://rollingstarky.github.io/2021/02/20/classic-compute-problems-with-python-graph-problems/"/>
    <id>https://rollingstarky.github.io/2021/02/20/classic-compute-problems-with-python-graph-problems/</id>
    <published>2021-02-19T16:00:00.000Z</published>
    <updated>2021-02-20T12:35:08.593Z</updated>
    
    <content type="html"><![CDATA[<p><strong>图（Graph）</strong>是一种用来对某些现实问题进行建模的抽象的数学结构，这些问题从逻辑上可以被划分成一系列相互连接的<strong>节点</strong>。其中的节点称为<strong>顶点</strong>（<em>vertex</em>），顶点之间的连接称为<strong>边</strong>（<em>edge</em>）。<br>比如地铁线路就可以看作由图表示成的运输网络。每一个顶点都代表一个地铁站，而顶点之间的边则表示两个地铁站之间的路径。如果想知道某个站点到另一个站点的最短路径，图算法就能发挥作用。实际上，图算法可以被应用到任何类型的网络问题中。</p><h4 id="map-as-graph"><a href="#map-as-graph" class="headerlink" title="map as graph"></a>map as graph</h4><p><img src="https://upload-images.jianshu.io/upload_images/6875152-8255210fc341b4ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="美国最大的15个 MSA 的地图"></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-9f88ead301ab7f25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="美国最大的15个 MSA 的 graph 表示"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># edge.py</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span>:</span></span><br><span class="line">    u: int  <span class="comment"># the "from" vertex</span></span><br><span class="line">    v: int  <span class="comment"># the "to" vertex</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reversed</span><span class="params">(self)</span> -&gt; Edge:</span></span><br><span class="line">        <span class="keyword">return</span> Edge(self.v, self.u)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.u&#125;</span> -&gt; <span class="subst">&#123;self.v&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>上面代码中的 <code>Edge</code> 类表示两个顶点之间的连接（即“边”），每个顶点都由整数索引表示。其中 <code>u</code> 用来表示第一个顶点，<code>v</code> 表示第二个顶点。<br>这里只关注非方向性的 graph，edge 是双向的。而在<strong>有向图（digraph）</strong>中，edge 可以是单向的。<code>reversed()</code> 方法用来返回当前 edge 的逆向形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># graph.py</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, Generic, List, Optional</span><br><span class="line"><span class="keyword">from</span> edge <span class="keyword">import</span> Edge</span><br><span class="line"></span><br><span class="line">V = TypeVar(<span class="string">'V'</span>)  <span class="comment"># type of the vertices in the graph</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span><span class="params">(Generic[V])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vertices: List[V] = [])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._vertices: List[V] = vertices</span><br><span class="line">        self._edges: List[List[Edge]] = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> vertices]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">vertex_count</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> len(self._vertices)  <span class="comment"># Number of vertices</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edge_count</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> sum(map(len, self._edges))  <span class="comment"># Number of edges</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add a vertex to the graph and return its index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_vertex</span><span class="params">(self, vertex: V)</span> -&gt; int:</span></span><br><span class="line">        self._vertices.append(vertex)</span><br><span class="line">        self._edges.append([])  <span class="comment"># Add empty list for containing edges</span></span><br><span class="line">        <span class="keyword">return</span> self.vertex_count - <span class="number">1</span>  <span class="comment"># Return index of added vertex</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This is an undirected graph,</span></span><br><span class="line">    <span class="comment"># so we always add edges in both directions</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge</span><span class="params">(self, edge: Edge)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._edges[edge.u].append(edge)</span><br><span class="line">        self._edges[edge.v].append(edge.reversed())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add an edge using vertex indices (convenience method)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge_by_indices</span><span class="params">(self, u: int, v: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        edge: Edge = Edge(u, v)</span><br><span class="line">        self.add_edge(edge)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add an edge by looking up vertex indices (convenience method)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge_by_vertices</span><span class="params">(self, first: V, second: V)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        u: int = self._vertices.index(first)</span><br><span class="line">        v: int = self._vertices.index(second)</span><br><span class="line">        self.add_edge_by_indices(u, v)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Find the vertex at a specific index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">vertex_at</span><span class="params">(self, index: int)</span> -&gt; V:</span></span><br><span class="line">        <span class="keyword">return</span> self._vertices[index]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Find the index of a vertex in the graph</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_of</span><span class="params">(self, vertex: V)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self._vertices.index(vertex)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Find the vertices that a vertex at some index is connected to</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">neighbors_for_index</span><span class="params">(self, index: int)</span> -&gt; List[V]:</span></span><br><span class="line">        <span class="keyword">return</span> list(map(self.vertex_at, [e.v <span class="keyword">for</span> e <span class="keyword">in</span> self._edges[index]]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Look up a vertice's index and find its neighbors (convenience method)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">neighbors_for_vertex</span><span class="params">(self, vertex: V)</span> -&gt; List[V]:</span></span><br><span class="line">        <span class="keyword">return</span> self.neighbors_for_index(self.index_of(vertex))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Return all of the edges associated with a vertex at some index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edges_for_index</span><span class="params">(self, index: int)</span> -&gt; List[Edge]:</span></span><br><span class="line">        <span class="keyword">return</span> self._edges[index]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Look up the index of a vertex and return its edges (convenience method)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edges_for_vertex</span><span class="params">(self, vertex: V)</span> -&gt; List[Edge]:</span></span><br><span class="line">        <span class="keyword">return</span> self.edges_for_index(self.index_of(vertex))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make it easy to pretty-print a Graph</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        desc: str = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.vertex_count):</span><br><span class="line">            desc += <span class="string">f"<span class="subst">&#123;self.vertex_at(i)&#125;</span> -&gt; <span class="subst">&#123;self.neighbors_for_index(i)&#125;</span>\n"</span></span><br><span class="line">        <span class="keyword">return</span> desc</span><br></pre></td></tr></table></figure><p><code>Graph</code> 类聚焦于 graph 的核心角色，即将顶点用边连接起来。<br><code>_vertices</code> 列表是 Graph 类的核心，每个顶点都会被存储在该列表中。但是之后在实际引用时会使用顶点在列表中的索引。顶点本身有可能会是非常复杂的数据类型，但其索引一定会是 int 类型，相对而言更加方便使用。<br>graph 数据类型可以使用 <strong>adjacency lists</strong> 方式实现，每个顶点都拥有一个列表，里面包含了这个顶点连接的其他顶点。这里使用了由 edge 组成的列表再组成的列表（<code>_edges</code>），每个顶点都拥有一个由 edge 组成的列表，这些 edge 表示该顶点与其他顶点的连接关系。</p><p><code>Graph</code> 类中实现的方法的简单介绍：</p><ul><li><code>vertex_count</code> 属性：获取 graph 中顶点的数量</li><li><code>edge_count</code> 属性：获取 graph 中边的数量</li><li><code>add_vertex</code> 方法：添加一个新的孤立的顶点并返回其索引</li><li><code>add_edge</code> 方法：添加一条边（双向，参数是 Edge 对象）</li><li><code>add_edge_by_indices</code> 方法：通过顶点索引添加新的边（参数是边的两个顶点的索引 u、v）</li><li><code>add_edge_by_vertices</code> 方法：通过顶点添加新的边（参数是边的两个顶点（Vertex）对象）</li><li><code>vertex_at</code> 方法：通过特定的索引查询顶点</li><li><code>index_of</code> 方法：根据顶点返回其索引</li><li><code>neighbors_for_index</code> 方法：根据某个顶点的索引获取其临近的顶点（参数为顶点索引）</li><li><code>neighbors_for_vertex</code> 方法：根据某个顶点获取其临近的顶点（参数为顶点对象）</li><li><code>edges_for_index</code> 方法：根据某个顶点的索引获取与其连接的边（参数为顶点索引）</li><li><code>edges_for_vertex</code> 方法：根据某个顶点获取与其连接的边（参数为顶点对象）</li><li><code>__str__</code> 方法：友好的方式输出整个 graph</li></ul><p>补充测试代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># graph.py continued</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># test basic Graph construction</span></span><br><span class="line">    city_graph: Graph[str] = Graph([<span class="string">"Seattle"</span>, <span class="string">"San Francisco"</span>, <span class="string">"Los Angeles"</span>, <span class="string">"Riverside"</span>, <span class="string">"Phoenix"</span>, <span class="string">"Chicago"</span>, <span class="string">"Boston"</span>, <span class="string">"New York"</span>,</span><br><span class="line">                                    <span class="string">"Atlanta"</span>, <span class="string">"Miami"</span>, <span class="string">"Dallas"</span>, <span class="string">"Houston"</span>, <span class="string">"Detroit"</span>, <span class="string">"Philadelphia"</span>, <span class="string">"Washington"</span>])</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Seattle"</span>, <span class="string">"Chicago"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Seattle"</span>, <span class="string">"San Francisco"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"San Francisco"</span>, <span class="string">"Riverside"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"San Francisco"</span>, <span class="string">"Los Angeles"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Los Angeles"</span>, <span class="string">"Riverside"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Los Angeles"</span>, <span class="string">"Phoenix"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Riverside"</span>, <span class="string">"Phoenix"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Riverside"</span>, <span class="string">"Chicago"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Phoenix"</span>, <span class="string">"Dallas"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Phoenix"</span>, <span class="string">"Houston"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Chicago"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Atlanta"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Houston"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Houston"</span>, <span class="string">"Atlanta"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Houston"</span>, <span class="string">"Miami"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Chicago"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Washington"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Miami"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Miami"</span>, <span class="string">"Washington"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Chicago"</span>, <span class="string">"Detroit"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"Boston"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"Washington"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"New York"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Boston"</span>, <span class="string">"New York"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"New York"</span>, <span class="string">"Philadelphia"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Philadelphia"</span>, <span class="string">"Washington"</span>)</span><br><span class="line">    print(city_graph)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Seattle -&gt; ['Chicago', 'San Francisco']</span><br><span class="line">San Francisco -&gt; ['Seattle', 'Riverside', 'Los Angeles']</span><br><span class="line">Los Angeles -&gt; ['San Francisco', 'Riverside', 'Phoenix']</span><br><span class="line">Riverside -&gt; ['San Francisco', 'Los Angeles', 'Phoenix', 'Chicago']</span><br><span class="line">Phoenix -&gt; ['Los Angeles', 'Riverside', 'Dallas', 'Houston']</span><br><span class="line">Chicago -&gt; ['Seattle', 'Riverside', 'Dallas', 'Atlanta', 'Detroit']</span><br><span class="line">Boston -&gt; ['Detroit', 'New York']</span><br><span class="line">New York -&gt; ['Detroit', 'Boston', 'Philadelphia']</span><br><span class="line">Atlanta -&gt; ['Dallas', 'Houston', 'Chicago', 'Washington', 'Miami']</span><br><span class="line">Miami -&gt; ['Houston', 'Atlanta', 'Washington']</span><br><span class="line">Dallas -&gt; ['Phoenix', 'Chicago', 'Atlanta', 'Houston']</span><br><span class="line">Houston -&gt; ['Phoenix', 'Dallas', 'Atlanta', 'Miami']</span><br><span class="line">Detroit -&gt; ['Chicago', 'Boston', 'Washington', 'New York']</span><br><span class="line">Philadelphia -&gt; ['New York', 'Washington']</span><br><span class="line">Washington -&gt; ['Atlanta', 'Miami', 'Detroit', 'Philadelphia']</span><br></pre></td></tr></table></figure></p><h4 id="寻找最短路径"><a href="#寻找最短路径" class="headerlink" title="寻找最短路径"></a>寻找最短路径</h4><p>在 graph 理论中，任意两个顶点之间的所有连线（边）称为路径。即从一个顶点到达另一个顶点需要走过的所有路径。<br>在一个未加权的 graph 中（即不考虑边的长度），寻找最短的路径意味着从起始顶点到目标顶点之间经过的边最少。可以使用<strong>宽度优先搜索（breadth-first search, BFS）</strong>算法查找两个顶点之间的最短路径。（BFS 算法的具体实现可参考 <a href="https://www.jianshu.com/p/34e392141d30" target="_blank" rel="noopener">基本算法问题的 Python 解法（递归与搜索）</a>中的迷宫问题）。</p><p>BFS 部分代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generic_search.py</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, Generic, List, Callable, Deque, Set, Optional</span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">'T'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(Generic[T])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, state: T, parent: Optional[Node])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.state: T = state</span><br><span class="line">        self.parent: Optional[Node] = parent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span><span class="params">(Generic[T])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._container: Deque[T] = Deque()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self._container  <span class="comment"># not is true for empty container</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item: T)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._container.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span> -&gt; T:</span></span><br><span class="line">        <span class="keyword">return</span> self._container.popleft()  <span class="comment"># FIFO</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> repr(self._container)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(initial: T, goal_test: Callable[[T], bool], successors: Callable[[T], List[T]])</span> -&gt; Optional[Node[T]]:</span></span><br><span class="line">    <span class="comment"># frontier is where we've yet to go</span></span><br><span class="line">    frontier: Queue[Node[T]] = Queue()</span><br><span class="line">    frontier.push(Node(initial, <span class="keyword">None</span>))</span><br><span class="line">    <span class="comment"># explored is where we've been</span></span><br><span class="line">    explored: Set[T] = &#123;initial&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># keep going while there is more to explore</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> frontier.empty:</span><br><span class="line">        current_node: Node[T] = frontier.pop()</span><br><span class="line">        current_state: T = current_node.state</span><br><span class="line">        <span class="comment"># if we found the goal, we're done</span></span><br><span class="line">        <span class="keyword">if</span> goal_test(current_state):</span><br><span class="line">            <span class="keyword">return</span> current_node</span><br><span class="line">        <span class="comment"># check where we can go next and haven't explored</span></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> successors(current_state):</span><br><span class="line">            <span class="keyword">if</span> child <span class="keyword">in</span> explored:  <span class="comment"># skip children we already explored</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            explored.add(child)</span><br><span class="line">            frontier.push(Node(child, current_node))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span>  <span class="comment"># went through everything and never found goal</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">node_to_path</span><span class="params">(node: Node[T])</span> -&gt; List[T]:</span></span><br><span class="line">    path: List[T] = [node.state]</span><br><span class="line">    <span class="comment"># work backwards from end to front</span></span><br><span class="line">    <span class="keyword">while</span> node.parent <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        node = node.parent</span><br><span class="line">        path.append(node.state)</span><br><span class="line">    path.reverse()</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure></p><p>继续补充 <code>graph.py</code> 代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># graph.py continued</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">from</span> generic_search <span class="keyword">import</span> bfs, Node, node_to_path</span><br><span class="line">    bfs_result: Optional[Node[V]] = bfs(<span class="string">"Boston"</span>, <span class="keyword">lambda</span> x: x == <span class="string">"Miami"</span>,</span><br><span class="line">                                        city_graph.neighbors_for_vertex)</span><br><span class="line">    <span class="keyword">if</span> bfs_result <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        print(<span class="string">"No solution found using breadth-first search!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        path: List[V] = node_to_path(bfs_result)</span><br><span class="line">        print(<span class="string">"Path from Boston to Miami:"</span>)</span><br><span class="line">        print(path)</span><br></pre></td></tr></table></figure></p><p><code>bfs()</code> 函数接受三个参数：初始状态、用于检测当前状态是否符合目标状态的 Callable（可调用对象）、用于寻找达成目标状态的路径的 Callable。<br>若需要寻找 Boston 到 Miami 的最短路径（不考虑加权的情况），则初始状态为顶点 “Boston”，用于状态检测的 Callable 则判断当前顶点是否为 “Miami”。</p><p>运行效果：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Path</span> from Boston to Miami:</span><br><span class="line">['Boston', 'Detroit', 'Washington', 'Miami']</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-5aca5a560c6a0105.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BFS"></p><h4 id="加权图"><a href="#加权图" class="headerlink" title="加权图"></a>加权图</h4><p>之前的计算中，最短路径只考虑经过的站点最少，而未将站点之间的路程计算在内。若需要将路程包含进去，则可以为 edge 加上<strong>权重</strong>来表示该 edge 对应的距离。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-dc49ed8f5b35b7fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="weight"></p><p>为了实现加权的 graph，需要实现 Edge 的子类 WeightedEdge 以及 Graph 的子类 WeightedGraph。每一个 WeightedEdge 对象都有一个关联的 float 类型的属性用来表示权重。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># weighted_edge.py</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> edge <span class="keyword">import</span> Edge</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeightedEdge</span><span class="params">(Edge)</span>:</span></span><br><span class="line">    weight: float</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reversed</span><span class="params">(self)</span> -&gt; WeightedEdge:</span></span><br><span class="line">        <span class="keyword">return</span> WeightedEdge(self.v, self.u, self.weight)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># so that we can order edges by weight to find the minimum weight edge</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other: WeightedEdge)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight &lt; other.weight</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.u&#125;</span> <span class="subst">&#123;self.weight&#125;</span>&gt; <span class="subst">&#123;self.v&#125;</span>"</span></span><br></pre></td></tr></table></figure></p><p>WeightedEdge 子类添加了一个 <code>weight</code> 属性，通过 <code>__lt__()</code> 方法实现了 <code>&lt;</code> 操作符，令 WeightedEdge 对象成为可比较的，使得返回 weight 最小的 edge 成为可能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># weighted_graph.py</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, Generic, List, Tuple</span><br><span class="line"><span class="keyword">from</span> graph <span class="keyword">import</span> Graph</span><br><span class="line"><span class="keyword">from</span> weighted_edge <span class="keyword">import</span> WeightedEdge</span><br><span class="line"></span><br><span class="line">V = TypeVar(<span class="string">'V'</span>)  <span class="comment"># type of the vertices in the graph</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeightedGraph</span><span class="params">(Generic[V], Graph[V])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vertices: List[V] = [])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._vertices: List[V] = vertices</span><br><span class="line">        self._edges: List[List[WeightedEdge]] = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> vertices]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge_by_indices</span><span class="params">(self, u: int, v: int, weight: float)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        edge: WeightedEdge = WeightedEdge(u, v, weight)</span><br><span class="line">        self.add_edge(edge)  <span class="comment"># call superclass version</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge_by_vertices</span><span class="params">(self, first: V, second: V, weight: float)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        u: int = self._vertices.index(first)</span><br><span class="line">        v: int = self._vertices.index(second)</span><br><span class="line">        self.add_edge_by_indices(u, v, weight)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">neighbors_for_index_with_weights</span><span class="params">(self, index: int)</span> -&gt; List[Tuple[V, float]]:</span></span><br><span class="line">        distance_tuples: List[Tuple[V, float]] = []</span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> self.edges_for_index(index):</span><br><span class="line">            distance_tuples.append((self.vertex_at(edge.v), edge.weight))</span><br><span class="line">        <span class="keyword">return</span> distance_tuples</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        desc: str = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.vertex_count):</span><br><span class="line">            desc += <span class="string">f"<span class="subst">&#123;self.vertex_at(i)&#125;</span> -&gt; <span class="subst">&#123;self.neighbors_for_index_with_weights(i)&#125;</span>\n"</span></span><br><span class="line">        <span class="keyword">return</span> desc</span><br></pre></td></tr></table></figure><p>WeightedGraph 类继承自 Graph，在原来的基础上对某些需要适应 weight 属性的方法做了对应的修改。</p><p>补充 <code>weighted_graph.py</code> 代码，测试运行效果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># weighted_graph.py continued</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    city_graph2: WeightedGraph[str] = WeightedGraph([<span class="string">"Seattle"</span>, <span class="string">"San Francisco"</span>,</span><br><span class="line">                                                     <span class="string">"Los Angeles"</span>, <span class="string">"Riverside"</span>,</span><br><span class="line">                                                     <span class="string">"Phoenix"</span>, <span class="string">"Chicago"</span>, <span class="string">"Boston"</span>,</span><br><span class="line">                                                     <span class="string">"New York"</span>, <span class="string">"Atlanta"</span>, <span class="string">"Miami"</span>,</span><br><span class="line">                                                     <span class="string">"Dallas"</span>, <span class="string">"Houston"</span>, <span class="string">"Detroit"</span>,</span><br><span class="line">                                                     <span class="string">"Philadelphia"</span>, <span class="string">"Washington"</span>])</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Seattle"</span>, <span class="string">"Chicago"</span>, <span class="number">1737</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Seattle"</span>, <span class="string">"San Francisco"</span>, <span class="number">678</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"San Francisco"</span>, <span class="string">"Riverside"</span>, <span class="number">386</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"San Francisco"</span>, <span class="string">"Los Angeles"</span>, <span class="number">348</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Los Angeles"</span>, <span class="string">"Riverside"</span>, <span class="number">50</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Los Angeles"</span>, <span class="string">"Phoenix"</span>, <span class="number">357</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Riverside"</span>, <span class="string">"Phoenix"</span>, <span class="number">307</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Riverside"</span>, <span class="string">"Chicago"</span>, <span class="number">1704</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Phoenix"</span>, <span class="string">"Dallas"</span>, <span class="number">887</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Phoenix"</span>, <span class="string">"Houston"</span>, <span class="number">1015</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Chicago"</span>, <span class="number">805</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Atlanta"</span>, <span class="number">721</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Houston"</span>, <span class="number">225</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Houston"</span>, <span class="string">"Atlanta"</span>, <span class="number">702</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Houston"</span>, <span class="string">"Miami"</span>, <span class="number">968</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Chicago"</span>, <span class="number">588</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Washington"</span>, <span class="number">543</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Miami"</span>, <span class="number">604</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Miami"</span>, <span class="string">"Washington"</span>, <span class="number">923</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Chicago"</span>, <span class="string">"Detroit"</span>, <span class="number">238</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"Boston"</span>, <span class="number">613</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"Washington"</span>, <span class="number">396</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"New York"</span>, <span class="number">482</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Boston"</span>, <span class="string">"New York"</span>, <span class="number">190</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"New York"</span>, <span class="string">"Philadelphia"</span>, <span class="number">81</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Philadelphia"</span>, <span class="string">"Washington"</span>, <span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">    print(city_graph2)</span><br></pre></td></tr></table></figure></p><p>运行效果：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Seattle -&gt; [('Chicago', <span class="number">1737</span>), ('San Francisco', <span class="number">678</span>)]</span><br><span class="line">San Francisco -&gt; [('Seattle', <span class="number">678</span>), ('Riverside', <span class="number">386</span>), ('Los Angeles', <span class="number">348</span>)]</span><br><span class="line">Los Angeles -&gt; [('San Francisco', <span class="number">348</span>), ('Riverside', <span class="number">50</span>), ('Phoenix', <span class="number">357</span>)]</span><br><span class="line">Riverside -&gt; [('San Francisco', <span class="number">386</span>), ('Los Angeles', <span class="number">50</span>), ('Phoenix', <span class="number">307</span>), ('Chicago', <span class="number">1704</span>)]</span><br><span class="line">Phoenix -&gt; [('Los Angeles', <span class="number">357</span>), ('Riverside', <span class="number">307</span>), ('Dallas', <span class="number">887</span>), ('Houston', <span class="number">1015</span>)]</span><br><span class="line">Chicago -&gt; [('Seattle', <span class="number">1737</span>), ('Riverside', <span class="number">1704</span>), ('Dallas', <span class="number">805</span>), ('Atlanta', <span class="number">588</span>), ('Detroit', <span class="number">238</span>)]</span><br><span class="line">Boston -&gt; [('Detroit', <span class="number">613</span>), ('New York', <span class="number">190</span>)]</span><br><span class="line">New York -&gt; [('Detroit', <span class="number">482</span>), ('Boston', <span class="number">190</span>), ('Philadelphia', <span class="number">81</span>)]</span><br><span class="line">Atlanta -&gt; [('Dallas', <span class="number">721</span>), ('Houston', <span class="number">702</span>), ('Chicago', <span class="number">588</span>), ('Washington', <span class="number">543</span>), ('Miami', <span class="number">604</span>)]</span><br><span class="line">Miami -&gt; [('Houston', <span class="number">968</span>), ('Atlanta', <span class="number">604</span>), ('Washington', <span class="number">923</span>)]</span><br><span class="line">Dallas -&gt; [('Phoenix', <span class="number">887</span>), ('Chicago', <span class="number">805</span>), ('Atlanta', <span class="number">721</span>), ('Houston', <span class="number">225</span>)]</span><br><span class="line">Houston -&gt; [('Phoenix', <span class="number">1015</span>), ('Dallas', <span class="number">225</span>), ('Atlanta', <span class="number">702</span>), ('Miami', <span class="number">968</span>)]</span><br><span class="line">Detroit -&gt; [('Chicago', <span class="number">238</span>), ('Boston', <span class="number">613</span>), ('Washington', <span class="number">396</span>), ('New York', <span class="number">482</span>)]</span><br><span class="line">Philadelphia -&gt; [('New York', <span class="number">81</span>), ('Washington', <span class="number">123</span>)]</span><br><span class="line">Washington -&gt; [('Atlanta', <span class="number">543</span>), ('Miami', <span class="number">923</span>), ('Detroit', <span class="number">396</span>), ('Philadelphia', <span class="number">123</span>)]</span><br></pre></td></tr></table></figure></p><h4 id="在加权图中搜索最短路径"><a href="#在加权图中搜索最短路径" class="headerlink" title="在加权图中搜索最短路径"></a>在加权图中搜索最短路径</h4><p>寻找某个起点城市到另一个城市的所有路线中花费最小的一条，属于单源头最短路径（single-source shortest path）问题，即从加权图中的某个顶点到任意的另外一个顶点的最短路径。</p><p><strong>Dijkstra 算法</strong> 可以用来解决单源头最短路径问题。该算法从某个起始顶点开始，可以找出加权图中所有其他顶点到起始顶点的最短路径。从某个顶点开始按照远近关系依次遍历完所有顶点并记录其总的花费（从起始顶点到当前顶点），若重复出现的顶点花费更小，则令其替换已有的记录。</p><p>具体步骤如下：</p><ul><li>将起始顶点加入到优先级队列中</li><li>从优先级队列中弹出一个顶点（一开始就是起始顶点）作为当前顶点</li><li>查看与当前顶点临近的所有顶点，若某一个之前没有被记录到，或某个顶点按照当前路径的花费低于已有的最小记录，则记录其到起始顶点的距离（作为新的最小记录）及生成该距离的最后一条边（记录路径），并将该顶点 push 到优先级队列中（令其作为之后的“当前”顶点）</li><li>重复前面两步直到优先级队列为空</li><li>返回所有顶点到起始顶点的最小距离及路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># priority_queue.py</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, Generic, List</span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush, heappop</span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">'T'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span><span class="params">(Generic[T])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._container: List[T] = []</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self._container</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item: T)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        heappush(self._container, item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span> -&gt; T:</span></span><br><span class="line">        <span class="keyword">return</span> heappop(self._container)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> repr(self._container)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dijkstra.py</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, List, Optional, Tuple, Dict</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> mst <span class="keyword">import</span> WeightedPath, print_weighted_path</span><br><span class="line"><span class="keyword">from</span> weighted_graph <span class="keyword">import</span> WeightedGraph</span><br><span class="line"><span class="keyword">from</span> weighted_edge <span class="keyword">import</span> WeightedEdge</span><br><span class="line"><span class="keyword">from</span> priority_queue <span class="keyword">import</span> PriorityQueue</span><br><span class="line"></span><br><span class="line">V = TypeVar(<span class="string">'V'</span>)  <span class="comment"># type of the vertices in the graph</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DijkstraNode</span>:</span></span><br><span class="line">    vertex: int</span><br><span class="line">    distance: float</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other: DijkstraNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.distance &lt; other.distance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other: DijkstraNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.distance == other.distance</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span><span class="params">(wg: WeightedGraph[V], root: V)</span> -&gt; Tuple[List[Optional[float]],</span></span><br><span class="line"><span class="function">                                                     Dict[int, WeightedEdge]]:</span></span><br><span class="line">    first: int = wg.index_of(root)</span><br><span class="line">    <span class="comment"># distances are unknown at first</span></span><br><span class="line">    distances: List[Optional[float]] = [<span class="keyword">None</span>] * wg.vertex_count</span><br><span class="line">    distances[first] = <span class="number">0</span>  <span class="comment"># the root is 0 away from the root</span></span><br><span class="line">    path_dict: Dict[int, WeightedEdge] = &#123;&#125;  <span class="comment"># how we got to each vertex</span></span><br><span class="line">    pq: PriorityQueue[DijkstraNode] = PriorityQueue()</span><br><span class="line">    pq.push(DijkstraNode(first, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> pq.empty:</span><br><span class="line">        u: int = pq.pop().vertex  <span class="comment"># explore the next closest vertex</span></span><br><span class="line">        dist_u: float = distances[u]  <span class="comment"># should already have seen it</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># look at every edge/vertex from current vertex</span></span><br><span class="line">        <span class="keyword">for</span> we <span class="keyword">in</span> wg.edges_for_index(u):</span><br><span class="line">            <span class="comment"># the old distance from starting vertex to this vertex</span></span><br><span class="line">            dist_v: float = distances[we.v]</span><br><span class="line">            <span class="comment"># no old distance or found shorter path</span></span><br><span class="line">            <span class="keyword">if</span> dist_v <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> dist_v &gt; we.weight + dist_u:</span><br><span class="line">                <span class="comment"># update distance to this vertex</span></span><br><span class="line">                distances[we.v] = we.weight + dist_u</span><br><span class="line">                <span class="comment"># update the edge on the shortest path to this vertex</span></span><br><span class="line">                path_dict[we.v] = we</span><br><span class="line">                <span class="comment"># explore this vertex soon</span></span><br><span class="line">                pq.push(DijkstraNode(we.v, we.weight + dist_u))</span><br><span class="line">    <span class="keyword">return</span> distances, path_dict</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper function to get easier access to dijkstra results</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance_array_to_vertex_dict</span><span class="params">(wg: WeightedGraph[V], distances:</span></span></span><br><span class="line"><span class="function"><span class="params">                                  List[Optional[float]])</span> -&gt; Dict[V, Optional[float]]:</span></span><br><span class="line">    distance_dict: Dict[V, Optional[float]] = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(distances)):</span><br><span class="line">        distance_dict[wg.vertex_at(i)] = distances[i]</span><br><span class="line">    <span class="keyword">return</span> distance_dict</span><br><span class="line"></span><br><span class="line"><span class="comment"># Takes a dictionary of edges to reach each node and returns a list of</span></span><br><span class="line"><span class="comment"># edges that goes from `start` ot `end`</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">path_dict_to_path</span><span class="params">(start: int, end: int, path_dict: Dict[int,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                            WeightedEdge])</span> -&gt; WeightedPath:</span></span><br><span class="line">    <span class="keyword">if</span> len(path_dict) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    edge_path: WeightedPath = []</span><br><span class="line">    e: WeightedEdge = path_dict[end]</span><br><span class="line">    edge_path.append(e)</span><br><span class="line">    <span class="keyword">while</span> e.u != start:</span><br><span class="line">        e = path_dict[e.u]</span><br><span class="line">        edge_path.append(e)</span><br><span class="line">    <span class="keyword">return</span> list(reversed(edge_path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    city_graph2: WeightedGraph[str] = WeightedGraph([<span class="string">"Seattle"</span>, <span class="string">"San Francisco"</span>,</span><br><span class="line">                                                     <span class="string">"Los Angeles"</span>, <span class="string">"Riverside"</span>,</span><br><span class="line">                                                     <span class="string">"Phoenix"</span>, <span class="string">"Chicago"</span>, <span class="string">"Boston"</span>,</span><br><span class="line">                                                     <span class="string">"New York"</span>, <span class="string">"Atlanta"</span>, <span class="string">"Miami"</span>,</span><br><span class="line">                                                     <span class="string">"Dallas"</span>, <span class="string">"Houston"</span>, <span class="string">"Detroit"</span>,</span><br><span class="line">                                                     <span class="string">"Philadelphia"</span>, <span class="string">"Washington"</span>])</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Seattle"</span>, <span class="string">"Chicago"</span>, <span class="number">1737</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Seattle"</span>, <span class="string">"San Francisco"</span>, <span class="number">678</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"San Francisco"</span>, <span class="string">"Riverside"</span>, <span class="number">386</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"San Francisco"</span>, <span class="string">"Los Angeles"</span>, <span class="number">348</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Los Angeles"</span>, <span class="string">"Riverside"</span>, <span class="number">50</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Los Angeles"</span>, <span class="string">"Phoenix"</span>, <span class="number">357</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Riverside"</span>, <span class="string">"Phoenix"</span>, <span class="number">307</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Riverside"</span>, <span class="string">"Chicago"</span>, <span class="number">1704</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Phoenix"</span>, <span class="string">"Dallas"</span>, <span class="number">887</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Phoenix"</span>, <span class="string">"Houston"</span>, <span class="number">1015</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Chicago"</span>, <span class="number">805</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Atlanta"</span>, <span class="number">721</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Houston"</span>, <span class="number">225</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Houston"</span>, <span class="string">"Atlanta"</span>, <span class="number">702</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Houston"</span>, <span class="string">"Miami"</span>, <span class="number">968</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Chicago"</span>, <span class="number">588</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Washington"</span>, <span class="number">543</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Miami"</span>, <span class="number">604</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Miami"</span>, <span class="string">"Washington"</span>, <span class="number">923</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Chicago"</span>, <span class="string">"Detroit"</span>, <span class="number">238</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"Boston"</span>, <span class="number">613</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"Washington"</span>, <span class="number">396</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"New York"</span>, <span class="number">482</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Boston"</span>, <span class="string">"New York"</span>, <span class="number">190</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"New York"</span>, <span class="string">"Philadelphia"</span>, <span class="number">81</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Philadelphia"</span>, <span class="string">"Washington"</span>, <span class="number">123</span>)</span><br><span class="line">    distances, path_dict = dijkstra(city_graph2, <span class="string">"Los Angeles"</span>)</span><br><span class="line">    name_distance: Dict[str, Optional[int]] = distance_array_to_vertex_dict(city_graph2, distances)</span><br><span class="line">    print(<span class="string">"Distances from Los Angeles:"</span>)</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> name_distance.items():</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;key&#125;</span> : <span class="subst">&#123;value&#125;</span>"</span>)</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Shortest path from Los Angelges to Boston:"</span>)</span><br><span class="line">    path: WeightedPath = path_dict_to_path(city_graph2.index_of(<span class="string">"Los Angeles"</span>),</span><br><span class="line">                                           city_graph2.index_of(<span class="string">"Boston"</span>), path_dict)</span><br><span class="line">    print_weighted_path(city_graph2, path)</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Distances from Los Angeles:</span><br><span class="line">Seattle : <span class="number">1026</span></span><br><span class="line">San Francisco : <span class="number">348</span></span><br><span class="line">Los Angeles : <span class="number">0</span></span><br><span class="line">Riverside : <span class="number">50</span></span><br><span class="line">Phoenix : <span class="number">357</span></span><br><span class="line">Chicago : <span class="number">1754</span></span><br><span class="line">Boston : <span class="number">2605</span></span><br><span class="line">New York : <span class="number">2474</span></span><br><span class="line">Atlanta : <span class="number">1965</span></span><br><span class="line">Miami : <span class="number">2340</span></span><br><span class="line">Dallas : <span class="number">1244</span></span><br><span class="line">Houston : <span class="number">1372</span></span><br><span class="line">Detroit : <span class="number">1992</span></span><br><span class="line">Philadelphia : <span class="number">2511</span></span><br><span class="line">Washington : <span class="number">2388</span></span><br><span class="line"></span><br><span class="line">Shortest <span class="built_in">path</span> from Los Angelges to Boston:</span><br><span class="line">Los Angeles <span class="number">50</span>&gt; Riverside</span><br><span class="line">Riverside <span class="number">1704</span>&gt; Chicago</span><br><span class="line">Chicago <span class="number">238</span>&gt; Detroit</span><br><span class="line">Detroit <span class="number">613</span>&gt; Boston</span><br><span class="line">Total Weight: <span class="number">2605</span></span><br></pre></td></tr></table></figure></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.manning.com/books/classic-computer-science-problems-in-python" target="_blank" rel="noopener">Classic Computer Science Problems in Python</a><br><a href="https://github.com/davecom/ClassicComputerScienceProblemsInPython" target="_blank" rel="noopener">davecom/ClassicComputerScienceProblemsInPython</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;图（Graph）&lt;/strong&gt;是一种用来对某些现实问题进行建模的抽象的数学结构，这些问题从逻辑上可以被划分成一系列相互连接的&lt;strong&gt;节点&lt;/strong&gt;。其中的节点称为&lt;strong&gt;顶点&lt;/strong&gt;（&lt;em&gt;vertex&lt;/em&gt;），顶
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="DataStructure" scheme="https://rollingstarky.github.io/tags/DataStructure/"/>
    
      <category term="Algorithm" scheme="https://rollingstarky.github.io/tags/Algorithm/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Graph" scheme="https://rollingstarky.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>基本算法问题的 Python 解法——约束满足问题（CSP）</title>
    <link href="https://rollingstarky.github.io/2021/02/03/classic-compute-problems-with-python-constraint-satisfaction-problems/"/>
    <id>https://rollingstarky.github.io/2021/02/03/classic-compute-problems-with-python-constraint-satisfaction-problems/</id>
    <published>2021-02-02T16:00:00.000Z</published>
    <updated>2021-02-03T12:39:37.488Z</updated>
    
    <content type="html"><![CDATA[<p>由计算工具解决的很大一部分问题都可以归类为<strong>约束满足问题（CSPs, constraint-satisfaction problems）</strong>。CSP 一般包含三个基本概念：<strong>变量（variables）</strong>、<strong>域（domains）</strong>和<strong>约束条件（constraints）</strong>。</p><p>比如需要在星期五为 Joe、Mary、Sue 三个人安排一场会议，要求 Sue 必须和另外的至少一个人同时在场。针对此问题：</p><ul><li>Joe、Mary、Sue 三个人即为变量（variables）</li><li>每个人（变量）各自空闲的时间点即为对应的域（domains）。比如变量 Mary 在下午 2 点和 3 点的时候有空，这两个时间点即为变量 Mary 对应的域</li><li>约束条件（constraints）有两点：Sue 必须在场；除 Sue 以外至少还需要另一人到场</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/6875152-7d5dcdd81b242fa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="约会问题是非常经典的约束满足问题"></p><h4 id="构建-CSP-框架"><a href="#构建-CSP-框架" class="headerlink" title="构建 CSP 框架"></a>构建 CSP 框架</h4><p>约束条件通过 <code>Constraint</code> 类实现。该类中包含被约束的变量以及测试其是否满足约束的 <code>satisfied()</code> 方法。确定是否满足约束条件是针对某个特定的 CSP 的核心逻辑，该 <code>satisfied()</code> 方法必须为抽象方法，由子类覆盖后发挥实际作用，以满足不同问题的不同约束条件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># csp.py</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Generic, TypeVar, Dict, List, Optional</span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line">V = TypeVar(<span class="string">'V'</span>)  <span class="comment"># variable type</span></span><br><span class="line"></span><br><span class="line">D = TypeVar(<span class="string">'D'</span>)  <span class="comment"># domain type</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Constraint</span><span class="params">(Generic[V, D], ABC)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, variables: List[V])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.variables = variables</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">satisfied</span><span class="params">(self, assignment: Dict[V, D])</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>约束满足框架的核心部分代码是 <code>CSP</code> 类，该类集中处理变量、域和约束条件。CSP 的类型使用 Generic，目的是使其足够灵活，能够处理各种类型的 variables 和 domains。其中 variables 是 list 类型，domains 是由 variable 和对应的 list （所有可能的值）关联成的 dict 类型，constraints 则是由 variable 和对应的 list（约束条件列表）关联成的 dict 类型。</p><p><code>__init__()</code> 初始化方法会创建 <code>constraints</code> 字典，将 variables 中的值作为键，每个键关联一个空列表。<code>add_constraint()</code> 方法遍历 variables 中的值（同时也是 <code>constraints</code> 中的键），将对应的 constraint 添加到 <code>constraints</code> 字典的该 variable 键关联的列表中。<br>从而完成对 variables、domains、constraints 三类数据的初始化。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># csp.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSP</span><span class="params">(Generic[V, D])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, variables: List[V], domains: Dict[V, List[D]])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.variables = variables</span><br><span class="line">        self.domains = domains</span><br><span class="line">        self.constraints: Dict[V, List[Constraint[V, D]]] = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> variable <span class="keyword">in</span> self.variables:</span><br><span class="line">            self.constraints[variable] = []</span><br><span class="line">            <span class="keyword">if</span> variable <span class="keyword">not</span> <span class="keyword">in</span> self.domains:</span><br><span class="line">                <span class="keyword">raise</span> LookupError(<span class="string">"Every variable should have a domain assigned to it"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_constraint</span><span class="params">(self, constraint: Constraint[V, D])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">for</span> variable <span class="keyword">in</span> constraint.variables:</span><br><span class="line">            <span class="keyword">if</span> variable <span class="keyword">not</span> <span class="keyword">in</span> self.variables:</span><br><span class="line">                <span class="keyword">raise</span> LookupError(<span class="string">"Variable in constraint not in CSP"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.constraints[variable].append(constraint)</span><br></pre></td></tr></table></figure></p><p><code>consistent()</code> 方法用于检查给定的 variable 对应的每一个约束条件是否一一符合当前预设的方案。这个临时的方案用 assignment 表示。<br>即先有某个 variable，然后为其选择对应的 domain 中的任意一个值作为临时的 assignment，再检查该 assignment 是否符合对应的 variable 关联的所有约束条件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># csp.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consistent</span><span class="params">(self, variable: V, assignment: Dict[V, D])</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">for</span> constraint <span class="keyword">in</span> self.constraints[variable]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> constraint.satisfied(assignment):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>约束满足框架还需要一个简单的 <em>backtracking</em> 搜索用于查找问题的解决方案。Backtracking 意味着一旦在搜索路径的某个节点上终止，则返回到上一个已知的搜索节点，选择另一条搜索路径。有点类似于<strong>深度优先</strong>搜索（<strong>DFS, depth-first search</strong>）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking_search</span><span class="params">(self, assignment: Dict[V, D] = &#123;&#125;)</span> -&gt; Optional[Dict[V, D]]:</span></span><br><span class="line">    <span class="comment"># assignment is complete if every variable is assigned</span></span><br><span class="line">    <span class="keyword">if</span> len(assignment) == len(self.variables):</span><br><span class="line">        <span class="keyword">return</span> assignment</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get all variables in the CSP but not in the assignment</span></span><br><span class="line">    unassigned: List[V] = [v <span class="keyword">for</span> v <span class="keyword">in</span> self.variables <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> assignment]</span><br><span class="line">    first: V = unassigned[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> self.domains[first]:</span><br><span class="line">        local_assignment = assignment.copy()</span><br><span class="line">        local_assignment[first] = value</span><br><span class="line">        <span class="keyword">if</span> self.consistent(first, local_assignment):</span><br><span class="line">            result: Optional[Dict[V, D]] = self.backtracking_search(local_assignment)</span><br><span class="line">            <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure></p><p>逐条分析以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if len(assignment) == len(self.variables):</span><br><span class="line">    return assignment</span><br></pre></td></tr></table></figure></p><p>上面的 backtracking 搜索采用了<strong>递归</strong>的形式，此 <code>if</code> 语句则提供了一种递归的终止条件。即当所有 variable 都被赋予了合法的值时，意味着其中一种搭配方案已被找到，则停止进一步的搜索，返回该搭配方案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unassigned: List[V] = [v for v in self.variables if v not in assignment]</span><br><span class="line">first: V = unassigned[0]</span><br></pre></td></tr></table></figure><p>取出 variables 中第一个还未被赋值（未做选择）的 variable，作为下一步中进行赋值（做决定）和约束条件测试的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if self.consistent(first, local_assignment):</span><br><span class="line">    result: Optional[Dict[V, D]] = self.backtracking_search(local_assignment)</span><br><span class="line">    if result is not None:</span><br><span class="line">        return result</span><br></pre></td></tr></table></figure><p>为前面未赋值的某个 variable “做决定”。将对应的 domain 中所有存在的值依次赋值给该 variable，形成一个新的方案（local_assignment）。若该方案符合所有的约束条件（通过 <code>consistent()</code> 方法检测），则借助递归进行下一轮对另一个 variable 的赋值，直到触发终止条件（所有 variable 都被赋值）。</p><p><code>return None</code></p><p>若针对某个特定的 variable，已经检查完 domain 中包含的所有可能的值，仍没有找到符合要求的方案，则返回 <code>None</code> 表示没有解决。这会导致 backtracking 搜索结束本轮 <code>for</code> 循环，返回到递归的上一层中的 <code>for</code> 循环，尝试为上一步中已赋值的 variable 做出不同的决定，并继续递归（或回溯）下去。</p><h4 id="地图上色问题"><a href="#地图上色问题" class="headerlink" title="地图上色问题"></a>地图上色问题</h4><p>假如有一张澳大利亚地图，需要按州进行上色。要求所有相邻的州不能有相同的颜色。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-bc114087e7adbbc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="地图上色问题的一种解决方案"></p><p>借助前面构建的约束符合框架，实现代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map_coloring.py</span></span><br><span class="line"><span class="keyword">from</span> csp <span class="keyword">import</span> Constraint, CSP</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Dict, List, Optional</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapColoringConstraint</span><span class="params">(Constraint[str, str])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, place1: str, place2: str)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        super().__init__([place1, place2])</span><br><span class="line">        self.place1 = place1</span><br><span class="line">        self.place2 = place2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">satisfied</span><span class="params">(self, assignment: Dict[str, str])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># if either place is not in the assignment, then it is not</span></span><br><span class="line">        <span class="comment"># yet possible for their colors to be conflicting</span></span><br><span class="line">        <span class="keyword">if</span> self.place1 <span class="keyword">not</span> <span class="keyword">in</span> assignment <span class="keyword">or</span> self.place2 <span class="keyword">not</span> <span class="keyword">in</span> assignment:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="comment"># check the color assigned to place1 is not the same as the</span></span><br><span class="line">        <span class="comment"># color assigned to place2</span></span><br><span class="line">        <span class="keyword">return</span> assignment[self.place1] != assignment[self.place2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    variables: List[str] = [<span class="string">"Western Australia"</span>, <span class="string">"Northern Territory"</span>, <span class="string">"South Australia"</span>,</span><br><span class="line">                            <span class="string">"Queensland"</span>, <span class="string">"New South Wales"</span>, <span class="string">"Victoria"</span>, <span class="string">"Tasmania"</span>]</span><br><span class="line">    domains: Dict[str, List[str]] = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> variable <span class="keyword">in</span> variables:</span><br><span class="line">        domains[variable] = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>]</span><br><span class="line">    csp: CSP[str, str] = CSP(variables, domains)</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Western Australia"</span>, <span class="string">"Northern Territory"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Western Australia"</span>, <span class="string">"South Australia"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"South Australia"</span>, <span class="string">"Northern Territory"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Queensland"</span>, <span class="string">"Northern Territory"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Queensland"</span>, <span class="string">"South Australia"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Queensland"</span>, <span class="string">"New South Wales"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"New South Wales"</span>, <span class="string">"South Australia"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Victoria"</span>, <span class="string">"South Australia"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Victoria"</span>, <span class="string">"New South Wales"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Victoria"</span>, <span class="string">"Tasmania"</span>))</span><br><span class="line"></span><br><span class="line">    solution: Optional[Dict[str, str]] = csp.backtracking_search()</span><br><span class="line">    <span class="keyword">if</span> solution <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        print(<span class="string">"No solution found"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(solution)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; &#123;'Western Australia': 'red', 'Northern Territory': 'green', 'South</span></span><br><span class="line"><span class="comment"># Australia': 'blue', 'Queensland': 'red', 'New South Wales': 'green',</span></span><br><span class="line"><span class="comment"># 'Victoria': 'red', 'Tasmania': 'green'&#125;</span></span><br></pre></td></tr></table></figure></p><p>简单梳理一下程序逻辑：</p><p>在上述 CSP 中，地图中的 7 个州即为 variables（为方便，以 a、b、c、d、e、f、g 代替）<br><code>variables = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;]</code></p><p>每个州都可以涂成红绿蓝三种颜色（假设用 1、2、3 指代）中的任何一种，各 variable 对应的所有颜色即组成对应 variable 的 domain：<br><code>domains = {&#39;a&#39;: [1, 2, 3], &#39;b&#39;: [1, 2, 3], &#39;c&#39;: [1, 2, 3], &#39;d&#39;: [1, 2, 3], &#39;e&#39;: [1, 2, 3], &#39;f&#39;: [1, 2, 3], &#39;g&#39;: [1, 2, 3]}</code></p><p>constraints 的逻辑在 MapColoringConstraints 类中实现，即已经涂色的相邻的两个州色彩须不一致。比如 a 与 b 相邻，则该 constraint 的表示如下：<br><code>MapColoringConstraint(&#39;a&#39;, &#39;b&#39;)</code><br>而所有的 constraints 都会关联到对应的以 variable 为键的字典中。即若 a 同时与 b 和 c 相邻，则变量 a 的 constraints 表示为：<br><code>{&#39;a&#39;: [MapColoringConstraint(&#39;a&#39;, &#39;b&#39;), MapColoringConstraint(&#39;a&#39;, &#39;c&#39;)]}</code></p><p><code>backtrack_search()</code> 方法的执行流程为：</p><ul><li>在 variables 中取第一个未被赋值（涂色）的 variable，为其赋予对应 domain 中的某个数值作为临时方案</li><li>用该 variable 对应的所有 constraints 测试上述临时方案的可行性。若符合要求，则借助递归开启下一轮循环，继续为另一个未被赋值（涂色）的 variable 赋值</li><li>若不符合要求，则继续本轮循环，为本 variable 赋予 domain 中的另一个值</li><li>若对应 domain 中的所有值赋予 variable 后都不能符合约束要求，则返回 None。本轮循环结束，回到递归的上一轮继续循环，为上一轮中已赋值的 variable 赋予不同的值，延续递归操作</li><li>若所有 variable 都已被赋值，则返回 variable 及其对应的值作为最终的解决方案；若所有循环（递归/回溯）结束，返回结果最终为 None，则表示无法找到合理的解决方案</li></ul><h4 id="国际象棋的八王后问题"><a href="#国际象棋的八王后问题" class="headerlink" title="国际象棋的八王后问题"></a>国际象棋的八王后问题</h4><p>国际象棋的棋盘由 8x8 的方格组成，棋子落于方格上。而棋子王后能够吃掉处于同一行、同一列、同一斜线上的任何一个敌方棋子。<br>八王后问题是指需要将 8 个王后放置到国际象棋棋盘上且彼此之间不会产生冲突（即不会有任意两枚棋子位于同一行、同一列或者同一斜线上）。</p><p>其中一种可能的解决方案如下图：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-9424bba1dc8714d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="eight queens"></p><p>实现代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> csp <span class="keyword">import</span> Constraint, CSP</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Dict, List, Optional</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueensConstraint</span><span class="params">(Constraint[int, int])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, columns: List[int])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        super().__init__(columns)</span><br><span class="line">        self.columns = columns</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">satisfied</span><span class="params">(self, assignment: Dict[int, int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># q1c = queen 1 column, q1r = queen 1 row</span></span><br><span class="line">        <span class="keyword">for</span> q1c, q1r <span class="keyword">in</span> assignment.items():</span><br><span class="line">            <span class="comment"># q2c = queen 2 column</span></span><br><span class="line">            <span class="keyword">for</span> q2c <span class="keyword">in</span> range(q1c + <span class="number">1</span>, len(self.columns) + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> q2c <span class="keyword">in</span> assignment:</span><br><span class="line">                    q2r = assignment[q2c]</span><br><span class="line">                    <span class="keyword">if</span> q1r == q2r:  <span class="comment"># same row?</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                    <span class="keyword">if</span> abs(q1r - q2r) == abs(q1c - q2c):  <span class="comment"># same diagonal?</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    columns: List[int] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">    rows: Dict[int, List[int]] = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> columns:</span><br><span class="line">        rows[column] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">    csp: CSP[int, int] = CSP(columns, rows)</span><br><span class="line"></span><br><span class="line">    csp.add_constraint(QueensConstraint(columns))</span><br><span class="line">    solution: Optional[Dict[int, int]] = csp.backtracking_search()</span><br><span class="line">    <span class="keyword">if</span> solution <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        print(<span class="string">"No solution found!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(solution)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; &#123;1: 1, 2: 5, 3: 8, 4: 6, 5: 3, 6: 7, 7: 2, 8: 4&#125;</span></span><br></pre></td></tr></table></figure></p><p>简单解释下 <code>satisfied()</code> 方法中的两个 <code>for</code> 循环。<code>assignment</code> 采用类似 <code>{1: 1, 2: 5, 3: 8, 4: 6, 5: 3, 6: 7, 7: 2, 8: 4}</code> 的字典类型（一开始会短一些），上述两个 <code>for</code> 循环的作用在于，先以棋盘上的第一列为标准，若第一列与剩余的几列不存在冲突，则去掉第一列，再比较第二列与剩余的几列是否存在冲突，以此类推。一旦出现任何冲突，则返回 False。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.manning.com/books/classic-computer-science-problems-in-python" target="_blank" rel="noopener">Classic Computer Science Problems in Python</a><br><a href="https://github.com/davecom/ClassicComputerScienceProblemsInPython" target="_blank" rel="noopener">davecom/ClassicComputerScienceProblemsInPython</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由计算工具解决的很大一部分问题都可以归类为&lt;strong&gt;约束满足问题（CSPs, constraint-satisfaction problems）&lt;/strong&gt;。CSP 一般包含三个基本概念：&lt;strong&gt;变量（variables）&lt;/strong&gt;、&lt;stron
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="DataStructure" scheme="https://rollingstarky.github.io/tags/DataStructure/"/>
    
      <category term="Algorithm" scheme="https://rollingstarky.github.io/tags/Algorithm/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="CSP" scheme="https://rollingstarky.github.io/tags/CSP/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——反模式</title>
    <link href="https://rollingstarky.github.io/2021/02/03/python-design-patterns-anti-pattern/"/>
    <id>https://rollingstarky.github.io/2021/02/03/python-design-patterns-anti-pattern/</id>
    <published>2021-02-02T16:00:00.000Z</published>
    <updated>2021-02-03T12:33:26.537Z</updated>
    
    <content type="html"><![CDATA[<p>软件设计模式提供了一套规则或标准，能够帮助开发人员在设计层面进行决策。不良的设计主要表现在四个方面：</p><ul><li>不动性：开发的应用程序非常难以重用</li><li>刚性：任何小的更改需求都会导致软件的太多部分必须进行相应的改动，牵一发而动全身</li><li>脆弱性：应用程序的任何更改都会导致现有系统变得非常容易崩溃</li><li>粘滞性：由于架构层面的修改非常困难，修改必须由开发人员在代码层面或环境本身中进行</li></ul><h4 id="软件开发反模式"><a href="#软件开发反模式" class="headerlink" title="软件开发反模式"></a>软件开发反模式</h4><p>在软件开发过程中，往往会偏离最初的代码结构，原因一般有：</p><ul><li>开发人员的想法会随着开发过程的推进而发生变化</li><li>用例通常会随着客户的反馈而进行更改</li><li>最初设计的数据结构可能会随功能或可伸缩性等方面的考虑而发生变化</li></ul><p>基于上述原因，软件通常需要进行重构。</p><p><strong>意大利面条式代码</strong></p><p>典型成因包括：</p><ul><li>对面向对象编程和分析的无知</li><li>没有考虑产品的架构或设计</li><li>快餐式思维</li></ul><p>问题：</p><ul><li>结构的重用性会降到最低</li><li>维护工作量过高</li><li>进行修改时，扩展性和灵活性会降低</li></ul><p><strong>金锤</strong></p><p>金锤的意思是一把锤子搞定所有的钉子（解决所有问题）。软件开发人员或团队通常会有一种倾向，一头扎进一个成熟的解决方案，而不管其是否满足适用性。</p><p>典型成因：</p><ul><li>来自不了解具体问题的高层的建议</li><li>某解决方案在过去多次验证有效，但当前项目有不同的背景和要求</li><li>公司已被这种技术“绑架”，或员工们因为顺手对这种技术情有独钟</li></ul><p>金锤的影响：</p><ul><li>痴迷于一个解决方案，并把它应用于所有软件项目</li><li>不是通过功能，而是通过开发中使用的技术来描述产品</li><li>没有满足需求，造成与用户的预期不符</li></ul><p><strong>熔岩流</strong></p><p>熔岩流与软件应用中的死代码或一段用不到的代码有关，人们害怕一旦对其进行修改就会破坏其他东西。随着时间的流逝，这段代码会一直留在软件中并固化其位置，就像熔岩变成硬岩一样。</p><p>熔岩流的成因：</p><ul><li>在产品中有大量的试错代码</li><li>由一个人单独编写的代码，未经审查的情况下移交给了其他开发团队</li><li>软件架构或设计的初始思想是通过代码库实现的，但没有人能理解</li></ul><p>熔岩流的症状：</p><ul><li>开发的测试工作具有很低的代码覆盖率</li><li>代码中含有莫名其妙的注释</li><li>过时的接口，或开发人员需要围绕既有代码展开工作</li></ul><p><strong>复制粘贴式编程</strong></p><p>原因：</p><ul><li>新手开发者不习惯编写代码或不知道如何开发</li><li>快速修复 bug 或急就章式的开发</li><li>代码重复，无法满足跨模块标准化以及代码结构化的要求</li><li>缺乏长远打算或深谋远虑</li></ul><p>后果：</p><ul><li>多个软件应用存在同种类型的问题</li><li>维护成本更高，bug 的生命周期也会变得更长</li><li>较少的模块化代码库，相同的代码会散落于多处</li><li>继承问题</li></ul><h4 id="软件架构反模式"><a href="#软件架构反模式" class="headerlink" title="软件架构反模式"></a>软件架构反模式</h4><p><strong>重新发明轮子</strong></p><p>原因：</p><ul><li>缺乏中央文档或存储库来讲解架构级问题和存放已实现的解决方案</li><li>社区或公司内的技术领袖之间缺乏沟通</li><li>组织中遵循的流程是从头开始构建的</li></ul><p>后果：</p><ul><li>解决一个标准问题的方案太多，其中有许多考虑得并不周全</li><li>会耗费工程团队更多的时间和资源，导致预算超标，完成时间延后</li><li>封闭的系统架构、重复劳动和糟糕的风险管理</li></ul><p><strong>供应商套牢</strong></p><p>原因：</p><ul><li>熟悉供应商公司的权威人士以及技术采购的可能折扣</li><li>基于营销和销售业务人员而不是技术评估选择的技术</li><li>在当前项目中使用经过验证的技术，即使它不适合当前项目的需要</li><li>技术人员已经接受过相关技术的培训</li></ul><p>后果：</p><ul><li>公司产品的发布周期和维护周期直接取决于供应商的发布时间</li><li>该产品是围绕该技术而不是根据客户的要求开放的</li><li>产品上市时间不可靠，不能满足客户的期望</li></ul><p><strong>委员会设计</strong></p><p>原因：</p><ul><li>根据组织的流程，产品的架构或设计是由众多的利益相关者批准的</li><li>没有指定单独的联系人或负责设计的架构师</li><li>由营销或技术专家确定设计优先级，而不是客户反馈</li></ul><p>症状：</p><ul><li>开发人员和架构师之间的观点冲突，即使在设计完成后依旧如此</li><li>过于复杂的设计，很难记录</li><li>规格或设计的任何改动都需要经过多次审查，导致实现延迟</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件设计模式提供了一套规则或标准，能够帮助开发人员在设计层面进行决策。不良的设计主要表现在四个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不动性：开发的应用程序非常难以重用&lt;/li&gt;
&lt;li&gt;刚性：任何小的更改需求都会导致软件的太多部分必须进行相应的改动，牵一发而动全身&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Pattern" scheme="https://rollingstarky.github.io/tags/Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——模板方法模式</title>
    <link href="https://rollingstarky.github.io/2020/12/29/python-design-patterns-template-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/29/python-design-patterns-template-pattern/</id>
    <published>2020-12-28T16:00:00.000Z</published>
    <updated>2020-12-29T11:32:16.699Z</updated>
    
    <content type="html"><![CDATA[<p>行为模式主要关注对象的响应性，处理对象之间的交互以实现更强大的功能。模板方法模式即为一种行为设计模式。<br>比如可以将制作饮料的步骤定义为模板方法中的算法，子类就能使用模板方法来实现沏茶的步骤。且步骤的改变（即子类的具体实现）并不会影响原始算法的结构。这样模板方法模式中的子类就可以通过覆盖来创建不同的行为。</p><p>模板方法模式适用于以下场景：</p><ul><li>当多个算法或类实现类似或相同逻辑的时候</li><li>在子类中实现算法有助于减少重复代码的时候</li><li>子类可以通过覆盖实现多种不同行为的时候</li></ul><p>模板方法模式的主要意图：</p><ul><li>使用基本操作定义算法的框架</li><li>重新定义子类的某些操作，无需修改算法的结构</li><li>实现代码重用并避免重复工作</li><li>利用通用接口或功能实现</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/6875152-e01622b62200ad45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><ul><li>AbstractClass：在抽象方法的帮助下定义算法的操作或步骤。这些步骤将被具体的子类覆盖</li><li>template_method()：定义算法的框架。在模板方法中调用抽象方法定义的步骤以形成序列或算法</li><li>ConcreteClass：实现需要算法子类关注的特定步骤</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compiler</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collectSource</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileToObject</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileAndRun</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.collectSource()</span><br><span class="line">        self.compileToObject()</span><br><span class="line">        self.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">iOSCompiler</span><span class="params">(Compiler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collectSource</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Collecting Swift Source Code"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileToObject</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Compiling Swift code to LLVM bitcode"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Program runing on runtime environment"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iOS = iOSCompiler()</span><br><span class="line">iOS.compileAndRun()</span><br><span class="line"><span class="comment"># =&gt; Collecting Swift Source Code</span></span><br><span class="line"><span class="comment"># =&gt; Compiling Swift code to LLVM bitcode</span></span><br><span class="line"><span class="comment"># =&gt; Program runing on runtime environment</span></span><br></pre></td></tr></table></figure><h4 id="现实中的模板方法模式"><a href="#现实中的模板方法模式" class="headerlink" title="现实中的模板方法模式"></a>现实中的模板方法模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod, ABCMeta</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trip</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setTransport</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day3</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">returnHome</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">itinerary</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setTransport()</span><br><span class="line">        self.day1()</span><br><span class="line">        self.day2()</span><br><span class="line">        self.day3()</span><br><span class="line">        self.returnHome()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VeniceTrip</span><span class="params">(Trip)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setTransport</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Take a boat and find your way in the Grand Canal"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Visit St Mark's Basilica in St Mark's Square"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Appreciate Doge's Palace"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day3</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Enjoy the food near the Rialto Bridge"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">returnHome</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Get souovenirs for friends and get back"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaldivesTrip</span><span class="params">(Trip)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setTransport</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"On foot, on any island, Wow!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Enjoy the marine life of Banana Reef"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Go for the water sports and snorkelling"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day3</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Relax on the beach and enjoy the sun"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">returnHome</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Don't feel like leaving the beach.."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TravelAgency</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrange_trip</span><span class="params">(self)</span>:</span></span><br><span class="line">        choice = input(<span class="string">"What kind of place you'd like to go historical or to a beach? "</span>)</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">'historical'</span>:</span><br><span class="line">            self.trip = VeniceTrip()</span><br><span class="line">            self.trip.itinerary()</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">'beach'</span>:</span><br><span class="line">            self.trip = MaldivesTrip()</span><br><span class="line">            self.trip.itinerary()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TravelAgency().arrange_trip()</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; What kind of place you'd like to go historical or to a beach? beach</span></span><br><span class="line"><span class="comment"># =&gt; On foot, on any island, Wow!</span></span><br><span class="line"><span class="comment"># =&gt; Enjoy the marine life of Banana Reef</span></span><br><span class="line"><span class="comment"># =&gt; Go for the water sports and snorkelling</span></span><br><span class="line"><span class="comment"># =&gt; Relax on the beach and enjoy the sun</span></span><br><span class="line"><span class="comment"># =&gt; Don't feel like leaving the beach..</span></span><br></pre></td></tr></table></figure><ul><li>抽象类 Trip 是一个接口，定义了不同日子使用的交通方式和参观地点等细节</li><li>setTransport 是一个抽象方法，由 ConcreteClass 实现，作用是设置交通方式</li><li>day1()、day2()、day3() 抽象方法定义了特定日期所参观的地点</li><li>itinerary() 模板方法则用于创建完整的行程</li><li>VeniceTrip 类和 MaldivesTrip 类是 Trip 接口的具体实现</li></ul><h4 id="模板方法的优点和缺点"><a href="#模板方法的优点和缺点" class="headerlink" title="模板方法的优点和缺点"></a>模板方法的优点和缺点</h4><p>优点：</p><ul><li>没有代码重复</li><li>使用继承而不是合成，只有为数不多的几个方法需要重写</li><li>灵活性，允许子类决定如何实现算法中的步骤</li></ul><p>缺点：</p><ul><li>调试和理解模板方法模式中的流程序列时可能会令人困惑</li><li>模板框架的维护可能是一个问题，任何层次（底层或高层）的变更都可能对实现造成干扰</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;行为模式主要关注对象的响应性，处理对象之间的交互以实现更强大的功能。模板方法模式即为一种行为设计模式。&lt;br&gt;比如可以将制作饮料的步骤定义为模板方法中的算法，子类就能使用模板方法来实现沏茶的步骤。且步骤的改变（即子类的具体实现）并不会影响原始算法的结构。这样模板方法模式中的
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Pattern" scheme="https://rollingstarky.github.io/tags/Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——观察者模式</title>
    <link href="https://rollingstarky.github.io/2020/12/29/python-design-patterns-observer-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/29/python-design-patterns-observer-pattern/</id>
    <published>2020-12-28T16:00:00.000Z</published>
    <updated>2020-12-29T11:36:51.151Z</updated>
    
    <content type="html"><![CDATA[<h4 id="行为型模式中的观察者模式"><a href="#行为型模式中的观察者模式" class="headerlink" title="行为型模式中的观察者模式"></a>行为型模式中的观察者模式</h4><p>创建型模式（比如单例模式）是基于对象的创建机制的，这些模式隔离了对象的创建细节，使得实现这些细节的代码能够与要创建的对象类型相互独立。<br>结构型模式（比如门面模式）用于设计对象和类的结构，使得它们能够相互协作以形成更大的结构。重点是结构的简化以及识别类和对象之间的关系。<br>行为型模式（比如观察者模式）主要关注的是对象的责任，处理对象之间的交互，以实现更复杂的功能。对象之间应该可以彼此交互，且应该是松耦合的。</p><p>在观察者设计模式中，对象（主题）维护了一个依赖（观察者）列表，以便主题可以使用观察者定义的任何方法通知所有观察者它所发生的变化。</p><p>在分布式应用中，多个服务通常是通过彼此交互来实现更大型的操作的。服务可以执行多种操作，但它们执行的操作会直接或很大程度上取决于其交互的服务对象的状态。<br>比如用户注册的示例，其中用户服务负责响应用户在网站上的各种操作。假设有另一个电子邮件的服务，其作用是监视用户的状态并向用户发送电子邮件。若用户刚刚注册，则用户服务将调用电子邮件服务的方法，向用户发送邮件进行账户验证。若账户经过了验证，但信用度较低，则电子邮件服务将监视用户服务并向用户发送信用度过低的电子邮件警报。</p><p>因此，若应用中存在一个许多其他服务所依赖的核心服务，该核心服务就会成为观察者必须观察/监视变化的主题。当主题发生变化时，观察者应该改变自身对象状态，或者采取某些动作。<br>从属服务监视核心服务的状态变化是观察者设计模式的经典情境。</p><p><strong>观察者模式的主要目标</strong></p><ul><li>定义了对象之间的一对多依赖关系，使得对象中的任何更改都将自动通知给其他依赖对象</li><li>封装了主题的核心组件</li></ul><h4 id="观察者模式的基本实现"><a href="#观察者模式的基本实现" class="headerlink" title="观察者模式的基本实现"></a>观察者模式的基本实现</h4><p><img src="https://upload-images.jianshu.io/upload_images/6875152-63f9b8476702d69a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__observers = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(self, observer)</span>:</span></span><br><span class="line">        self.__observers.append(observer)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notifyAll</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> observer <span class="keyword">in</span> self.__observers:</span><br><span class="line">            observer.notify(subject, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, subject)</span>:</span></span><br><span class="line">        subject.register(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self, subject, *args)</span>:</span></span><br><span class="line">        print(type(self).__name__, <span class="string">':: Got'</span>, args, <span class="string">'From'</span>, subject)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, subject)</span>:</span></span><br><span class="line">        subject.register(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self, subject, *args)</span>:</span></span><br><span class="line">        print(type(self).__name__, <span class="string">':: Got'</span>, args, <span class="string">'From'</span>, subject)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subject = Subject()</span><br><span class="line">observer1 = Observer1(subject)</span><br><span class="line">observer2 = Observer2(subject)</span><br><span class="line">subject.notifyAll(<span class="string">'notification'</span>)</span><br><span class="line"><span class="comment"># =&gt; Observer1 :: Got ('notification',) From &lt;__main__.Subject object at 0x7f9a1276fa60&gt;</span></span><br><span class="line"><span class="comment"># =&gt; Observer2 :: Got ('notification',) From &lt;__main__.Subject object at 0x7f9a1276fa60&gt;</span></span><br></pre></td></tr></table></figure><h4 id="现实中的观察者模式"><a href="#现实中的观察者模式" class="headerlink" title="现实中的观察者模式"></a>现实中的观察者模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsPublisher</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__subscribers = []</span><br><span class="line">        self.__latestNews = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attach</span><span class="params">(self, subscriber)</span>:</span></span><br><span class="line">        self.__subscribers.append(subscriber)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detach</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__subscribers.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subscribers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [type(x).__name__ <span class="keyword">for</span> x <span class="keyword">in</span> self.__subscribers]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notifySubscribers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> sub <span class="keyword">in</span> self.__subscribers:</span><br><span class="line">            sub.update()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addNews</span><span class="params">(self, news)</span>:</span></span><br><span class="line">        self.__latestNews = news</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNews</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Got News: "</span>  + self.__latestNews</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subscriber</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSSubscriber</span><span class="params">(Subscriber)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, publisher)</span>:</span></span><br><span class="line">        self.publisher = publisher</span><br><span class="line">        self.publisher.attach(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(type(self).__name__, self.publisher.getNews())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailSubscriber</span><span class="params">(Subscriber)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, publisher)</span>:</span></span><br><span class="line">        self.publisher = publisher</span><br><span class="line">        self.publisher.attach(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(type(self).__name__, self.publisher.getNews())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyOtherSubscriber</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, publisher)</span>:</span></span><br><span class="line">        self.publisher = publisher</span><br><span class="line">        self.publisher.attach(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(type(self).__name__, self.publisher.getNews())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    news_publisher = NewsPublisher()</span><br><span class="line">    <span class="keyword">for</span> Subscriber <span class="keyword">in</span> [SMSSubscriber, EmailSubscriber, AnyOtherSubscriber]:</span><br><span class="line">        Subscriber(news_publisher)</span><br><span class="line">    print(<span class="string">"\nSubscribers: "</span>, news_publisher.subscribers())</span><br><span class="line"></span><br><span class="line">    news_publisher.addNews(<span class="string">'Hello World'</span>)</span><br><span class="line">    news_publisher.notifySubscribers()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\nDetached: "</span>, type(news_publisher.detach()).__name__)</span><br><span class="line">    print(<span class="string">"\nSubscribers: "</span>, news_publisher.subscribers())</span><br><span class="line"></span><br><span class="line">    news_publisher.addNews(<span class="string">'My second news'</span>)</span><br><span class="line">    news_publisher.notifySubscribers()</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Subscribers:  ['SMSSubscriber', 'EmailSubscriber', 'AnyOtherSubscriber']</span></span><br><span class="line"><span class="comment"># =&gt; SMSSubscriber Got News: Hello World</span></span><br><span class="line"><span class="comment"># =&gt; EmailSubscriber Got News: Hello World</span></span><br><span class="line"><span class="comment"># =&gt; AnyOtherSubscriber Got News: Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Detached:  AnyOtherSubscriber</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Subscribers:  ['SMSSubscriber', 'EmailSubscriber']</span></span><br><span class="line"><span class="comment"># =&gt; SMSSubscriber Got News: My second news</span></span><br><span class="line"><span class="comment"># =&gt; EmailSubscriber Got News: My second news</span></span><br></pre></td></tr></table></figure><h4 id="松耦合与观察者模式"><a href="#松耦合与观察者模式" class="headerlink" title="松耦合与观察者模式"></a>松耦合与观察者模式</h4><p>松耦合架构的特性：</p><ul><li>降低了一个元素内发生的更改可能对其他元素产生意外影响的风险</li><li>使得测试、维护和故障排除工作更加简单</li><li>系统可以轻松地分解为可定义的元素</li></ul><p>观察者模式提供了一种实现主体和观察者松耦合的对象设计模式：</p><ul><li>主题对观察者唯一的了解就是它实现的一个特定的接口</li><li>可以随时添加任意的新观察者</li><li>添加新观察者时，完全无需修改主题</li><li>观察者或主题没有绑定在一起，可以彼此独立使用。观察者可以在任何地方重复使用</li><li>主题或观察者中的变化不会相互影响</li></ul><p><strong>观察者模式的优缺点</strong><br>优点：</p><ul><li>使得彼此交互的对象之间保持松耦合</li><li>使得可以在无需对主题或观察者进行任何修改的情况下高效地发送数据到其他对象</li><li>可以随时添加/删除观察者</li></ul><p>缺点：</p><ul><li>观察者接口必须由具体观察者实现，涉及继承，且无法进行组合</li><li>若实现不当的话，观察者可能会增加复杂性，导致性能降低</li><li>在软件应用中，通知有时是不可靠的，并导致竞争条件不一致</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;行为型模式中的观察者模式&quot;&gt;&lt;a href=&quot;#行为型模式中的观察者模式&quot; class=&quot;headerlink&quot; title=&quot;行为型模式中的观察者模式&quot;&gt;&lt;/a&gt;行为型模式中的观察者模式&lt;/h4&gt;&lt;p&gt;创建型模式（比如单例模式）是基于对象的创建机制的，这些模式隔
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Pattern" scheme="https://rollingstarky.github.io/tags/Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——状态模式</title>
    <link href="https://rollingstarky.github.io/2020/12/26/python-design-patterns-state-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/26/python-design-patterns-state-pattern/</id>
    <published>2020-12-25T16:00:00.000Z</published>
    <updated>2020-12-26T15:43:41.879Z</updated>
    
    <content type="html"><![CDATA[<p>行为模式关注的是对象的响应性，它们通过对象之间的交互以实现更复杂的功能。<br>状态模式是一种行为设计模式，在该模式中，一个对象可以基于其内部状态封装多个行为。比如根据收音机的基本状态（AM/FM），当调谐到 AM 或 FM 频道时，扫描频道的行为就会相应地发生动态的改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod, ABCMeta</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"ConcreteStateB"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"ConcreteStateA"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getState</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setState</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self.state = state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state.handle()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context = Context()</span><br><span class="line">stateA = ConcreteStateA()</span><br><span class="line">stateB = ConcreteStateB()</span><br><span class="line"></span><br><span class="line">context.setState(stateA)</span><br><span class="line">context.handle()</span><br><span class="line"><span class="comment"># =&gt; ConcreteStateA</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6875152-3efbf755276685c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><ul><li>State：定义 <code>Handle()</code> 抽象方法的接口。需要通过 <code>ConcreteState</code> 类实现</li><li>ConcreteState：实现 <code>Handle()</code> 方法，可以根据状态变化定义执行的实际操作</li><li>Context：接收客户端请求，维护着对象当前状态的引用，以根据请求调用具体的行为</li></ul><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod, ABCMeta</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doThis</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StartState</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doThis</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"TV Switching ON..."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StopState</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doThis</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"TV Switching OFF..."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TVContext</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getState</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setState</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self.state = state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doThis</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state.doThis()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context = TVContext()</span><br><span class="line">context.getState()</span><br><span class="line"></span><br><span class="line">start = StartState()</span><br><span class="line">stop = StopState()</span><br><span class="line"></span><br><span class="line">context.setState(stop)</span><br><span class="line">context.doThis()</span><br><span class="line"><span class="comment"># =&gt; TV Switching OFF...</span></span><br></pre></td></tr></table></figure><h4 id="真实用例"><a href="#真实用例" class="headerlink" title="真实用例"></a>真实用例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputerState</span>:</span></span><br><span class="line">    name = <span class="string">"state"</span></span><br><span class="line">    allowed = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">switch</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> state.name <span class="keyword">in</span> self.allowed:</span><br><span class="line">            print(<span class="string">"current:"</span>, self, <span class="string">" =&gt; switching to"</span>, state.name)</span><br><span class="line">            self.__class__ = state</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"Current:"</span>, self, <span class="string">" =&gt; switching to"</span>, state.name, <span class="string">"not possible."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Off</span><span class="params">(ComputerState)</span>:</span></span><br><span class="line">    name = <span class="string">"off"</span></span><br><span class="line">    allowed = [<span class="string">'on'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">On</span><span class="params">(ComputerState)</span>:</span></span><br><span class="line">    name = <span class="string">"on"</span></span><br><span class="line">    allowed = [<span class="string">'off'</span>, <span class="string">'suspend'</span>, <span class="string">'hibernate'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Suspend</span><span class="params">(ComputerState)</span>:</span></span><br><span class="line">    name = <span class="string">"suspend"</span></span><br><span class="line">    allowed = [<span class="string">'on'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hibernate</span><span class="params">(ComputerState)</span>:</span></span><br><span class="line">    name = <span class="string">"hibernate"</span></span><br><span class="line">    allowed = [<span class="string">'on'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state = Off()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self.state.switch(state)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    comp = Computer()</span><br><span class="line">    comp.change(On)</span><br><span class="line">    comp.change(Off)</span><br><span class="line"></span><br><span class="line">    comp.change(On)</span><br><span class="line">    comp.change(Suspend)</span><br><span class="line">    comp.change(Hibernate)</span><br><span class="line">    comp.change(On)</span><br><span class="line">    comp.change(Hibernate)</span><br><span class="line"><span class="comment"># =&gt; current: off  =&gt; switching to on</span></span><br><span class="line"><span class="comment"># =&gt; current: on  =&gt; switching to off</span></span><br><span class="line"><span class="comment"># =&gt; current: off  =&gt; switching to on</span></span><br><span class="line"><span class="comment"># =&gt; current: on  =&gt; switching to suspend</span></span><br><span class="line"><span class="comment"># =&gt; Current: suspend  =&gt; switching to hibernate not possible.</span></span><br><span class="line"><span class="comment"># =&gt; current: suspend  =&gt; switching to on</span></span><br><span class="line"><span class="comment"># =&gt; current: on  =&gt; switching to Hibernate</span></span><br></pre></td></tr></table></figure><p><strong>状态模式的优点</strong></p><ul><li>在状态设计模式中，对象的行为是其状态的函数结果，且行为在运行时依旧状态而改变。这消除了对 if/else 或 switch/case 条件逻辑的依赖</li><li>使用状态模式，实现多态行为是很方便的，并且易于添加状态来支持额外的行为</li><li>状态模式提高了聚合性，针对状态的行为被聚合到 ConcreteState 类中，放置在代码的同一个地方</li><li>状态模式不仅改善了扩展应用程序行为时的灵活性，且提高了代码的可维护性。一个 ConcreteState 类即对应一种行为</li></ul><p><strong>状态模式的缺点</strong></p><ul><li>类爆炸：由于每个状态都需要在 ConcreteState 中定义，可能导致创建太多功能较为单一的类。既增加了代码量，又使得状态机的结构更加难以审查</li><li>随着新行为的引入，Context 类需要进行相应的更新以处理每个行为，使得上下文行为更容易受到每个新行为的影响</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;行为模式关注的是对象的响应性，它们通过对象之间的交互以实现更复杂的功能。&lt;br&gt;状态模式是一种行为设计模式，在该模式中，一个对象可以基于其内部状态封装多个行为。比如根据收音机的基本状态（AM/FM），当调谐到 AM 或 FM 频道时，扫描频道的行为就会相应地发生动态的改变。
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Patterns" scheme="https://rollingstarky.github.io/tags/Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——命令模式</title>
    <link href="https://rollingstarky.github.io/2020/12/26/python-design-patterns-command-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/26/python-design-patterns-command-pattern/</id>
    <published>2020-12-25T16:00:00.000Z</published>
    <updated>2020-12-26T15:41:53.902Z</updated>
    
    <content type="html"><![CDATA[<p>命令模式是一种行为设计模式。可以用来实现比如安装软件时的安装向导功能，通常安装向导会通过多个步骤根据用户的选择了解用户的偏好。安装向导首先启动一个名为 Command 的对象，用于存储在向导的多个步骤中用户指定的选项。当用户在最后一个步骤中点击完成按钮时，Command 对象就会运行 execute() 方法，该方法会考察所有存储的选项并完成相应的安装过程。</p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-db6d1fb7abddb771.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><p>命令模式通常包含以下术语：</p><ul><li>Command 对象了解 Receiver 对象的情况，并能调用其方法</li><li>调用者（Invoker）方法的参数值存储在 Command 对象中</li><li>调用者知道如何执行命令</li><li>客户端（Client）用来创建 Command 对象并设置其接收者</li></ul><p>命令模式的主要意图：</p><ul><li>将请求封装为对象</li><li>可用不同的请求对客户端进行参数化</li><li>允许将请求保存在队列中</li><li>提供面向对象的回调</li></ul><p>命令模式的适用场景：</p><ul><li>根据需要执行的操作对对象进行参数化</li><li>将操作添加到队列并在不同地点执行请求</li><li>创建一个结构根据较小的操作来完成高级操作</li></ul><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyStockOrder</span><span class="params">(Order)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stock)</span>:</span></span><br><span class="line">        self.stock = stock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stock.buy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellStockOrder</span><span class="params">(Order)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stock)</span>:</span></span><br><span class="line">        self.stock = stock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stock.sell()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Agent</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__orderQueue = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">placeOrder</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        self.__orderQueue.append(order)</span><br><span class="line">        order.execute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StockTrade</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buy</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"You will buy stocks"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sell</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"You will sell stocks"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    stock = StockTrade()</span><br><span class="line">    buyStock = BuyStockOrder(stock)</span><br><span class="line">    sellStock = SellStockOrder(stock)</span><br><span class="line"></span><br><span class="line">    agent = Agent()</span><br><span class="line">    agent.placeOrder(buyStock)</span><br><span class="line">    agent.placeOrder(sellStock)</span><br><span class="line"><span class="comment"># =&gt; You will buy stocks</span></span><br><span class="line"><span class="comment"># =&gt; You will sell stocks</span></span><br></pre></td></tr></table></figure><ul><li>Order 类 -&gt; Command 对象</li><li>BuyStockOrder 和 SellStockOrder 类 -&gt; ConcreteCommand 对象，为交易系统定义适当的操作</li><li>StockTrade 类 -&gt; Receiver 对象，定义了多个方法（动作）可以被 ConcreteCommand 调用以买入或卖出股票</li><li>Agent 类 -&gt; Invoker 对象，作为客户端和 StockTrade 的中介，执行客户下达的订单</li></ul><p>命令模式的优点：</p><ul><li>将调用操作的类与知道如何执行该操作的类解耦</li><li>借助队列系统，可以创建一系列命令</li><li>添加新命令更加容易，无需更改现有代码</li><li>可以使用命令模式定义回滚系统</li></ul><p>命令模式的缺点：</p><ul><li>为了实现目标，需要大量的类和对象进行协作</li><li>每个单独的命令都是一个 ConcreteCommand 类，增加了实现和维护的成本</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;命令模式是一种行为设计模式。可以用来实现比如安装软件时的安装向导功能，通常安装向导会通过多个步骤根据用户的选择了解用户的偏好。安装向导首先启动一个名为 Command 的对象，用于存储在向导的多个步骤中用户指定的选项。当用户在最后一个步骤中点击完成按钮时，Command 对
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Patterns" scheme="https://rollingstarky.github.io/tags/Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——门面模式</title>
    <link href="https://rollingstarky.github.io/2020/12/25/python-design-patterns-facade-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/25/python-design-patterns-facade-pattern/</id>
    <published>2020-12-24T16:00:00.000Z</published>
    <updated>2020-12-25T11:14:44.369Z</updated>
    
    <content type="html"><![CDATA[<p>门面（facade）指建筑物的表面，尤其是最有吸引力的那一面。当人们从建筑物旁边经过时，可以欣赏其外部面貌，而不必了解其本身结构的复杂性。门面在隐藏内部复杂性的同时，也为客户端提供了一个可以轻松访问的接口。</p><p>比如需要到某个商店买东西，但对于该商店的布局并不清楚。可以直接找店主说明需要哪些东西，由店主将这些商品找到并提供给顾客。即店主作为购物的接口，顾客无需了解具体商品的位置。</p><p>门面设计模式的特点：</p><ul><li>为子系统的一组接口提供一个统一的高级接口，帮助客户端以更简单的方式使用这些子系统</li><li>门面并不是封装子系统，而是对底层子系统进行组合。即用单个接口对象表示复杂的子系统</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/6875152-19e85bda057736af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><p><strong>门面</strong></p><ul><li>一个接口，知道某个请求应该交由那个子系统处理</li><li>通过组合的方式将客户端的请求委派给相应的子系统对象</li></ul><p><strong>系统</strong></p><ul><li>实现子系统的功能，由一组负责不同任务的类来表示</li><li>处理门面对象分配的工作，但并不知道门面也不引用它</li></ul><p><strong>客户端</strong></p><ul><li>会实例化门面</li><li>会向门面提出请求</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventManager</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Event Manager:: Let me talk to the folks\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrange</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.hotelier = Hotelier()</span><br><span class="line">        self.hotelier.bookHotel()</span><br><span class="line"></span><br><span class="line">        self.florist = Florist()</span><br><span class="line">        self.florist.setFlowerRequirements()</span><br><span class="line"></span><br><span class="line">        self.caterer = Caterer()</span><br><span class="line">        self.caterer.setCuisine()</span><br><span class="line"></span><br><span class="line">        self.musician = Musician()</span><br><span class="line">        self.musician.setMusicType()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hotelier</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Arranging the Hotel for Marriage? --"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__isAvailable</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Is the Hotel free for the event on given day?"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bookHotel</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.__isAvailable():</span><br><span class="line">            print(<span class="string">"Registered the Booking\n\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Florist</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Flower Decorations for the Event? --"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setFlowerRequirements</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Carnations, Roses and Lilies would be used for Decorations\n\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caterer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Food Arrangements for the Event --"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCuisine</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Chinese &amp; Continental Cuisine to be served\n\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Musician</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Musical Arrangements for the Marriage --"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setMusicType</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Jazz and Classical will be played\n\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"You:: Whoa! Marriage Arrangements??!!!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">asskEventManager</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"You:: Let's Contact the Event Manager\n\n"</span>)</span><br><span class="line">        em = EventManager()</span><br><span class="line">        em.arrange()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"You:: Thanks to Event Manager, all preparations done!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">you = You()</span><br><span class="line">you.asskEventManager()</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; You:: Whoa! Marriage Arrangements??!!!</span></span><br><span class="line"><span class="comment"># =&gt; You:: Let's Contact the Event Manager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Event Manager:: Let me talk to the folks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Arranging the Hotel for Marriage? --</span></span><br><span class="line"><span class="comment"># =&gt; Is the Hotel free for the event on given day?</span></span><br><span class="line"><span class="comment"># =&gt; Registered the Booking</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Flower Decorations for the Event? --</span></span><br><span class="line"><span class="comment"># =&gt; Carnations, Roses and Lilies would be used for Decorations</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Food Arrangements for the Event --</span></span><br><span class="line"><span class="comment"># =&gt; Chinese &amp; Continental Cuisine to be served</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Musical Arrangements for the Marriage --</span></span><br><span class="line"><span class="comment"># =&gt; Jazz and Classical will be played</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; You:: Thanks to Event Manager, all preparations done!</span></span><br></pre></td></tr></table></figure><h4 id="最少知识原则"><a href="#最少知识原则" class="headerlink" title="最少知识原则"></a>最少知识原则</h4><p>门面能够将客户端与实现具体功能的子系统解耦，其背后的设计原理即最少知识原则。</p><ul><li>在设计系统时，对于创建的每个对象，都应该考察与之交互的类的数量，以及交互的方式</li><li>避免创建许多彼此紧密耦合的类。若类之间存在大量的依赖关系，系统就会变得难以维护，应坚决避免</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;门面（facade）指建筑物的表面，尤其是最有吸引力的那一面。当人们从建筑物旁边经过时，可以欣赏其外部面貌，而不必了解其本身结构的复杂性。门面在隐藏内部复杂性的同时，也为客户端提供了一个可以轻松访问的接口。&lt;/p&gt;
&lt;p&gt;比如需要到某个商店买东西，但对于该商店的布局并不清楚
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Patterns" scheme="https://rollingstarky.github.io/tags/Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——代理模式</title>
    <link href="https://rollingstarky.github.io/2020/12/25/python-design-patterns-proxy-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/25/python-design-patterns-proxy-pattern/</id>
    <published>2020-12-24T16:00:00.000Z</published>
    <updated>2020-12-25T11:10:52.713Z</updated>
    
    <content type="html"><![CDATA[<p>代理通常是指一个介于寻求方和提供方之间的中介系统。寻求发是发出请求的一方，而提供方则是根据请求提供资源的一方。<br>在设计模式中，代理通常是封装实际服务对象的装饰器或代理人，可以为其包装的对象提供附加功能同时无需改变对象本身的代码。其主要目的是为其他对象提供一个代理者或占位符，从而控制对实际对象的访问。</p><p>代理设计模式的主要工作：</p><ul><li>为其他对象提供代理，实现对原始对象的访问控制</li><li>可以用作一个中间层或接口，以支持分布式访问</li><li>通过增加代理，保护真正的组件不受意外影响</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/6875152-a919f0e04969d8de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># agent.py</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Payment</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_pay</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span><span class="params">(Payment)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.card = <span class="keyword">None</span></span><br><span class="line">        self.account = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getAccount</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.account = self.card</span><br><span class="line">        <span class="keyword">return</span> self.account</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hasFunds</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Bank:: Checking if Account "</span>, self.__getAccount(), <span class="string">" has enough funds"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCard</span><span class="params">(self, card)</span>:</span></span><br><span class="line">        self.card = card</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_pay</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.__hasFunds():</span><br><span class="line">            print(<span class="string">"Bank:: Paying the merhant"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"Bank:: Sorry, not enough funds"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DebitCard</span><span class="params">(Payment)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.bank = Bank()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_pay</span><span class="params">(self)</span>:</span></span><br><span class="line">        card = input(<span class="string">"Proxy:: Punch in Card Number: "</span>)</span><br><span class="line">        self.bank.setCard(card)</span><br><span class="line">        <span class="keyword">return</span> self.bank.do_pay()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"You:: Let's buy the Denim shirt"</span>)</span><br><span class="line">        self.debitCard = DebitCard()</span><br><span class="line">        self.isPurchased = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_payment</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.isPurchased = self.debitCard.do_pay()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.isPurchased:</span><br><span class="line">            print(<span class="string">"You:: Denim shirt is Mine :-)"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"You:: I should earn more :("</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">you = You()</span><br><span class="line">you.make_payment()</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python agent.py</span><br><span class="line"><span class="function">You:: <span class="title">Let</span>'<span class="title">s</span> <span class="title">buy</span> <span class="title">the</span> <span class="title">Denim</span> <span class="title">shirt</span></span></span><br><span class="line"><span class="function"><span class="title">Proxy</span>:: <span class="title">Punch</span> <span class="title">in</span> <span class="title">Card</span> <span class="title">Number</span>: 12345</span></span><br><span class="line"><span class="function"><span class="title">Bank</span>:: <span class="title">Checking</span> <span class="title">if</span> <span class="title">Account</span>  12345  <span class="title">has</span> <span class="title">enough</span> <span class="title">funds</span></span></span><br><span class="line"><span class="function"><span class="title">Bank</span>:: <span class="title">Paying</span> <span class="title">the</span> <span class="title">merhant</span></span></span><br><span class="line"><span class="function"><span class="title">You</span>:: <span class="title">Denim</span> <span class="title">shirt</span> <span class="title">is</span> <span class="title">Mine</span> :-)</span></span><br></pre></td></tr></table></figure><p>关于类 You（对应 UML 图中的 client）的解释：</p><ul><li>该类用于实现客户端的行为</li><li><code>__init__()</code> 会调用代理并将其实例化</li><li><code>make_payment()</code> 方法表示购买动作，会在内部调用代理的付款方法</li></ul><p>关于类 Bank（对应 UML 图中的 RealSubject）的解释：</p><ul><li>该类实际完成从顾客账户向商家划账的动作（<code>do_pay()</code>）</li><li>该类提供了多个方法来处理有关付款的一系列逻辑（<code>__getAccount()</code>、<code>__hasFunds()</code>、<code>do_pay()</code> 等）</li><li>通过 <code>setCard()</code> 方法从代理处获取借记卡信息</li></ul><p>关于 DebitCard 类（对应 UML 图中的 Proxy）的解释：</p><ul><li>该类用于实现代理的行为，充当真实主题（银行）的代理</li><li>顾客需要付款时，无需跑去银行提款再回到商家支付，而是调用 DebitCard 的 <code>do_pay()</code> 方法</li><li>DebitCard 类在内部控制真实主题（Bank）的创建，并向银行提供借记卡的详细信息</li><li>Bank 对象在内部对账户进行检查并完成支付动作</li></ul><h4 id="代理模式的优点"><a href="#代理模式的优点" class="headerlink" title="代理模式的优点"></a>代理模式的优点</h4><ul><li>可以通过缓存笨重的对象或频繁访问的对象来提高应用程序的性能</li><li>可以提供对于真实对象的访问授权</li><li>远程代理还便于与远程服务器进行交互，并监视系统</li></ul><h4 id="门面模式与代理模式的比较"><a href="#门面模式与代理模式的比较" class="headerlink" title="门面模式与代理模式的比较"></a>门面模式与代理模式的比较</h4><table><thead><tr><th>代理模式</th><th>门面模式</th></tr></thead><tbody><tr><td>为其他对象提供代理或占位符，以控制对原始对象的访问</td><td>为类的大型子系统提供了一个简单的接口</td></tr><tr><td>代理对象具有与目标对象相同的接口，并保存目标对象的引用</td><td>实现了子系统之间通信和依赖性的最小化</td></tr><tr><td>充当客户端和被封装的对象之间的中介</td><td>提供了单一的简单接口</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代理通常是指一个介于寻求方和提供方之间的中介系统。寻求发是发出请求的一方，而提供方则是根据请求提供资源的一方。&lt;br&gt;在设计模式中，代理通常是封装实际服务对象的装饰器或代理人，可以为其包装的对象提供附加功能同时无需改变对象本身的代码。其主要目的是为其他对象提供一个代理者或占
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Patterns" scheme="https://rollingstarky.github.io/tags/Patterns/"/>
    
      <category term="Proxy" scheme="https://rollingstarky.github.io/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Django models 详解之聚合查询（aggregate）与分组查询（annotate）</title>
    <link href="https://rollingstarky.github.io/2020/12/22/django-models-aggregate-and-annotate/"/>
    <id>https://rollingstarky.github.io/2020/12/22/django-models-aggregate-and-annotate/</id>
    <published>2020-12-21T16:00:00.000Z</published>
    <updated>2020-12-22T15:18:43.687Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、测试代码及数据"><a href="#一、测试代码及数据" class="headerlink" title="一、测试代码及数据"></a>一、测试代码及数据</h4><p><strong>models.py</strong> 代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">300</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    authors = models.ManyToManyField(Author)</span><br><span class="line">    pubdate = models.DateField()</span><br></pre></td></tr></table></figure><p><strong>测试数据</strong></p><p>authors：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"路人甲"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"路人乙"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"路人丙"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">28</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"路人丁"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">50</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>books：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"人之初"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"38.80"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2020-12-01"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"性本善"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"28.40"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2020-06-01"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">2</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"性相近"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"15.20"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2019-10-01"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">3</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"习相远"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"35.20"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2019-07-01"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">4</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"苟不教"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"5.20"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2018-07-01"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="number">4</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"性乃迁"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"55.20"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2018-12-01"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="number">4</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"教之道"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"33.20"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2018-12-23"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="number">3</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"贵以专"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"27.20"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2017-12-23"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">4</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h4 id="二、常用聚合操作"><a href="#二、常用聚合操作" class="headerlink" title="二、常用聚合操作"></a>二、常用聚合操作</h4><p>获取所有书籍的数量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.count()</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>获取由路人甲参与著作的所有书籍的数量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.filter(authors__name__contains=<span class="string">'路人甲'</span>).count()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>获取所有书籍的平均价格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.all().aggregate(Avg(<span class="string">'price'</span>))</span><br><span class="line">&#123;<span class="string">'price__avg'</span>: Decimal(<span class="string">'29.800000'</span>)&#125;</span><br></pre></td></tr></table></figure></p><p>获取所有书籍中的最高价格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.all().aggregate(Max(<span class="string">'price'</span>))</span><br><span class="line">&#123;<span class="string">'price__max'</span>: Decimal(<span class="string">'55.20'</span>)&#125;</span><br></pre></td></tr></table></figure></p><h5 id="涉及到一对多或多对多关系的聚合查询"><a href="#涉及到一对多或多对多关系的聚合查询" class="headerlink" title="涉及到一对多或多对多关系的聚合查询"></a>涉及到一对多或多对多关系的聚合查询</h5><p>计算每一位作者各自参与写作了多少本书：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors=Author.objects.annotate(num_books=Count(<span class="string">'book'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors</span><br><span class="line">&lt;QuerySet [&lt;Author: Author object (<span class="number">1</span>)&gt;, &lt;Author: Author object (<span class="number">2</span>)&gt;, &lt;Author: Author object (<span class="number">3</span>)&gt;, &lt;Author: Author object (<span class="number">4</span>)&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors[<span class="number">0</span>].num_books</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors.values_list(<span class="string">'name'</span>, <span class="string">'num_books'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'路人甲'</span>, <span class="number">3</span>), (<span class="string">'路人乙'</span>, <span class="number">3</span>), (<span class="string">'路人丙'</span>, <span class="number">4</span>), (<span class="string">'路人丁'</span>, <span class="number">4</span>)]&gt;</span><br></pre></td></tr></table></figure></p><p>即作者包含路人甲的书籍有3本，以此类推。</p><p>计算每一位作者各自参与写作的书籍数量，根据书籍出版年份是否在2020年以前分界：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>before_2020 = Count(<span class="string">'book'</span>, filter=Q(book__pubdate__lt=<span class="string">'2020-01-01'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>after_2020 = Count(<span class="string">'book'</span>, filter=Q(book__pubdate__gt=<span class="string">'2020-01-01'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors = Author.objects.annotate(before_2020=before_2020).annotate(after_2020=after_2020)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors</span><br><span class="line">&lt;QuerySet [&lt;Author: Author object (<span class="number">1</span>)&gt;, &lt;Author: Author object (<span class="number">2</span>)&gt;, &lt;Author: Author object (<span class="number">3</span>)&gt;, &lt;Author: Author object (<span class="number">4</span>)&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors[<span class="number">0</span>].before_2020</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors.values_list(<span class="string">'name'</span>, <span class="string">'before_2020'</span>, <span class="string">'after_2020'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'路人甲'</span>, <span class="number">2</span>, <span class="number">1</span>), (<span class="string">'路人乙'</span>, <span class="number">2</span>, <span class="number">1</span>), (<span class="string">'路人丙'</span>, <span class="number">4</span>, <span class="number">0</span>), (<span class="string">'路人丁'</span>, <span class="number">4</span>, <span class="number">0</span>)]&gt;</span><br></pre></td></tr></table></figure></p><p>即作者包含路人甲的书籍，2020年以前出版的有2本，2020年以后出版的有1本。以此类推。</p><p>获取每一位作者各自参与著作的书籍数量，将输出结果按书籍数量由大到小的顺序排序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors = Author.objects.annotate(num_books=Count(<span class="string">'book'</span>)).order_by(<span class="string">'-num_books'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors</span><br><span class="line">&lt;QuerySet [&lt;Author: Author object (<span class="number">3</span>)&gt;, &lt;Author: Author object (<span class="number">4</span>)&gt;, &lt;Author: Author object (<span class="number">1</span>)&gt;, &lt;Author: Author object (<span class="number">2</span>)&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors.values_list(<span class="string">'name'</span>, <span class="string">'num_books'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'路人丙'</span>, <span class="number">4</span>), (<span class="string">'路人丁'</span>, <span class="number">4</span>), (<span class="string">'路人甲'</span>, <span class="number">3</span>), (<span class="string">'路人乙'</span>, <span class="number">3</span>)]&gt;</span><br></pre></td></tr></table></figure></p><h4 id="三、aggregate"><a href="#三、aggregate" class="headerlink" title="三、aggregate"></a>三、aggregate</h4><p>在聚合查询中，Django 支持通过 <code>aggregate()</code> 方法从整个 <strong>QuerySet</strong> 中计算出一个汇总数据。如获取所有书籍的平均价格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.all().aggregate(Avg(<span class="string">'price'</span>))</span><br><span class="line">&#123;<span class="string">'price__avg'</span>: Decimal(<span class="string">'29.800000'</span>)&#125;</span><br></pre></td></tr></table></figure></p><p>上述语句中的 <code>all()</code> 可以省略。<code>aggregate()</code> 的参数表示我们想要做聚合计算的那一列数据，其中的 <code>&#39;price&#39;</code> 即表示 <strong>Book</strong> 模型的 <strong>price</strong> 字段。</p><p><code>aggregate()</code> 对于 <strong>QuerySet</strong> 来说是一种终止语句，会返回字典形式的键值对作为计算结果。其中的键会根据聚合的字段自动生成，也可以手动指定：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.all().aggregate(average_price=Avg(<span class="string">'price'</span>))</span><br><span class="line">&#123;<span class="string">'average_price'</span>: Decimal(<span class="string">'29.800000'</span>)&#125;</span><br></pre></td></tr></table></figure></p><p>如果想要同时完成多个聚合查询操作，可以为 <code>aggregate()</code> 添加多个参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg, Max, Min</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.aggregate(Avg(<span class="string">'price'</span>), Max(<span class="string">'price'</span>), Min(<span class="string">'price'</span>))</span><br><span class="line">&#123;<span class="string">'price__avg'</span>: Decimal(<span class="string">'29.800000'</span>), <span class="string">'price__max'</span>: Decimal(<span class="string">'55.20'</span>), <span class="string">'price__min'</span>: Decimal(<span class="string">'5.20'</span>)&#125;</span><br></pre></td></tr></table></figure></p><h4 id="四、annotate"><a href="#四、annotate" class="headerlink" title="四、annotate"></a>四、annotate</h4><p>借助 <code>annotate()</code> 方法，Django 可以从 <strong>QuerySet</strong> 的每一个对象中计算出对应的独立的汇总数据。比如想获得 <strong>Book</strong> 模型中每一本书的作者的数量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = Book.objects.annotate(num_authors=Count(<span class="string">'authors'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q</span><br><span class="line">&lt;QuerySet [&lt;Book: Book object (<span class="number">1</span>)&gt;, &lt;Book: Book object (<span class="number">2</span>)&gt;, &lt;Book: Book object (<span class="number">3</span>)&gt;, &lt;Book: Book object (<span class="number">4</span>)&gt;, &lt;Book: Book object (<span class="number">5</span>)&gt;, &lt;Book: Book object (<span class="number">6</span>)&gt;, &lt;Book: Book object (<span class="number">7</span>)&gt;, &lt;Book: Book object (<span class="number">8</span>)&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q[<span class="number">0</span>].num_authors</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.values_list(<span class="string">'name'</span>, <span class="string">'num_authors'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'人之初'</span>, <span class="number">1</span>), (<span class="string">'性本善'</span>, <span class="number">1</span>), (<span class="string">'性相近'</span>, <span class="number">1</span>), (<span class="string">'习相远'</span>, <span class="number">1</span>), (<span class="string">'苟不教'</span>, <span class="number">3</span>), (<span class="string">'性乃迁'</span>, <span class="number">3</span>), (<span class="string">'教之道'</span>, <span class="number">2</span>), (<span class="string">'贵以专'</span>, <span class="number">2</span>)]&gt;</span><br></pre></td></tr></table></figure></p><p>不同于 <code>aggregate()</code>，<code>annotate()</code> 对于 <strong>QuerySet</strong> 来说并不是终止语句，<code>annotate()</code> 方法的输出结果仍是 <strong>QuerySet</strong> 对象。该对象可以继续执行被 <strong>QuerySet</strong> 支持的任意操作，如 <code>filter()</code>、<code>order_by()</code> 等，甚至另一个 <code>annotate()</code>。</p><h4 id="五、join-amp-aggregate"><a href="#五、join-amp-aggregate" class="headerlink" title="五、join &amp; aggregate"></a>五、join &amp; aggregate</h4><p>某些情况下，你想要聚合的字段并不属于当前正在查询的模型，而是属于关联于当前模型的另一个模型。在对这些字段进行聚合查询时，Django 允许使用与 <code>filter()</code> 中相同的用于指定关联字段的双下划线语法。</p><p>比如想要获取每一位作者所著书籍的价格区间：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max, Min</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors = Author.objects.annotate(min_price=Min(<span class="string">'book__price'</span>), max_price=Max(<span class="string">'book__price'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors.values_list(<span class="string">'name'</span>, <span class="string">'min_price'</span>, <span class="string">'max_price'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'路人甲'</span>, Decimal(<span class="string">'5.20'</span>), Decimal(<span class="string">'38.80'</span>)), (<span class="string">'路人乙'</span>, Decimal(<span class="string">'28.40'</span>), Decimal(<span class="string">'55.20'</span>)), (<span class="string">'路人丙'</span>, Decimal(<span class="string">'5.20'</span>), Decimal(<span class="string">'55.20'</span>)), (<span class="string">'路人丁'</span>, Decimal(<span class="string">'5.20'</span>), Decimal(<span class="string">'55.20'</span>))]&gt;</span><br></pre></td></tr></table></figure></p><p>即作者为路人甲的书籍中，最低的价格为 5.20，最高的价格为 38.80。</p><h4 id="六、filter-或-order-by-应用到-annotate"><a href="#六、filter-或-order-by-应用到-annotate" class="headerlink" title="六、filter() 或 order_by() 应用到 annotate()"></a>六、filter() 或 order_by() 应用到 annotate()</h4><p>如查找所有多人合著（作者数量大于 1）的书籍列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>books = Book.objects.annotate(num_authors=Count(<span class="string">'authors'</span>)).filter(num_authors__gt=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>books</span><br><span class="line">&lt;QuerySet [&lt;Book: Book object (<span class="number">5</span>)&gt;, &lt;Book: Book object (<span class="number">6</span>)&gt;, &lt;Book: Book object (<span class="number">7</span>)&gt;, &lt;Book: Book object (<span class="number">8</span>)&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>books.values_list(<span class="string">'name'</span>, <span class="string">'num_authors'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'苟不教'</span>, <span class="number">3</span>), (<span class="string">'性乃迁'</span>, <span class="number">3</span>), (<span class="string">'教之道'</span>, <span class="number">2</span>), (<span class="string">'贵以专'</span>, <span class="number">2</span>)]&gt;</span><br></pre></td></tr></table></figure></p><p>根据作者数量对全部书籍进行排序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>books = Book.objects.annotate(num_authors=Count(<span class="string">'authors'</span>)).order_by(<span class="string">'num_authors'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>books</span><br><span class="line">&lt;QuerySet [&lt;Book: Book object (<span class="number">2</span>)&gt;, &lt;Book: Book object (<span class="number">4</span>)&gt;, &lt;Book: Book object (<span class="number">1</span>)&gt;, &lt;Book: Book object (<span class="number">3</span>)&gt;, &lt;Book: Book object (<span class="number">8</span>)&gt;, &lt;Book: Book object (<span class="number">7</span>)&gt;, &lt;Book: Book object (<span class="number">5</span>)&gt;, &lt;Book: Book object (<span class="number">6</span>)&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>books.values_list(<span class="string">'name'</span>, <span class="string">'num_authors'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'性本善'</span>, <span class="number">1</span>), (<span class="string">'习相远'</span>, <span class="number">1</span>), (<span class="string">'人之初'</span>, <span class="number">1</span>), (<span class="string">'性相近'</span>, <span class="number">1</span>), (<span class="string">'教之道'</span>, <span class="number">2</span>), (<span class="string">'贵以专'</span>, <span class="number">2</span>), (<span class="string">'苟不教'</span>, <span class="number">3</span>), (<span class="string">'性乃迁'</span>, <span class="number">3</span>)]&gt;</span><br></pre></td></tr></table></figure></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://docs.djangoproject.com/en/3.1/topics/db/aggregation/" target="_blank" rel="noopener">Django 官方文档 —— Aggregation</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、测试代码及数据&quot;&gt;&lt;a href=&quot;#一、测试代码及数据&quot; class=&quot;headerlink&quot; title=&quot;一、测试代码及数据&quot;&gt;&lt;/a&gt;一、测试代码及数据&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;models.py&lt;/strong&gt; 代码&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Web" scheme="https://rollingstarky.github.io/tags/Web/"/>
    
      <category term="Django" scheme="https://rollingstarky.github.io/tags/Django/"/>
    
      <category term="Models" scheme="https://rollingstarky.github.io/tags/Models/"/>
    
      <category term="Aggregate" scheme="https://rollingstarky.github.io/tags/Aggregate/"/>
    
      <category term="Annotate" scheme="https://rollingstarky.github.io/tags/Annotate/"/>
    
      <category term="Backend" scheme="https://rollingstarky.github.io/tags/Backend/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——工厂模式</title>
    <link href="https://rollingstarky.github.io/2020/12/22/python-design-patterns-factory-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/22/python-design-patterns-factory-pattern/</id>
    <published>2020-12-21T16:00:00.000Z</published>
    <updated>2020-12-22T15:25:43.683Z</updated>
    
    <content type="html"><![CDATA[<p>在面向对象编程中，<strong>工厂</strong>表示一个负责创建其他类型的对象的类。<br>通常作为工厂的类会实现多个关联的方法，客户端通过某些参数调用这些方法，工厂则负责创建对应类型的对象并返回给客户端。</p><p>工厂模式的优点：</p><ul><li>松耦合。对象的创建独立于类的实现</li><li>客户端无需了解创建对象的类，只需知道需要传递的接口、方法和参数即可。简化了客户端的实现</li><li>可以轻松地在工厂中添加其他类来创建其他类型的对象，无需更改客户端代码</li><li>工厂可以重用现有的对象</li></ul><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_say</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Bhow Bhow"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Meow Meow"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForestFactory</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_sound</span><span class="params">(self, object_type)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> eval(object_type)().do_say()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ff = ForestFactory()</span><br><span class="line">    animal = input(<span class="string">"Which animal should make sound, Dog or Cat\n"</span>)</span><br><span class="line">    ff.make_sound(animal)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python make_sound.py</span><br><span class="line">Which animal should make sound, Dog or Cat</span><br><span class="line">Dog</span><br><span class="line">Bhow Bhow</span><br><span class="line">$ python make_sound.py</span><br><span class="line">Which animal should make sound, Dog or Cat</span><br><span class="line">Cat</span><br><span class="line">Meow Meow</span><br></pre></td></tr></table></figure><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>工厂方法模式的特点：</p><ul><li>定义一个接口来创建对象，但工厂本身并不负责创建动作，而是由其子类决定实例化哪些类</li><li>工厂方法的创建是通过继承而不是通过实例化来完成的</li><li>工厂方法使设计更具有定制性。可以返回相同的实例或子类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Section</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonalSection</span><span class="params">(Section)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Personal Section"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlbumSection</span><span class="params">(Section)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Album Section"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PatentSection</span><span class="params">(Section)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Patent Section"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublicationSection</span><span class="params">(Section)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Publication Section"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sections = []</span><br><span class="line">        self.createProfile()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createProfile</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSections</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.sections</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addSections</span><span class="params">(self, section)</span>:</span></span><br><span class="line">        self.sections.append(section)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedin</span><span class="params">(Profile)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createProfile</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.addSections(PersonalSection())</span><br><span class="line">        self.addSections(PatentSection())</span><br><span class="line">        self.addSections(PublicationSection())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">facebook</span><span class="params">(Profile)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createProfile</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.addSections(PersonalSection())</span><br><span class="line">        self.addSections(AlbumSection())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    profile_type = input(<span class="string">"Which Profile you'd like to create?\n[LinkedIn or FaceBook] "</span>)</span><br><span class="line">    profile = eval(profile_type.lower())()</span><br><span class="line">    print(<span class="string">"Creating Profile..."</span>, type(profile).__name__)</span><br><span class="line">    print(<span class="string">"Profile has sections --"</span>, profile.getSections())</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python profile.py</span><br><span class="line">Which Profile you'd like to create?</span><br><span class="line">[LinkedIn or FaceBook] LinkedIn</span><br><span class="line">Creating Profile... linkedin</span><br><span class="line">Profile has sections -- [&lt;__main__.PersonalSection object <span class="built_in">at</span> <span class="number">0</span>x7f3d25e53c70&gt;, &lt;__main__.PatentSection object <span class="built_in">at</span> <span class="number">0</span>x7f3d25e53ca0&gt;, &lt;__main__.PublicationSection object <span class="built_in">at</span> <span class="number">0</span>x7f3d25e53df0&gt;]</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6875152-f952b4d31d53092f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><p>Profile 抽象类代表 Creator，提供了 createProfile() 工厂方法，用于创建带有适当板块的个人信息界面。但 Profile 并不清楚某个特定界面应该具有哪些板块，如 Facebook 需要提供个人信息板块和相册区。createProfile() 工厂方法实际是由 Profile 的子类去实现的。</p><p>两个 Profile 的子类 linkedin 和 facebook 代表 ConcreteCreator，每个类都实现了 createProfile 方法，该方法在运行时创建多个板块（ConcreteProducts）。</p><p><strong>工厂方法模式的优点</strong></p><ul><li>强大的灵活性，代码更加通用。实现哪些类取决于接口（Product），而不是 ConcreteProduct 类</li><li>松耦合。创建对象的代码与使用对象的代码是分离的。客户端不需要关心传递哪些参数以及需要实例化哪些类</li></ul><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>抽象工厂模式的主要目的是提供一个接口来创建一系列相关的对象，而无需指定具体的类。因此可以帮助客户端一次使用来自一个产品/系列的多个对象。比如正在开发的应用是平台无关的，则需要对不同平台下的各种依赖项（包括操作系统、文件系统调用等）进行抽象处理，由抽象工厂为各个平台创建所需的服务，客户端就不必直接创建平台对象了。</p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-68e798bf2b3e0e48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaFactory</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createNonVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndianPizzaFactory</span><span class="params">(PizzaFactory)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> DeluxVeggiePizza()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createNonVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ChickenPizza()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">USPizzaFactory</span><span class="params">(PizzaFactory)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> MexicanVegPizza()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createNonVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HamPizza()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VegPizza</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(self, VegPizza)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonVegPizza</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(self, VegPizza)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeluxVeggiePizza</span><span class="params">(VegPizza)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Prepare "</span>, type(self).__name__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChickenPizza</span><span class="params">(NonVegPizza)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(self, VegPizza)</span>:</span></span><br><span class="line">        print(type(self).__name__, <span class="string">" is served with Chicken on "</span>, type(VegPizza).__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MexicanVegPizza</span><span class="params">(VegPizza)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Prepare "</span>, type(self).__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HamPizza</span><span class="params">(NonVegPizza)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(self, VegPizza)</span>:</span></span><br><span class="line">        print(type(self).__name__, <span class="string">" is served with Ham on "</span>, type(VegPizza).__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makePizzas</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> factory <span class="keyword">in</span> [IndianPizzaFactory(), USPizzaFactory()]:</span><br><span class="line">            self.factory = factory</span><br><span class="line">            self.NonVegPizza = self.factory.createNonVegPizza()</span><br><span class="line">            self.VegPizza = self.factory.createVegPizza()</span><br><span class="line">            self.VegPizza.prepare()</span><br><span class="line">            self.NonVegPizza.serve(self.VegPizza)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pizza = PizzaStore()</span><br><span class="line">pizza.makePizzas()</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Prepare  DeluxVeggiePizza</span></span><br><span class="line"><span class="comment"># =&gt; ChickenPizza  is served with Chicken on  DeluxVeggiePizza</span></span><br><span class="line"><span class="comment"># =&gt; Prepare  MexicanVegPizza</span></span><br><span class="line"><span class="comment"># =&gt; HamPizza  is served with Ham on  MexicanVegPizza</span></span><br></pre></td></tr></table></figure><h5 id="工厂方法与抽象工厂方法的比较"><a href="#工厂方法与抽象工厂方法的比较" class="headerlink" title="工厂方法与抽象工厂方法的比较"></a>工厂方法与抽象工厂方法的比较</h5><table><thead><tr><th>工厂方法</th><th>抽象工厂方法</th></tr></thead><tbody><tr><td>向客户端开放了一个创建对象的方法</td><td>包含一个或多个工厂方法来创建一个系列的相关对象</td></tr><tr><td>使用继承和子类决定要创建哪个对象</td><td>使用组合将创建对象的任务委托给其他类</td></tr><tr><td>工厂方法用于创建一个产品</td><td>抽象工厂方法用于创建相关产品的系列</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在面向对象编程中，&lt;strong&gt;工厂&lt;/strong&gt;表示一个负责创建其他类型的对象的类。&lt;br&gt;通常作为工厂的类会实现多个关联的方法，客户端通过某些参数调用这些方法，工厂则负责创建对应类型的对象并返回给客户端。&lt;/p&gt;
&lt;p&gt;工厂模式的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Pattern" scheme="https://rollingstarky.github.io/tags/Pattern/"/>
    
      <category term="Factory" scheme="https://rollingstarky.github.io/tags/Factory/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 截获 Ctrl+S 组合键以及自动保存（提交）功能的实现</title>
    <link href="https://rollingstarky.github.io/2020/12/14/vue-js-add-auto-save-and-ctrl-s/"/>
    <id>https://rollingstarky.github.io/2020/12/14/vue-js-add-auto-save-and-ctrl-s/</id>
    <published>2020-12-13T16:00:00.000Z</published>
    <updated>2020-12-14T14:16:36.837Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，Chrome 中按下 <code>Ctrl+S</code> 组合键会进入“保存网页”界面，并不会与网页中的具体内容做交互。</p><p>最近在做一个前端基于 Vue 的在线文档，希望网页中按下 <code>Ctrl+S</code> 组合件就能触发提交动作，将前端数据的改动存储到后端数据库中。<br>并且不管用户是否操作，每隔特定时间也会自动提交文档的当前内容到后端，实现自动保存的功能。</p><p>示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;save(&apos;button&apos;)&quot;&gt;保存&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    document.addEventListener(&apos;keydown&apos;, this.saveContent)</span><br><span class="line"></span><br><span class="line">    this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">      this.save(&apos;timer&apos;)</span><br><span class="line">    &#125;, 10 * 1000)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    document.removeEventListener(&apos;keydown&apos;, this.saveContent)</span><br><span class="line">    clearInterval(this.timer)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    save(type) &#123;</span><br><span class="line">      console.log(`content saved by $&#123;type&#125;`)</span><br><span class="line">    &#125;,</span><br><span class="line">    saveContent(e) &#123;</span><br><span class="line">      var key = window.event.keyCode ? window.event.keyCode : window.event.which</span><br><span class="line">      if (key === 83 &amp;&amp; e.ctrlKey) &#123;</span><br><span class="line">        this.save(&apos;hot key&apos;)</span><br><span class="line">        e.preventDefault()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认情况下，Chrome 中按下 &lt;code&gt;Ctrl+S&lt;/code&gt; 组合键会进入“保存网页”界面，并不会与网页中的具体内容做交互。&lt;/p&gt;
&lt;p&gt;最近在做一个前端基于 Vue 的在线文档，希望网页中按下 &lt;code&gt;Ctrl+S&lt;/code&gt; 组合件就能触发提交动作，
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://rollingstarky.github.io/categories/JavaScript/"/>
    
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Web" scheme="https://rollingstarky.github.io/tags/Web/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="Frontend" scheme="https://rollingstarky.github.io/tags/Frontend/"/>
    
      <category term="JavaScript" scheme="https://rollingstarky.github.io/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://rollingstarky.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——单例模式</title>
    <link href="https://rollingstarky.github.io/2020/11/27/python-design-patterns-singleton/"/>
    <id>https://rollingstarky.github.io/2020/11/27/python-design-patterns-singleton/</id>
    <published>2020-11-26T16:00:00.000Z</published>
    <updated>2020-11-27T15:32:25.095Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式即确保类有且只有一个特定类型的对象，并提供全局访问点。因此通常用于日志记录、数据库操作、打印机后台处理程序等。这些程序在运行过程中只生成一个实例，避免对同一资源产生相互冲突的请求。</p><p><strong>特点：</strong></p><ul><li>确保类有且只有一个对象被创建</li><li>为唯一对象提供访问点，令其可被全局访问</li><li>控制共享资源的并行访问</li></ul><h4 id="经典单例模式"><a href="#经典单例模式" class="headerlink" title="经典单例模式"></a>经典单例模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'instance'</span>):</span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Singleton(<span class="string">'Singleton1'</span>)</span><br><span class="line">print(s1)</span><br><span class="line"><span class="comment"># =&gt; &lt;__main__.Singleton object at 0x7efc1b006220&gt;</span></span><br><span class="line">print(s1.name)</span><br><span class="line"><span class="comment"># =&gt; Singleton1</span></span><br><span class="line"></span><br><span class="line">s2 = Singleton(<span class="string">'Singleton2'</span>)</span><br><span class="line">print(s2)</span><br><span class="line"><span class="comment"># =&gt; &lt;__main__.Singleton object at 0x7efc1b006220&gt;</span></span><br><span class="line">print(s2.name)</span><br><span class="line"><span class="comment"># =&gt; Singleton2</span></span><br><span class="line">print(s1.name)</span><br><span class="line"><span class="comment"># =&gt; Singleton2</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，通过定义 <code>__new__</code> 方法控制对象的创建。方法 <code>hasattr</code> 则用于检查对象 <code>cls</code> 是否具有 <code>instance</code> 属性（即确认该类是否已经生成了一个对象）。若 instance 属性不存在，则使用 <code>super().__new__()</code> 方法创建新的实例；若 instance 属性存在，则分配已有的实例给变量。<br>因此当 <code>s2 = Singleton(&#39;Singleton2&#39;)</code> 执行时，hasattr 发现对象实例已存在（s1），因此直接将已有的对象分配给 s2。s1 和 s2 实际是同一个对象实例。</p><h4 id="Monostate（单态）模式"><a href="#Monostate（单态）模式" class="headerlink" title="Monostate（单态）模式"></a>Monostate（单态）模式</h4><p>Monostate 模式即类的所有实例对象共享相同的状态。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Borg</span>:</span></span><br><span class="line">    __shared_state = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__dict__ = self.__shared_state</span><br><span class="line"></span><br><span class="line">b = Borg()</span><br><span class="line">b1 = Borg()</span><br><span class="line"></span><br><span class="line">print(b <span class="keyword">is</span> b1)  <span class="comment"># =&gt; False</span></span><br><span class="line">b.x = <span class="number">4</span></span><br><span class="line">print(b.x)      <span class="comment"># =&gt; 4</span></span><br><span class="line">print(b1.x)     <span class="comment"># =&gt; 4</span></span><br><span class="line">b1.x = <span class="number">6</span></span><br><span class="line">print(b1.x)     <span class="comment"># =&gt; 6</span></span><br><span class="line">print(b.x)      <span class="comment"># =&gt; 6</span></span><br></pre></td></tr></table></figure></p><p>在上述代码中，通过将类变量 <code>__shared_state</code> 赋值给实例变量 <code>__dict__</code>（<code>__dict__</code> 变量用于存储实例对象的属性等状态），使得类生成的所有对象实例都共享同一状态。<br>即 b 和 b1 是 Borg 类创建的不同的实例对象，但用于保存实例状态的 <code>b.__dict__</code> 和 <code>b1.__dict__</code> 却是相同的（即都是 <code>Borg.__shared_state</code>）。因此 b 的属性 x 若发生改变，同样的变化也会体现到 b1 中。</p><p>也可以通过修改 <code>__new__</code> 方法来实现 Borg 模式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Borg</span>:</span></span><br><span class="line">    __shared_state = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name)</span>:</span></span><br><span class="line">        obj = super().__new__(cls)</span><br><span class="line">        obj.__dict__ = cls.__shared_state</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b1 = Borg(<span class="string">'Borg1'</span>)</span><br><span class="line">print(b1.name)   <span class="comment"># =&gt; Borg1</span></span><br><span class="line">b2 = Borg(<span class="string">'Borg2'</span>)</span><br><span class="line">print(b2.name)   <span class="comment"># =&gt; Borg2</span></span><br><span class="line">print(b1.name)   <span class="comment"># =&gt; Borg2</span></span><br><span class="line">b1.name = <span class="string">'Borg'</span></span><br><span class="line">print(b1.name)   <span class="comment"># =&gt; Borg</span></span><br><span class="line">print(b2.name)   <span class="comment"># =&gt; Borg</span></span><br><span class="line">print(b1 <span class="keyword">is</span> b2)  <span class="comment"># =&gt; False</span></span><br></pre></td></tr></table></figure></p><h4 id="通过元类实现单例模式"><a href="#通过元类实现单例模式" class="headerlink" title="通过元类实现单例模式"></a>通过元类实现单例模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetaSingleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.__instance = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.__instance:</span><br><span class="line">            self.__instance = super().__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span><span class="params">(metaclass=MetaSingleton)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger1 = Logger()</span><br><span class="line">logger2 = Logger()</span><br><span class="line">print(logger1, logger2)</span><br><span class="line"><span class="comment"># =&gt; &lt;__main__.Logger object at 0x7fac8af577c0&gt; &lt;__main__.Logger object at</span></span><br><span class="line"><span class="comment"># 0x7fac8af577c0&gt;</span></span><br><span class="line">print(logger1 <span class="keyword">is</span> logger2)  <span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure><h4 id="单例模式的实际应用"><a href="#单例模式的实际应用" class="headerlink" title="单例模式的实际应用"></a>单例模式的实际应用</h4><p><strong>DB 操作</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetaSingleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.__instance = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.__instance:</span><br><span class="line">            self.__instance = super().__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Database</span><span class="params">(metaclass=MetaSingleton)</span>:</span></span><br><span class="line">    connection = <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.connection <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.connection = sqlite3.connect(<span class="string">"db.sqlite3"</span>)</span><br><span class="line">            self.cursorobj = self.connection.cursor()</span><br><span class="line">        <span class="keyword">return</span> self.cursorobj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db1 = Database().connect()</span><br><span class="line">db2 = Database().connect()</span><br><span class="line"></span><br><span class="line">print(db1, db2)</span><br><span class="line"><span class="comment"># =&gt; &lt;sqlite3.Cursor object at 0x7f810d6f8260&gt; &lt;sqlite3.Cursor object at</span></span><br><span class="line"><span class="comment"># 0x7f810d6f8260&gt;</span></span><br><span class="line">print(db1 <span class="keyword">is</span> db2)</span><br><span class="line"><span class="comment"># =&gt; True</span></span><br></pre></td></tr></table></figure></p><p><strong>监控服务</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HealthCheck</span>:</span></span><br><span class="line">    _instance = <span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> HealthCheck._instance:</span><br><span class="line">            HealthCheck._instance = super().__new__(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> HealthCheck._instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._servers = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addServer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._servers.append(<span class="string">"Server 1"</span>)</span><br><span class="line">        self._servers.append(<span class="string">"Server 2"</span>)</span><br><span class="line">        self._servers.append(<span class="string">"Server 3"</span>)</span><br><span class="line">        self._servers.append(<span class="string">"Server 4"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">changeServer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._servers.pop()</span><br><span class="line">        self._servers.append(<span class="string">"Server 5"</span>)</span><br><span class="line"></span><br><span class="line">hc1 = HealthCheck()</span><br><span class="line">hc2 = HealthCheck()</span><br><span class="line"></span><br><span class="line">hc1.addServer()</span><br><span class="line">print(<span class="string">"Schedule health check for servers (1) ..."</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    print(<span class="string">"Checking "</span>, hc1._servers[i])</span><br><span class="line"></span><br><span class="line">hc2.changeServer()</span><br><span class="line">print(<span class="string">"Schedule health check for servers (2) ..."</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    print(<span class="string">"Checking "</span>, hc2._servers[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Schedule health check for servers (1) ...</span></span><br><span class="line"><span class="comment"># =&gt; Checking  Server 1</span></span><br><span class="line"><span class="comment"># =&gt; Checking  Server 2</span></span><br><span class="line"><span class="comment"># =&gt; Checking  Server 3</span></span><br><span class="line"><span class="comment"># =&gt; Checking  Server 4</span></span><br><span class="line"><span class="comment"># =&gt; Schedule health check for servers (2) ...</span></span><br><span class="line"><span class="comment"># =&gt; Checking  Server 1</span></span><br><span class="line"><span class="comment"># =&gt; Checking  Server 2</span></span><br><span class="line"><span class="comment"># =&gt; Checking  Server 3</span></span><br><span class="line"><span class="comment"># =&gt; Checking  Server 5</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单例模式即确保类有且只有一个特定类型的对象，并提供全局访问点。因此通常用于日志记录、数据库操作、打印机后台处理程序等。这些程序在运行过程中只生成一个实例，避免对同一资源产生相互冲突的请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="DesignPattern" scheme="https://rollingstarky.github.io/tags/DesignPattern/"/>
    
      <category term="Project" scheme="https://rollingstarky.github.io/tags/Project/"/>
    
      <category term="MetaClass" scheme="https://rollingstarky.github.io/tags/MetaClass/"/>
    
  </entry>
  
  <entry>
    <title>Django REST framework 使用 MongoDB 作为数据库后端</title>
    <link href="https://rollingstarky.github.io/2020/11/27/python-django-rest-framework-and-mongodb/"/>
    <id>https://rollingstarky.github.io/2020/11/27/python-django-rest-framework-and-mongodb/</id>
    <published>2020-11-26T16:00:00.000Z</published>
    <updated>2020-11-27T15:36:11.113Z</updated>
    
    <content type="html"><![CDATA[<p>想写个前后端分离的项目，需要在数据库中存储非常复杂的 JSON 格式（包含多层嵌套）的数据，又不想将 JSON 数据转为文本后以 Text 的格式存到 Mysql 数据库中。</p><p>因此想尝试下<strong>文档型</strong>数据库 MongoDB，其用来存放数据的文档结构，本身就是非常类似 JSON 对象的 BSON（Binary JSON）。</p><p>但 Django 的官方版本目前还未支持 NoSQL 数据库（参考 <a href="https://docs.djangoproject.com/en/3.1/faq/models/" target="_blank" rel="noopener">FAQ</a>），MongoDB 官方文档建议借助 <a href="https://www.djongomapper.com/configure/" target="_blank" rel="noopener">Djongo</a> 组件完成到<strong>原生 Django ORM</strong> 的对接。<br>Djongo 实际上是一个 SQL 到 MongoDB 的翻译器。通过 Django 的 <code>admin</code> 应用可以向 MongoDB 中添加或修改文档，其他 Django 模块如 <code>contrib</code>、<code>auth</code>、<code>session</code> 等也可以在不做任何改动的情况下正常使用。</p><h4 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h4><p>安装需要用到的 Python 模块，初始化项目：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pip install djongo djangorestframework</span><br><span class="line">$ django-admin startproject mongo_test</span><br><span class="line">$ <span class="built_in">cd</span> mongo_test</span><br><span class="line">$ django-admin startapp blogs</span><br></pre></td></tr></table></figure></p><p>修改项目配置文件（<code>mongo_test/settings.py</code>），添加数据库配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'djongo'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'mongo_test'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>数据库迁移，创建管理员账户，运行 WEB 服务：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py migrate</span><br><span class="line">$ python manage.py createsuperuser</span><br><span class="line">$ python manage.py runserver <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a> ，进入 Django 管理员后台，各部分功能使用正常：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-8f1fb3dddbbc73ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Django Admin"></p><p>此时访问 MongoDB 数据库，可以查询到存入的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// mongo shell</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin        0.000GB</span><br><span class="line">apscheduler  0.000GB</span><br><span class="line">config       0.000GB</span><br><span class="line">local        0.000GB</span><br><span class="line">mongo_test   0.000GB</span><br><span class="line">&gt; use mongo_test</span><br><span class="line">switched to db mongo_test</span><br><span class="line">&gt; show collections;</span><br><span class="line">__schema__</span><br><span class="line">auth_group</span><br><span class="line">auth_group_permissions</span><br><span class="line">auth_permission</span><br><span class="line">auth_user</span><br><span class="line">auth_user_groups</span><br><span class="line">auth_user_user_permissions</span><br><span class="line">django_admin_log</span><br><span class="line">django_content_type</span><br><span class="line">django_migrations</span><br><span class="line">django_session</span><br><span class="line">&gt; db.auth_user.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;5fc0a6a4e7b96c382fa9ccd8&quot;),</span><br><span class="line">        &quot;id&quot; : 1,</span><br><span class="line">        &quot;password&quot; : &quot;pbkdf2_sha256$180000$XL0v3lLCM1RW$rnw4qzoTUtwgc5EoKfB4yaaVEu1jTid8yuBVl0Y6P5Q=&quot;,</span><br><span class="line">        &quot;last_login&quot; : ISODate(&quot;2020-11-27T07:11:55.492Z&quot;),</span><br><span class="line">        &quot;is_superuser&quot; : true,</span><br><span class="line">        &quot;username&quot; : &quot;admin&quot;,</span><br><span class="line">        &quot;first_name&quot; : &quot;&quot;,</span><br><span class="line">        &quot;last_name&quot; : &quot;&quot;,</span><br><span class="line">        &quot;email&quot; : &quot;&quot;,</span><br><span class="line">        &quot;is_staff&quot; : true,</span><br><span class="line">        &quot;is_active&quot; : true,</span><br><span class="line">        &quot;date_joined&quot; : ISODate(&quot;2020-11-27T07:11:31.955Z&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Django-REST-framework"><a href="#Django-REST-framework" class="headerlink" title="Django REST framework"></a>Django REST framework</h4><p>在配置文件 <code>mongo_test/settings.py</code> 中的 <code>INSTALLED_APPS</code> 配置项下添加 <code>rest_framework</code> 和 <code>blogs</code> 两个应用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'blogs'</span></span><br><span class="line">]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h5 id="数据库模型（Models）"><a href="#数据库模型（Models）" class="headerlink" title="数据库模型（Models）"></a>数据库模型（Models）</h5><p>编辑 <code>blogs/models.py</code> 文件，创建数据库模型，内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> djongo <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'mongo_blog'</span></span><br></pre></td></tr></table></figure></p><h5 id="序列化器（Serializers）"><a href="#序列化器（Serializers）" class="headerlink" title="序列化器（Serializers）"></a>序列化器（Serializers）</h5><p>创建 <code>blogs/serializers.py</code> 文件，内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blogs.models <span class="keyword">import</span> Blog</span><br><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogSerializer</span><span class="params">(ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Blog</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure></p><h5 id="视图（Views）"><a href="#视图（Views）" class="headerlink" title="视图（Views）"></a>视图（Views）</h5><p>编辑 <code>blogs/views.py</code> 文件，内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blogs.models <span class="keyword">import</span> Blog</span><br><span class="line"><span class="keyword">from</span> blogs.serializers <span class="keyword">import</span> BlogSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Blog.objects.all()</span><br><span class="line">    serializer_class = BlogSerializer</span><br></pre></td></tr></table></figure></p><h5 id="路由（URLs）"><a href="#路由（URLs）" class="headerlink" title="路由（URLs）"></a>路由（URLs）</h5><p>创建 <code>blogs/urls.py</code> 文件，内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"><span class="keyword">from</span> blogs <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'blog'</span>, views.BlogViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h4 id="根路由"><a href="#根路由" class="headerlink" title="根路由"></a>根路由</h4><p>编辑项目路由配置文件 <code>mongo_test/urls.py</code>，内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'blogs.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://127.0.0.1/blog" target="_blank" rel="noopener">http://127.0.0.1/blog</a> ，利用 POST 方法新增数据以测试 REST API 运行效果：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-ec1c938c0225bd76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="REST API"></p><p>结果爆出 <code>TypeError</code> 错误（<code>int() argument must be a string, a bytes-like object or a number, not &#39;ObjectId&#39;</code>）：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-dfe391a89eca9357.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TypeError"></p><p>重新访问 <a href="http://127.0.0.1:8000/blog" target="_blank" rel="noopener">http://127.0.0.1:8000/blog</a> ，发现新增的数据已添加到数据库中，只是 <code>id</code> 项为 <code>null</code>：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"Blog"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"This is a TEST Blog"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>导致基于 REST API 的 CRUD 操作都是不能正常执行的。</p><h4 id="ObjectId"><a href="#ObjectId" class="headerlink" title="ObjectId"></a>ObjectId</h4><p>实际上按照上述方式存入数据库的数据是以下格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// mongo shell</span><br><span class="line">&gt; db.mongo_blog.findOne()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;5fc0ae2ea7795c8c4ddae815&quot;),</span><br><span class="line">        &quot;title&quot; : &quot;Blog&quot;,</span><br><span class="line">        &quot;content&quot; : &quot;This is a TEST Blog&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改数据库模型（<code>blogs/models.py</code>），令其包含 <code>_id</code> 字段：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> djongo <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    _id = models.ObjectIdField()</span><br><span class="line">    title = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'mongo_blog'</span></span><br></pre></td></tr></table></figure></p><p>刷新 <a href="http://127.0.0.1:8000/blog" target="_blank" rel="noopener">http://127.0.0.1:8000/blog</a> 页面，此时数据显示正常，也可以通过 POST 方法正常添加数据（_id 项留空，会自动生成）：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-73555b5d5cbb9bb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="POST"></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-d2d363a597044f86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="POST 结果"></p><h4 id="Retrieve"><a href="#Retrieve" class="headerlink" title="Retrieve"></a>Retrieve</h4><p>上述实现仍有部分问题，实际上只有新值数据（Create）和获取数据列表（List）能够正常运行。而 CRUD 中的 Retrieve、Update、Delete 都会报出 404 错误。即无法通过 _id 获取对应的数据对象。</p><p>比如访问 <a href="http://127.0.0.1:8000/blog/5fc0b18e60870125f0ed846d/" target="_blank" rel="noopener">http://127.0.0.1:8000/blog/5fc0b18e60870125f0ed846d/</a> ：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-8a023d07de79476d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Retrieve"></p><p>原因是 MongoDB 中的 <code>_id</code> 是 <strong>OjbectId</strong> 类型，与 Django REST framework 用于检索的 <code>_id</code> 类型不一致，导致无法通过 <code>_id</code> 找到对应的对象。需要在中间做一步转换工作（将字符串形式的 <code>_id</code> 转换为 <code>ObjectId</code> 形式）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// mongo shell</span><br><span class="line">&gt; db.mongo_blog.find(&#123;&quot;_id&quot;: &quot;5fc0b18e60870125f0ed846d&quot;&#125;)</span><br><span class="line">&gt;</span><br><span class="line">&gt; db.mongo_blog.find(&#123;&quot;_id&quot;: ObjectId(&quot;5fc0b18e60870125f0ed846d&quot;)&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5fc0b18e60870125f0ed846d&quot;), &quot;title&quot; : &quot;Blog2&quot;, &quot;content&quot; : &quot;This is another Blog&quot; &#125;</span><br></pre></td></tr></table></figure></p><h4 id="查看-ModelViewSet-源代码"><a href="#查看-ModelViewSet-源代码" class="headerlink" title="查看 ModelViewSet 源代码"></a>查看 ModelViewSet 源代码</h4><p>通过查看 <code>ModelViewSet</code> 的源代码，发现后台对 Retrieve 操作的响应逻辑是由<code>mixinx.RetrieveModelMixin</code> 类实现的，其中获取某个特定对象的函数是 <code>self.get_object()</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetrieveModelMixin</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Retrieve a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure></p><p>进一步查找，发现 <code>get_object()</code> 函数是在 <code>generics.GenericAPIVie</code> 类中实现的，其代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class GenericAPIView(views.APIView):</span><br><span class="line">    def get_object(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Returns the object the view is displaying.</span><br><span class="line"></span><br><span class="line">        You may want to override this if you need to provide non-standard</span><br><span class="line">        queryset lookups.  Eg if objects are referenced using multiple</span><br><span class="line">        keyword arguments in the url conf.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        # Perform the lookup filtering.</span><br><span class="line">        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field</span><br><span class="line"></span><br><span class="line">        assert lookup_url_kwarg in self.kwargs, (</span><br><span class="line">            &apos;Expected view %s to be called with a URL keyword argument &apos;</span><br><span class="line">            &apos;named &quot;%s&quot;. Fix your URL conf, or set the `.lookup_field` &apos;</span><br><span class="line">            &apos;attribute on the view correctly.&apos; %</span><br><span class="line">            (self.__class__.__name__, lookup_url_kwarg)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        filter_kwargs = &#123;self.lookup_field: self.kwargs[lookup_url_kwarg]&#125;</span><br><span class="line">        obj = get_object_or_404(queryset, **filter_kwargs)</span><br><span class="line"></span><br><span class="line">        # May raise a permission denied</span><br><span class="line">        self.check_object_permissions(self.request, obj)</span><br><span class="line"></span><br><span class="line">        return obj</span><br></pre></td></tr></table></figure></p><p>其中最关键的两句为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filter_kwargs = &#123;self.lookup_field: self.kwargs[lookup_url_kwarg]&#125;</span><br><span class="line">obj = get_object_or_404(queryset, **filter_kwargs)</span><br></pre></td></tr></table></figure></p><p><code>{self.lookup_field: self.kwargs[lookup_url_kwarg]}</code> 决定了最终 MongoDB 会以怎样的方式和条件检索某个对象。</p><h4 id="实现自己的-ModelViewSet"><a href="#实现自己的-ModelViewSet" class="headerlink" title="实现自己的 ModelViewSet"></a>实现自己的 ModelViewSet</h4><p>综上，为了让 CURD 操作中的 URD 能够通过 <code>_id</code>（ObjectId）检索获取特定对象，可以实现自己的 ModelViewSet 类，重写 <code>get_object()</code> 方法。</p><p>新建 <code>blogs/mongo_viewset.py</code> 文件，内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bson <span class="keyword">import</span> ObjectId</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self)</span>:</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Perform the lookup filtering.</span></span><br><span class="line">        lookup_url_kwarg = self.lookup_url_kwarg <span class="keyword">or</span> self.lookup_field</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> lookup_url_kwarg <span class="keyword">in</span> self.kwargs, (</span><br><span class="line">            <span class="string">'Expected view %s to be called with a URL keyword argument '</span></span><br><span class="line">            <span class="string">'named "%s". Fix your URL conf, or set the `.lookup_field` '</span></span><br><span class="line">            <span class="string">'attribute on the view correctly.'</span> %</span><br><span class="line">            (self.__class__.__name__, lookup_url_kwarg)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.lookup_field == <span class="string">'_id'</span>:</span><br><span class="line">            filter_kwargs = &#123;self.lookup_field: ObjectId(self.kwargs[self.lookup_field])&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            filter_kwargs = &#123;self.lookup_field: self.kwargs[self.lookup_url_kwarg]&#125;</span><br><span class="line">        obj = get_object_or_404(queryset, **filter_kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># May raise a permission denied</span></span><br><span class="line">        self.check_object_permissions(self.request, obj)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure></p><p>最主要的改动即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if self.lookup_field == &apos;_id&apos;:</span><br><span class="line">    filter_kwargs = &#123;self.lookup_field: ObjectId(self.kwargs[self.lookup_field])&#125;</span><br><span class="line">else:</span><br><span class="line">    filter_kwargs = &#123;self.lookup_field: self.kwargs[self.lookup_url_kwarg]&#125;</span><br></pre></td></tr></table></figure></p><p>视图代码 <code>blogs/views.py</code> 改为如下版本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blogs.models <span class="keyword">import</span> Blog</span><br><span class="line"><span class="keyword">from</span> blogs.serializers <span class="keyword">import</span> BlogSerializer</span><br><span class="line"><span class="keyword">from</span> blogs.mongo_viewset <span class="keyword">import</span> MongoModelViewSet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogViewSet</span><span class="params">(MongoModelViewSet)</span>:</span></span><br><span class="line">    queryset = Blog.objects.all()</span><br><span class="line">    serializer_class = BlogSerializer</span><br><span class="line">    lookup_field = <span class="string">'_id'</span></span><br></pre></td></tr></table></figure></p><p>此时访问 <a href="http://172.20.23.34:8000/blog/5fc0b18e60870125f0ed846d/" target="_blank" rel="noopener">http://172.20.23.34:8000/blog/5fc0b18e60870125f0ed846d/</a> 即可正常显示，即能够通过 <code>_id</code>（ObjectId）获取对应的数据对象。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-d55e6ce4ab706754.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Retrieve"></p><p>由此 CRUD 操作全部可以正常支持。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想写个前后端分离的项目，需要在数据库中存储非常复杂的 JSON 格式（包含多层嵌套）的数据，又不想将 JSON 数据转为文本后以 Text 的格式存到 Mysql 数据库中。&lt;/p&gt;
&lt;p&gt;因此想尝试下&lt;strong&gt;文档型&lt;/strong&gt;数据库 MongoDB，其用来存
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Web" scheme="https://rollingstarky.github.io/tags/Web/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="Django" scheme="https://rollingstarky.github.io/tags/Django/"/>
    
      <category term="REST" scheme="https://rollingstarky.github.io/tags/REST/"/>
    
      <category term="Backend" scheme="https://rollingstarky.github.io/tags/Backend/"/>
    
      <category term="MongoDB" scheme="https://rollingstarky.github.io/tags/MongoDB/"/>
    
      <category term="NoSQL" scheme="https://rollingstarky.github.io/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>Python Cookbook —— 元编程</title>
    <link href="https://rollingstarky.github.io/2020/11/19/python-cookbook-metaprogramming/"/>
    <id>https://rollingstarky.github.io/2020/11/19/python-cookbook-metaprogramming/</id>
    <published>2020-11-18T16:00:00.000Z</published>
    <updated>2020-11-19T14:05:33.373Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、函数装饰器"><a href="#一、函数装饰器" class="headerlink" title="一、函数装饰器"></a>一、函数装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timethis</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Decorator that reports the execution time.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        elapsed = time.time() - start</span><br><span class="line">        print(func.__name__, elapsed)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timethis</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">countdown(<span class="number">1000000</span>)</span><br><span class="line"><span class="comment"># =&gt; countdown 0.29901695251464844</span></span><br></pre></td></tr></table></figure><p>装饰器负责接收某个函数作为参数，然后返回一个新的函数作为输出。下面的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@timethis</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>实际上等同于<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">countdown = timethis(countdown)</span><br></pre></td></tr></table></figure></p><p>装饰器内部通常要定义一个接收任意参数（<code>*args, **kwargs</code>）的函数，即 <code>wrapper()</code>。在 wrapper 函数里，调用原始的作为参数传入的函数（<code>func</code>）并获取其结果，再根据需求添加上执行其他操作的代码（比如计时、日志等）。最后新创建的 wrapper 函数被返回并替换掉被装饰的函数（<code>countdown</code>），从而在不改变被装饰函数自身代码的情况下，为其添加额外的行为。</p><h4 id="二、带参数的装饰器"><a href="#二、带参数的装饰器" class="headerlink" title="二、带参数的装饰器"></a>二、带参数的装饰器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def logged(level, name=None, message=None):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    Add logging to a function. level is the logging</span><br><span class="line">    level, name is the logger name, and message is the</span><br><span class="line">    log message. </span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    logging.basicConfig(</span><br><span class="line">        level=logging.DEBUG, format=&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)</span><br><span class="line"></span><br><span class="line">    def decorate(func):</span><br><span class="line">        logname = name if name else func.__module__</span><br><span class="line">        log = logging.getLogger(logname)</span><br><span class="line">        logmsg = message if message else func.__name__</span><br><span class="line"></span><br><span class="line">        @wraps(func)</span><br><span class="line">        def wrapper(*args, **kwargs):</span><br><span class="line">            log.log(level, logmsg)</span><br><span class="line">            return func(*args, **kwargs)</span><br><span class="line">        return wrapper</span><br><span class="line">    return decorate</span><br><span class="line"></span><br><span class="line"># Example use</span><br><span class="line">@logged(logging.WARNING)</span><br><span class="line">def spam():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@logged(logging.INFO, name=&apos;Example&apos;, message=&apos;This is log message&apos;)</span><br><span class="line">def foo():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spam()</span><br><span class="line">foo()</span><br><span class="line"># =&gt; 2019-10-24 09:22:25,780 - __main__ - WARNING - spam</span><br><span class="line"># =&gt; 2019-10-24 09:22:25,783 - Example - INFO - This is log message</span><br></pre></td></tr></table></figure><p>最外层的函数 <code>logged()</code> 用于接收传入装饰器的参数，并使这些参数能够被装饰器中的内部函数（<code>decorate()</code>）访问。内部函数 decorate 则用于实现装饰器的“核心逻辑”，即接收某个函数作为参数，通过定义一个新的内部函数（<code>wrapper</code>）添加某些行为，再将这个新的函数返回作为被装饰函数的替代品。</p><h4 id="在类中定义的装饰器"><a href="#在类中定义的装饰器" class="headerlink" title="在类中定义的装饰器"></a>在类中定义的装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="comment"># Decorator as an instance method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator1</span><span class="params">(self, func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'Decorator 1'</span>)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Decorator as a class method</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator2</span><span class="params">(cls, func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'Decorator 2'</span>)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># As an instance method</span></span><br><span class="line">a = A()</span><br><span class="line"></span><br><span class="line"><span class="meta">@a.decorator1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">spam()</span><br><span class="line"><span class="comment"># =&gt; Decorator 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># As a class method</span></span><br><span class="line"><span class="meta">@A.decorator2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grok</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">grok()</span><br><span class="line"><span class="comment"># =&gt; Decorator 2</span></span><br></pre></td></tr></table></figure><h4 id="利用装饰器向原函数中添加参数"><a href="#利用装饰器向原函数中添加参数" class="headerlink" title="利用装饰器向原函数中添加参数"></a>利用装饰器向原函数中添加参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">optional_debug</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'debug'</span> <span class="keyword">in</span> inspect.getfullargspec(func).args:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'debug argument already defined'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, debug=False, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            print(<span class="string">'Calling'</span>, func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@optional_debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(x + y)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># =&gt; 5</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">3</span>, debug=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># =&gt; Calling add</span></span><br><span class="line"><span class="comment"># =&gt; 5</span></span><br></pre></td></tr></table></figure><h4 id="装饰器修改类的定义"><a href="#装饰器修改类的定义" class="headerlink" title="装饰器修改类的定义"></a>装饰器修改类的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_getattribute</span><span class="params">(cls)</span>:</span></span><br><span class="line">    orig_getattribute = cls.__getattribute__</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_getattribute</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'getting: '</span>, name)</span><br><span class="line">        <span class="keyword">return</span> orig_getattribute(self, name)</span><br><span class="line"></span><br><span class="line">    cls.__getattribute__ = new_getattribute</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@log_getattribute</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A(<span class="number">42</span>)</span><br><span class="line">print(a.x)</span><br><span class="line">a.spam()</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; getting:  x</span></span><br><span class="line"><span class="comment"># =&gt; 42</span></span><br><span class="line"><span class="comment"># =&gt; getting:  spam</span></span><br></pre></td></tr></table></figure><p>类装饰器可以用来重写类的部分定义以修改其行为，作为一种直观的类继承或元类的替代方式。<br>比如上述功能也可以通过类继承来实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggedGetattribute</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'getting: '</span>, name)</span><br><span class="line">        <span class="keyword">return</span> super().__getattribute__(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(LoggedGetattribute)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A(<span class="number">42</span>)</span><br><span class="line">print(a.x)</span><br><span class="line">a.spam()</span><br></pre></td></tr></table></figure></p><p>在某些情况下，类装饰器的方案要更为直观一些，并不会向继承层级中引入新的依赖。同时由于不使用 <code>super()</code> 函数，速度也稍快一点。</p><h4 id="使用元类控制实例的创建"><a href="#使用元类控制实例的创建" class="headerlink" title="使用元类控制实例的创建"></a>使用元类控制实例的创建</h4><p>Python 中的类可以像函数那样调用，同时创建实例对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Spam(<span class="string">'Guido'</span>)</span><br><span class="line">b = Spam(<span class="string">'Diana'</span>)</span><br></pre></td></tr></table></figure></p><p>如果开发人员想要自定义创建实例的行为，可以通过元类重新实现一遍 <code>__call__()</code> 方法。假设在调用类时不创建任何实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">NoInstance</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">"Can't instantiate directly"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(metaclass=NoInstance)</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grok</span><span class="params">(x)</span>:</span></span><br><span class="line">        print(<span class="string">'Spam.grok'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Spam.grok(<span class="number">42</span>)  <span class="comment"># Spam.grok</span></span><br><span class="line">s = Spam()</span><br><span class="line"><span class="comment"># TypeError: Can't instantiate directly</span></span><br></pre></td></tr></table></figure></p><p><strong>元类实现单例模式</strong><br>单例模式即类在创建对象时，单一的类确保只生成唯一的实例对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># singleton.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.__instance = <span class="keyword">None</span></span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.__instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.__instance = super().__call__(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> self.__instance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(metaclass=Singleton)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Creating Spam'</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> singleton <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Spam()</span><br><span class="line">Creating Spam</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = Spam()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Spam()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> c</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h4 id="强制检查类定义中的代码规范"><a href="#强制检查类定义中的代码规范" class="headerlink" title="强制检查类定义中的代码规范"></a>强制检查类定义中的代码规范</h4><p>可以借助元类监控普通类的定义代码。通常的方式是定义一个继承自 type 的元类并重写其 <code>__new__()</code> 或 <code>__init__()</code> 方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMeta</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, clsname, bases, clsdict)</span>:</span></span><br><span class="line">        <span class="comment"># clsname is name of class being defined</span></span><br><span class="line">        <span class="comment"># bases is tuple of base classes</span></span><br><span class="line">        <span class="comment"># clsdict is class dictionary</span></span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls, clsname, bases, clsdict)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMeta</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, clsname, bases, clsdict)</span>:</span></span><br><span class="line">        <span class="comment"># clsname is name of class being defined</span></span><br><span class="line">        <span class="comment"># bases is tuple of base classes</span></span><br><span class="line">        <span class="comment"># clsdict is class dictionary</span></span><br><span class="line">        <span class="keyword">return</span> super().__init__(clsname, bases, clsdict)</span><br></pre></td></tr></table></figure><p>为了使用元类，通常会先定义一个供其他对象继承的基类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span><span class="params">(metaclass=MyMeta)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Root)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Root)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>元类的重要特性在于，它允许用户在类定义时检查类的内容。在重写的 <code>__init__()</code> 方法内部，可以方便地检查 class dictionary、base class 或者其他与类定义相关的内容。此外，当元类指定给某个普通类以后，该普通类的所有子类也都会继承元类的定义。</p><p>下面是一个用于检查代码规范的元类，确保方法的命名里只包含小写字母：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoMixedCaseMeta</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, clsname, bases, clsdict)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> clsdict:</span><br><span class="line">            <span class="keyword">if</span> name.lower() != name:</span><br><span class="line">                <span class="keyword">raise</span> TypeError(<span class="string">'Bad attribute name: '</span> + name)</span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls, clsname, bases, clsdict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span><span class="params">(metaclass=NoMixedCaseMeta)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Root)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo_bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Root)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fooBar</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># TypeError: Bad attribute name: fooBar</span></span><br></pre></td></tr></table></figure></p><p>元类的定义中重写 <code>__new__()</code> 还是 <code>__init__()</code> 方法取决于你想以何种方式产出类。<code>__new__()</code> 方法生效于类创建之前，通常用于对类的定义进行改动（通过修改 class dictionary 的内容）；<code>__init__()</code> 方法生效于类创建之后，通常是与已经生成的类对象进行交互。比如 <code>super()</code> 函数只在类实例被创建后才能起作用。</p><h4 id="以编程的方式定义类"><a href="#以编程的方式定义类" class="headerlink" title="以编程的方式定义类"></a>以编程的方式定义类</h4><p>可以通过编程的方式创建类，比如从字符串中产出类的源代码。<br><code>types.new_class()</code> 函数可以用来初始化新的类对象，只需要向其提供类名、父类（以元组的形式）、关键字参数和一个用来更新 class dictionary 的回调函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Methods</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, shares, price)</span>:</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.shares = shares</span><br><span class="line">    self.price = price</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.shares * self.price</span><br><span class="line"></span><br><span class="line">cls_dict = &#123;</span><br><span class="line">    <span class="string">'__init__'</span>: __init__,</span><br><span class="line">    <span class="string">'cost'</span>: cost,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make a class</span></span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line">Stock = types.new_class(<span class="string">'Stock'</span>, (), &#123;&#125;, <span class="keyword">lambda</span> ns: ns.update(cls_dict))</span><br><span class="line">Stock.__module__ = __name__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Stock(<span class="string">'ACME'</span>, <span class="number">50</span>, <span class="number">91.1</span>)</span><br><span class="line">print(s)</span><br><span class="line"><span class="comment"># =&gt; &lt;__main__.Stock object at 0x7f0e3b62edc0&gt;</span></span><br><span class="line">print(s.cost())</span><br><span class="line"><span class="comment"># =&gt; 4555.0</span></span><br></pre></td></tr></table></figure></p><p>通常形式的类定义代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(Base, debug=True, typecheck=False)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>转换成对应的 <code>type.new_class()</code> 形式的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Spam = types.new_class(<span class="string">'Spam'</span>, (Base,),</span><br><span class="line">                       &#123;<span class="string">'debug'</span>: <span class="keyword">True</span>, <span class="string">'typecheck'</span>: <span class="keyword">False</span>&#125;,</span><br><span class="line">                       <span class="keyword">lambda</span> ns: ns.update(cls_dict))</span><br></pre></td></tr></table></figure></p><p>从代码中产出类对象在某些场景下是很有用的，比如 <code>collections.nametupe()</code> 函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Stock = collections.namedtuple(<span class="string">'Stock'</span>, [<span class="string">'name'</span>, <span class="string">'shares'</span>, <span class="string">'price'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Stock</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Stock</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>下面是一个类似 namedtuple 功能的实现代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">named_tuple</span><span class="params">(classname, fieldnames)</span>:</span></span><br><span class="line">    <span class="comment"># Populate a dictionary of field property accessors</span></span><br><span class="line">    cls_dict = &#123; name: property(operator.itemgetter(n))</span><br><span class="line">                 <span class="keyword">for</span> n, name <span class="keyword">in</span> enumerate(fieldnames) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make a __new__ function and add to the class dict</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(args) != len(fieldnames):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'Expected &#123;&#125; arguments'</span>.format(len(fieldnames)))</span><br><span class="line">        <span class="keyword">return</span> tuple.__new__(cls, args)</span><br><span class="line"></span><br><span class="line">    cls_dict[<span class="string">'__new__'</span>] = __new__</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make the class</span></span><br><span class="line">    cls = types.new_class(classname, (tuple,), &#123;&#125;,</span><br><span class="line">                          <span class="keyword">lambda</span> ns: ns.update(cls_dict))</span><br><span class="line"></span><br><span class="line">    cls.__module__ = sys._getframe(<span class="number">1</span>).f_globals[<span class="string">'__name__'</span>]</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Point = named_tuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span><br><span class="line">print(Point)</span><br><span class="line"><span class="comment"># =&gt; &lt;class '__main__.Point'&gt;</span></span><br><span class="line">p = Point(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(p.x)</span><br><span class="line"><span class="comment"># =&gt; 4</span></span><br><span class="line">print(p.y)</span><br><span class="line"><span class="comment"># =&gt; 5</span></span><br><span class="line">p.x = <span class="number">2</span></span><br><span class="line"><span class="comment"># =&gt; AttributeError: can't set attribute</span></span><br></pre></td></tr></table></figure></p><h4 id="在定义时初始化类成员"><a href="#在定义时初始化类成员" class="headerlink" title="在定义时初始化类成员"></a>在定义时初始化类成员</h4><p>在类定义时完成初始化或其他设置动作，是元类的经典用法（元类在类定义时触发）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StructTupleMeta</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">for</span> n, name <span class="keyword">in</span> enumerate(cls._fields):</span><br><span class="line">            setattr(cls, name, property(operator.itemgetter(n)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StructTuple</span><span class="params">(tuple, metaclass=StructTupleMeta)</span>:</span></span><br><span class="line">    _fields = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(args) != len(cls._fields):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'&#123;&#125; arguments required'</span>.format(len(cls._fields)))</span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock</span><span class="params">(StructTuple)</span>:</span></span><br><span class="line">    _fields = [<span class="string">'name'</span>, <span class="string">'shares'</span>, <span class="string">'price'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(StructTuple)</span>:</span></span><br><span class="line">    _fields = [<span class="string">'x'</span>, <span class="string">'y'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Stock(<span class="string">'ACME'</span>, <span class="number">50</span>, <span class="number">91.1</span>)</span><br><span class="line">print(s)</span><br><span class="line"><span class="comment"># =&gt; ('ACME', 50, 91.1)</span></span><br><span class="line">print(s[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># =&gt; ACME</span></span><br><span class="line">print(s.name)</span><br><span class="line"><span class="comment"># =&gt; ACME</span></span><br><span class="line">s.shares = <span class="number">23</span></span><br><span class="line"><span class="comment"># =&gt; AttributeError: can't set attribute</span></span><br></pre></td></tr></table></figure></p><p>在上面的代码中，<code>StructTupleMeta</code> 元类从 <code>_fields</code> 类属性中读取属性名列表并将其转换成属性方法。<code>operator.itemgetter()</code> 函数负责创建访问方法（accessor function），<code>property()</code> 函数负责将它们转换成属性（property）。</p><p><code>StructTuple</code> 类用作供其他类继承的基类。其中的 <code>__new__()</code> 方法负责创建新的实例对象。不同于 <code>__init__()</code>，<code>__new__()</code> 方法会在实例创建之前触发，由于 tuple 是不可变对象，创建之后即无法被修改，因此这里使用 <code>__new__()</code>。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.oreilly.com/library/view/python-cookbook-3rd/9781449357337/" target="_blank" rel="noopener">Python Cookbook, 3rd Edition</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、函数装饰器&quot;&gt;&lt;a href=&quot;#一、函数装饰器&quot; class=&quot;headerlink&quot; title=&quot;一、函数装饰器&quot;&gt;&lt;/a&gt;一、函数装饰器&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Class" scheme="https://rollingstarky.github.io/tags/Class/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="MetaProgramming" scheme="https://rollingstarky.github.io/tags/MetaProgramming/"/>
    
  </entry>
  
  <entry>
    <title>Fluent Python 笔记 —— 装饰器和闭包</title>
    <link href="https://rollingstarky.github.io/2020/11/19/fluent-python-decorator-and-closure/"/>
    <id>https://rollingstarky.github.io/2020/11/19/fluent-python-decorator-and-closure/</id>
    <published>2020-11-18T16:00:00.000Z</published>
    <updated>2020-11-19T14:10:32.687Z</updated>
    
    <content type="html"><![CDATA[<h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p>函数装饰器用于在源码中“标记”函数，以某种方式增强函数的行为。它是一种以另一个函数（被装饰的函数）为参数的可调用对象，可能会处理被装饰的函数并将其返回，或者将其替换为另一个函数。</p><p><strong>装饰器严格来说只是语法糖</strong>。假如有个名为 decorate 的装饰器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running target()'</span>)</span><br></pre></td></tr></table></figure></p><p>上述代码效果等同于如下写法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running target()'</span>)</span><br><span class="line"></span><br><span class="line">target = decorate(target)</span><br></pre></td></tr></table></figure></p><p>即原来的 target 函数会被替换为 <code>decorate(target)</code> 返回的函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>            print(<span class="string">'running inner()'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> inner</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@deco</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">target</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'running target()'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>target()</span><br><span class="line">running inner()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>target</span><br><span class="line">&lt;function deco.&lt;locals&gt;.inner at <span class="number">0x7ff01bad9a60</span>&gt;</span><br></pre></td></tr></table></figure></p><p>如上述代码，deco 返回 inner 函数对象，使用 deco 装饰 target，调用被装饰的 target 实际会运行 inner。target 对象变为 inner 的引用。</p><p>装饰器有如下两大特性：</p><ul><li>能把被装饰的函数替换成其他函数</li><li>装饰器在加载模块时立即执行</li></ul><h4 id="装饰器何时执行"><a href="#装饰器何时执行" class="headerlink" title="装饰器何时执行"></a>装饰器何时执行</h4><p>装饰器会在被装饰的函数定义之后立即运行，这通常是在 Python 加载模块时。</p><p>参考如下 registration.py 模块：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">registry = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">f'running register(<span class="subst">&#123;func&#125;</span>)'</span>)</span><br><span class="line">    registry.append(func)</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f1()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f2()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f3()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running main()'</span>)</span><br><span class="line">    print(<span class="string">'registry -&gt;'</span>, registry)</span><br><span class="line">    f1()</span><br><span class="line">    f2()</span><br><span class="line">    f3()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>运行后输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">running register(&lt;function f1 at 0x7fbc852d43a0&gt;)</span><br><span class="line">running register(&lt;function f2 at 0x7fbc852d4430&gt;)</span><br><span class="line">running main()</span><br><span class="line">registry -&gt; [&lt;function f1 at 0x7fbc852d43a0&gt;, &lt;function f2 at 0x7fbc852d4430&gt;]</span><br><span class="line">running f1()</span><br><span class="line">running f2()</span><br><span class="line">running f3()</span><br></pre></td></tr></table></figure></p><p>Python 加载模块后，装饰器 register 会在其他函数之前运行，将被装饰的函数（f1 和 f2）的引用添加到 registry 列表中。原本的函数 f1 和 f2，以及未被装饰的 f3，则只在 main 明确调用它们时才执行。</p><p>如果导入 registration.py 模块（不作为脚本运行），输出如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> registration</span><br><span class="line">running register(&lt;function f1 at <span class="number">0x7f8fbd8c3b80</span>&gt;)</span><br><span class="line">running register(&lt;function f2 at <span class="number">0x7f8fbd8c3c10</span>&gt;)</span><br></pre></td></tr></table></figure></p><p><strong>函数装饰器在导入模块时立即执行，而被装饰的函数只在明确调用时执行。突出了导入时和运行时之间的区别。</strong></p><h4 id="变量作用域规则"><a href="#变量作用域规则" class="headerlink" title="变量作用域规则"></a>变量作用域规则</h4><p>测试如下函数，它读取两个变量的值，一个是局部变量 a，是函数的参数；另一个是未被定义的变量 b：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line"><span class="meta">... </span>    print(b)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> f1</span><br><span class="line">NameError: name <span class="string">'b'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><p>运行时变量 a 的值正常输出，接着报出 name ‘b’ is not defined。</p><p>若先给全局变量 b 赋值，再调用 f1 函数，就不会报错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></p><p>但如下代码的结果可能会让人意想不到：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line"><span class="meta">... </span>    print(b)</span><br><span class="line"><span class="meta">... </span>    b = <span class="number">9</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> f2</span><br><span class="line">UnboundLocalError: local variable <span class="string">'b'</span> referenced before assignment</span><br></pre></td></tr></table></figure></p><p>代码运行后首先输出了 3（<code>print(a)</code>），但是第二个语句 <code>print(b)</code> 执行报错。按照直觉第二个 print 语句应该输出 6，因为全局变量 b 已经在函数执行之前赋值，局部变量 b 的赋值动作也是在 print 语句后面。</p><p>事实上是，Python 在编译函数定义体时，会判断 b 是局部变量，Python 会尝试从本地环境获取 b。调用 <code>f2(3)</code> 时，f2 的定义体尝试获取局部变量 b 的值，发现 b 没有绑定后报错。</p><p>如果在函数内部赋值时想让解释器把 b 当成全局变量，需要使用 global 声明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">global</span> b</span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line"><span class="meta">... </span>    print(b)</span><br><span class="line"><span class="meta">... </span>    b = <span class="number">9</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure></p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>闭包指延伸了作用域的函数，其中包含函数定义体中引用、不在定义体中定义的非全局变量。</p><p>计算移动平均值（不断增加的系列值的均值）的类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># average_oo.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Averager</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.series = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, new_value)</span>:</span></span><br><span class="line">        self.series.append(new_value)</span><br><span class="line">        total = sum(self.series)</span><br><span class="line">        <span class="keyword">return</span> total/len(self.series)</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> average_oo <span class="keyword">import</span> Averager</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = Averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">11</span>)</span><br><span class="line"><span class="number">10.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">12</span>)</span><br><span class="line"><span class="number">11.0</span></span><br></pre></td></tr></table></figure></p><p>以下代码是同样功能的函数式实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line">    series = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        series.append(new_value)</span><br><span class="line">        total = sum(series)</span><br><span class="line">        <span class="keyword">return</span> total / len(series)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> averager</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> average <span class="keyword">import</span> make_averager</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">11</span>)</span><br><span class="line"><span class="number">10.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">12</span>)</span><br><span class="line"><span class="number">11.0</span></span><br></pre></td></tr></table></figure><p>第一个例子中，Averager 类的实例 avg 存储历史值的位置很明显：通过 <code>self.series</code> 实例属性。<br>第二个例子中，<code>series</code> 是 <code>make_averager</code> 函数的局部变量，但调用 <code>avg(10)</code> 时，make_averager 函数已经返回，它的本地作用域也就不存在了。</p><p>在 averager 函数中，series 是自由变量（free variable），指未在本地作用域中绑定的变量。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-0748d2077cbe5c12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="closure"></p><p> 闭包是一种函数，它会保留定义函数时存在的自由变量的绑定。这样在调用函数时，即便定义作用域不可用了，通过闭包仍能使用那些绑定。</p><h5 id="nolocal"><a href="#nolocal" class="headerlink" title="nolocal"></a>nolocal</h5><p>前面实现 <code>make_averager</code> 函数的方式效率并不高，把所有值存储在历史列表中，在每次调用 <code>averager</code> 时使用 sum 求和。更好的实现方式是，只存储目前的总和以及元素个数，只使用这两个值计算均值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># average2.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        total += new_value</span><br><span class="line">        <span class="keyword">return</span> total / count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> averager</span><br></pre></td></tr></table></figure></p><p>上述代码运行后会报出如下错误：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> average2 <span class="keyword">import</span> make_averager</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/home/starky/program/python/algorithm/average2.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> averager</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">UnboundLocalError: local variable <span class="string">'count'</span> referenced before assignment</span><br></pre></td></tr></table></figure></p><p>原因在于，当 <code>count</code> 是数字或其他任何不可变类型时，<code>count += 1</code> 的作用等同于 <code>count = count + 1</code>。导致在 <code>averager</code> 的定义体中为 <code>count</code> 赋值了，将 <code>count</code> 变成了局部变量。<code>total</code> 变量也是如此。<br>之前的 <code>series</code> 变量没有出现此问题，原因是只调用了 <code>series.append</code>，列表作为可变对象，并不存在重新赋值的情况。</p><p>Python 3 中引入了 <code>nolocal</code> 声明，其作用是把变量标记为自由变量。为 <code>nolocal</code> 声明的变量赋予新值后，闭包中保存的绑定也会更新。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> count, total</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        total += new_value</span><br><span class="line">        <span class="keyword">return</span> total / count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> averager</span><br></pre></td></tr></table></figure></p><h4 id="实现一个简单的装饰器"><a href="#实现一个简单的装饰器" class="headerlink" title="实现一个简单的装饰器"></a>实现一个简单的装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clocked</span><span class="params">(*args)</span>:</span></span><br><span class="line">        t0 = time.perf_counter()</span><br><span class="line">        result = func(*args)</span><br><span class="line">        elapsed = time.perf_counter() - t0</span><br><span class="line">        name = func.__name__</span><br><span class="line">        arg_str = <span class="string">', '</span>.join(repr(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args)</span><br><span class="line">        print(<span class="string">'[%0.8fs] %s(%s) -&gt; %r'</span> % (elapsed, name, arg_str, result))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> clocked</span><br><span class="line"></span><br><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snooze</span><span class="params">(seconds)</span>:</span></span><br><span class="line">    time.sleep(seconds)</span><br><span class="line"></span><br><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'*'</span> * <span class="number">40</span>, <span class="string">'Calling snooze(.123)'</span>)</span><br><span class="line">    snooze(<span class="number">.123</span>)</span><br><span class="line">    print(<span class="string">'*'</span> * <span class="number">40</span>, <span class="string">'Calling factorial(6)'</span>)</span><br><span class="line">    print(<span class="string">'6! ='</span>, factorial(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">**************************************** Calling snooze(<span class="number">.123</span>)</span><br><span class="line">[0.12318703s] snooze(0.123) -&gt; None</span><br><span class="line">**************************************** Calling factorial(<span class="number">6</span>)</span><br><span class="line">[0.00000168s] factorial(1) -&gt; 1</span><br><span class="line">[0.00003647s] factorial(2) -&gt; 2</span><br><span class="line">[0.00006038s] factorial(3) -&gt; 6</span><br><span class="line">[0.00008216s] factorial(4) -&gt; 24</span><br><span class="line">[0.00010411s] factorial(5) -&gt; 120</span><br><span class="line">[0.00012920s] factorial(6) -&gt; 720</span><br><span class="line"><span class="number">6</span>! = <span class="number">720</span></span><br></pre></td></tr></table></figure></p><p>在上述代码中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> n * factorial(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>等同于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line">factorial = clock(factorial)</span><br></pre></td></tr></table></figure></p><p>factorial 会作为 func 参数传递给 clock，返回 clocked 函数。Python 解释器在背后会把 clocked 赋值给 factorial。此后，每次调用 <code>factorial(n)</code>，实际执行的都是 <code>clocked(n)</code>。总体步骤如下：</p><ul><li>记录初始时间 t0</li><li>调用原来的 factorial 函数，保存结果</li><li>计算执行的时间</li><li>格式化收集到的数据</li><li>返回第二步保存的结果</li></ul><p>以上即装饰器的典型行为：将被装饰的函数替换为新函数，二者接收同样的参数，（通常）返回被装饰函数本该返回的值，并做些额外的操作。</p><h4 id="参数化装饰器"><a href="#参数化装饰器" class="headerlink" title="参数化装饰器"></a>参数化装饰器</h4><p><strong>参数化的注册装饰器</strong></p><p>为了便于启用或禁用 register 的函数注册功能，可以为其提供一个可选的 active 参数，设为 False 时，不注册被装饰的函数。<br>从概念上讲，这个新的 register 函数不是装饰器，而是装饰器工厂函数，用来返回真正的装饰器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># registration_param.py</span></span><br><span class="line">registry = set()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(active=True)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line">        print(<span class="string">'running register(active=%s)-&gt;decorate(%s)'</span></span><br><span class="line">              % (active, func))</span><br><span class="line">        <span class="keyword">if</span> active:</span><br><span class="line">            registry.add(func)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            registry.discard(func)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"><span class="meta">@register(active=False)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f1()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f2()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f3()'</span>)</span><br></pre></td></tr></table></figure></p><p>运行效果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> registration_param</span><br><span class="line">running register(active=False)-&gt;decorate(&lt;function f1 at 0x7fa801b1bc10&gt;)</span><br><span class="line">running register(active=True)-&gt;decorate(&lt;function f2 at 0x7fa801b1bca0&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>registration_param.registry</span><br><span class="line">&#123;&lt;function f2 at <span class="number">0x7fa801b1bca0</span>&gt;&#125;</span><br></pre></td></tr></table></figure></p><p>decorate 是装饰器，必须返回一个函数。register 是装饰器工厂函数，返回 decorate。<br>只有 active 参数的值为 True 时才注册 func；若 active 不为真，且 func 在 registry 中，则将 func 移除。<br>@register 工厂函数必须作为函数调用，传入所需参数（或 <code>@register()</code>）。</p><p>若不使用 @ 句法，也可以像常规函数那样使用 register：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> registration_param <span class="keyword">import</span> *</span><br><span class="line">running register(active=False)-&gt;decorate(&lt;function f1 at 0x7fc32e6d0b80&gt;)</span><br><span class="line">running register(active=True)-&gt;decorate(&lt;function f2 at 0x7fc32e6d0c10&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>registry</span><br><span class="line">&#123;&lt;function f2 at <span class="number">0x7fc32e6d0c10</span>&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register()(f3)</span><br><span class="line">running register(active=True)-&gt;decorate(&lt;function f3 at 0x7fc32e6d0af0&gt;)</span><br><span class="line">&lt;function f3 at <span class="number">0x7fc32e6d0af0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>registry</span><br><span class="line">&#123;&lt;function f2 at <span class="number">0x7fc32e6d0c10</span>&gt;, &lt;function f3 at <span class="number">0x7fc32e6d0af0</span>&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(active=<span class="keyword">False</span>)(f2)</span><br><span class="line">running register(active=False)-&gt;decorate(&lt;function f2 at 0x7fc32e6d0c10&gt;)</span><br><span class="line">&lt;function f2 at <span class="number">0x7fc32e6d0c10</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>registry</span><br><span class="line">&#123;&lt;function f3 at <span class="number">0x7fc32e6d0af0</span>&gt;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>参数化的 clock 装饰器</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clock_param.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">DEFAULT_FMT = <span class="string">'[&#123;elapsed:0.8f&#125;s] &#123;name&#125;(&#123;args&#125;) -&gt; &#123;result&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock</span><span class="params">(fmt=DEFAULT_FMT)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">clocked</span><span class="params">(*_args)</span>:</span></span><br><span class="line">            t0 = time.time()</span><br><span class="line">            _result = func(*_args)</span><br><span class="line">            elapsed = time.time() - t0</span><br><span class="line">            name = func.__name__</span><br><span class="line">            args = <span class="string">', '</span>.join(repr(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> _args)</span><br><span class="line">            result = repr(_result)</span><br><span class="line">            print(fmt.format(**locals()))</span><br><span class="line">            <span class="keyword">return</span> _result</span><br><span class="line">        <span class="keyword">return</span> clocked</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="meta">    @clock()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">snooze</span><span class="params">(seconds)</span>:</span></span><br><span class="line">        time.sleep(seconds)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        snooze(<span class="number">.123</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; [0.12320948s] snooze(0.123) -&gt; None</span></span><br><span class="line"><span class="comment"># =&gt; [0.12319684s] snooze(0.123) -&gt; None</span></span><br><span class="line"><span class="comment"># =&gt; [0.12318802s] snooze(0.123) -&gt; None</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clock_param2.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> clock_param <span class="keyword">import</span> clock</span><br><span class="line"></span><br><span class="line"><span class="meta">@clock('&#123;name&#125;(&#123;args&#125;) dt=&#123;elapsed:0.3f&#125;s')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snooze</span><span class="params">(seconds)</span>:</span></span><br><span class="line">    time.sleep(seconds)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    snooze(<span class="number">.123</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; snooze(0.123) dt=0.123s</span></span><br><span class="line"><span class="comment"># =&gt; snooze(0.123) dt=0.123s</span></span><br><span class="line"><span class="comment"># =&gt; snooze(0.123) dt=0.123s</span></span><br></pre></td></tr></table></figure><h4 id="标准库中的装饰器——单分派泛函数"><a href="#标准库中的装饰器——单分派泛函数" class="headerlink" title="标准库中的装饰器——单分派泛函数"></a>标准库中的装饰器——单分派泛函数</h4><p>假设需要开发一个调试 Web 应用的工具，能够生成 HTML 来显示不同类型的 Python 对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">htmlize</span><span class="params">(obj)</span>:</span></span><br><span class="line">    content = html.escape(repr(obj))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;pre&gt;&#123;&#125;&lt;/pre&gt;'</span>.format(content)</span><br></pre></td></tr></table></figure></p><p>上述函数适用于任何 Python 类型。但如果想做进一步扩展，使其能够用不同的方式显示不同的类型：</p><ul><li>str：把内部换行符替换为 ‘\<br>\n’，使用 <p> 进行格式化</p></li><li>int：以十进制和十六进制显示数字</li><li>list：输出 HTML 列表，根据各个元素的类型进行格式化</li></ul><p>Python 不支持重载方法或函数，因此不能使用不同的签名定义 htmlize 的变体，也无法使用不同的方式处理不同的数据类型。<br>一种常见的做法是将 htmlize 变成一个分派函数，使用一系列 if/elif/elif 调用专门的函数，如 htmlize_str、htmlize_int 等。但这样不便于模块的扩展，且显得笨拙。分派函数 htmlize 会随着时间推移变得很大，与各个专门函数之间的耦合也很紧密。</p><p>Python 中的 <code>functools.singledispatch</code> 装饰器可以把整体方案拆分为等多个模块，甚至可以为无法修改的类提供专门函数。使用 <code>@singledispatch</code> 装饰的普通函数会变成泛函数（generic function），根据第一个参数的类型以不同方式执行相同操作的一组函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># htmlize.py</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> singledispatch</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> abc</span><br><span class="line"><span class="keyword">import</span> numbers</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line"><span class="meta">@singledispatch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">htmlize</span><span class="params">(obj)</span>:</span></span><br><span class="line">    content = html.escape(repr(obj))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;pre&gt;&#123;&#125;&lt;/pre&gt;'</span>.format(content)</span><br><span class="line"></span><br><span class="line"><span class="meta">@htmlize.register(str)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(text)</span>:</span></span><br><span class="line">    content = html.escape(text).replace(<span class="string">'\n'</span>, <span class="string">'&lt;br&gt;\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;p&gt;&#123;0&#125;&lt;/p&gt;'</span>.format(content)</span><br><span class="line"></span><br><span class="line"><span class="meta">@htmlize.register(numbers.Integral)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;pre&gt;&#123;0&#125; (0x&#123;0:x&#125;)&lt;/pre&gt;'</span>.format(n)</span><br><span class="line"></span><br><span class="line"><span class="meta">@htmlize.register(tuple)</span></span><br><span class="line"><span class="meta">@htmlize.register(abc.MutableSequence)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(seq)</span>:</span></span><br><span class="line">    inner = <span class="string">'&lt;/li&gt;\n&lt;li&gt;'</span>.join(htmlize(item) <span class="keyword">for</span> item <span class="keyword">in</span> seq)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;ul&gt;\n&lt;li&gt;'</span> + inner + <span class="string">'&lt;/li&gt;\n&lt;/ul&gt;'</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> htmlize <span class="keyword">import</span> htmlize</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>htmlize(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br><span class="line"><span class="string">'&lt;pre&gt;&#123;1, 2, 3&#125;&lt;/pre&gt;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>htmlize(abs)</span><br><span class="line"><span class="string">'&lt;pre&gt;&amp;lt;built-in function abs&amp;gt;&lt;/pre&gt;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>htmlize(<span class="string">'Heimlich &amp; Co.\n- a game'</span>)</span><br><span class="line"><span class="string">'&lt;p&gt;Heimlich &amp;amp; Co.&lt;br&gt;\n- a game&lt;/p&gt;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>htmlize(<span class="number">42</span>)</span><br><span class="line"><span class="string">'&lt;pre&gt;42 (0x2a)&lt;/pre&gt;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(htmlize([<span class="string">'alpha'</span>, <span class="number">66</span>, &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;]))</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;p&gt;alpha&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;pre&gt;66 (0x42)&lt;/pre&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;pre&gt;&#123;1, 2, 3&#125;&lt;/pre&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>@singledispatch 标记处理 object 类型的基函数。各个专门函数使用 <code>@&lt;base_function&gt;.register(&lt;type&gt;)</code> 装饰。<br>为每个需要特殊处理的类型注册一个函数，<code>numbers.Integral</code> 是 int 的抽象基类。只要可能，注册的专门函数应该尽量处理抽象基类（如 <code>numbers.Integral</code> 和 <code>abc.MutableSequence</code>），不要处理具体实现（如 <code>int</code> 和 <code>list</code>）。这样代码支持的兼容类型会更广泛（支持抽象基类现有的和未来的具体子类），比如用户可能通过子类化 numbers.Integral 实现固定位数的 int 类型。<br>可以叠放多个 register 装饰器，让同一个函数支持不同类型。</p><p>@singledispatch 可以在系统的任何地方和任何模块中注册专门函数，还可以为不是自己编写的或者不能修改的类添加自定义函数。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://shop.oreilly.com/product/0636920032519.do" target="_blank" rel="noopener">Fluent Python</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h4&gt;&lt;p&gt;函数装饰器用于在源码中“标记”函数，以某种方式增强函数的行为。它是一种以另一个函数（被装饰的函数）为参数的可调用对象，可能会处理被装
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Function" scheme="https://rollingstarky.github.io/tags/Function/"/>
    
      <category term="Closure" scheme="https://rollingstarky.github.io/tags/Closure/"/>
    
      <category term="Decorator" scheme="https://rollingstarky.github.io/tags/Decorator/"/>
    
  </entry>
  
  <entry>
    <title>Fluent Python 笔记 —— 使用一等函数实现设计模式</title>
    <link href="https://rollingstarky.github.io/2020/11/08/fluent-python-first-class-function-and-design-patterns/"/>
    <id>https://rollingstarky.github.io/2020/11/08/fluent-python-first-class-function-and-design-patterns/</id>
    <published>2020-11-07T16:00:00.000Z</published>
    <updated>2020-11-08T13:49:51.655Z</updated>
    
    <content type="html"><![CDATA[<h4 id="经典的策略模式"><a href="#经典的策略模式" class="headerlink" title="经典的策略模式"></a>经典的策略模式</h4><blockquote><p>“策略模式”：定义一系列算法，把它们一一封装，并且使它们之间可以相互替换。本模式使得算法可以独立于使用它的对象而变化</p></blockquote><p>电商领域有个明显的功能可以使用“策略”模式，即根据客户的属性或订单中的商品计算折扣。<br>假如有如下折扣规则：</p><ul><li>有 1000 或以上积分的顾客，每个订单享 5% 折扣</li><li>同一订单中，单个商品数量达到 20 个或以上，享 10% 折扣</li><li>订单中的不同商品达到 10 个或以上，享 7% 折扣</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/6875152-f010bbd69f2ef5d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML图"></p><p>如上述 UML 图，上下文提供服务，会把一些计算委托给实现不同算法的可互换组件。本例中是订单 Order，会根据不同算法计算促销折扣；<br>策略指实现不同算法的组件共用的接口。本例中是名为 Promotion 的抽象类；<br>具体策略即“策略”的具体子类，FidelityPromo、BulkPromo 和 LargeOrderPromo 是这里实现的三个具体策略。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Customer = namedtuple(<span class="string">'Customer'</span>, <span class="string">'name fidelity'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, product, quantity, price)</span>:</span></span><br><span class="line">        self.product = product</span><br><span class="line">        self.quantity = quantity</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price * self.quantity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span>  <span class="comment"># 上下文</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, customer, cart, promotion=None)</span>:</span></span><br><span class="line">        self.customer = customer</span><br><span class="line">        self.cart = list(cart)</span><br><span class="line">        self.promotion = promotion</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'__total'</span>):</span><br><span class="line">            self.__total = sum(item.total() <span class="keyword">for</span> item <span class="keyword">in</span> self.cart)</span><br><span class="line">            <span class="keyword">return</span> self.__total</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">due</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.promotion <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            discount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            discount = self.promotion.discount(self)</span><br><span class="line">        <span class="keyword">return</span> self.total() - discount</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        fmt = <span class="string">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class="line">        <span class="keyword">return</span> fmt.format(self.total(), self.due())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promotion</span><span class="params">(ABC)</span>:</span>  <span class="comment"># 策略：抽象基类</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        <span class="string">"""返回折扣金额"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FidelityPromo</span><span class="params">(Promotion)</span>:</span></span><br><span class="line">    <span class="string">"""为积分为1000或以上的顾客提供5%折扣"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> order.total() * <span class="number">.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;= <span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BulkItemPromo</span><span class="params">(Promotion)</span>:</span></span><br><span class="line">    <span class="string">"""单个商品为20个或以上时提供10%折扣"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        discount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</span><br><span class="line">            <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</span><br><span class="line">                discount += item.total() * <span class="number">.1</span></span><br><span class="line">        <span class="keyword">return</span> discount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LargeOrderPromo</span><span class="params">(Promotion)</span>:</span></span><br><span class="line">    <span class="string">"""订单中的不同商品达到10个或以上时提供7%折扣"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        distinct_items = &#123;item.product <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</span><br><span class="line">        <span class="keyword">if</span> len(distinct_items) &gt;= <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> order.total() * <span class="number">.07</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>执行效果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> order <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>joe = Customer(<span class="string">'John Doe'</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ann = Customer(<span class="string">'Ann Smith'</span>, <span class="number">1100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cart = [LineItem(<span class="string">'banana'</span>, <span class="number">4</span>, <span class="number">.5</span>), LineItem(<span class="string">'apple'</span>, <span class="number">10</span>, <span class="number">1.5</span>), LineItem(<span class="string">'watermellon'</span>, <span class="number">5</span>, <span class="number">5.0</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(joe, cart, FidelityPromo())</span><br><span class="line">&lt;Order total: <span class="number">42.00</span> due: <span class="number">42.00</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(ann, cart, FidelityPromo())</span><br><span class="line">&lt;Order total: <span class="number">42.00</span> due: <span class="number">39.90</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>banana_cart = [LineItem(<span class="string">'banana'</span>, <span class="number">30</span>, <span class="number">.5</span>), LineItem(<span class="string">'apple'</span>, <span class="number">10</span>, <span class="number">1.5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(joe, banana_cart, BulkItemPromo())</span><br><span class="line">&lt;Order total: <span class="number">30.00</span> due: <span class="number">28.50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>long_order = [LineItem(str(item_code), <span class="number">1</span>, <span class="number">1.0</span>) <span class="keyword">for</span> item_code <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(joe, long_order, LargeOrderPromo())</span><br><span class="line">&lt;Order total: <span class="number">10.00</span> due: <span class="number">9.30</span>&gt;</span><br></pre></td></tr></table></figure></p><h4 id="使用函数实现策略模式"><a href="#使用函数实现策略模式" class="headerlink" title="使用函数实现策略模式"></a>使用函数实现策略模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Customer = namedtuple(<span class="string">'Customer'</span>, <span class="string">'name fidelity'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, product, quantity, price)</span>:</span></span><br><span class="line">        self.product = product</span><br><span class="line">        self.quantity = quantity</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price * self.quantity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, customer, cart, promotion=None)</span>:</span></span><br><span class="line">        self.customer = customer</span><br><span class="line">        self.cart = list(cart)</span><br><span class="line">        self.promotion = promotion</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'__total'</span>):</span><br><span class="line">            self.__total = sum(item.total() <span class="keyword">for</span> item <span class="keyword">in</span> self.cart)</span><br><span class="line">        <span class="keyword">return</span> self.__total</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">due</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.promotion <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            discount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            discount = self.promotion(self)</span><br><span class="line">        <span class="keyword">return</span> self.total() - discount</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        fmt = <span class="string">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class="line">        <span class="keyword">return</span> fmt.format(self.total(), self.due())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fidelity_promo</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> order.total() * <span class="number">.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;= <span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulk_item_promo</span><span class="params">(order)</span>:</span></span><br><span class="line">    discount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</span><br><span class="line">        <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</span><br><span class="line">            discount += item.total() * <span class="number">.1</span></span><br><span class="line">    <span class="keyword">return</span> discount</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">large_order_promo</span><span class="params">(order)</span>:</span></span><br><span class="line">    distince_items = &#123;item.product <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</span><br><span class="line">    <span class="keyword">if</span> len(distince_items) &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> order.total() * <span class="number">.07</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>计算折扣只需调用 <code>self.promotion()</code> 函数，无需涉及到抽象类。各个策略都是由函数实现的。<br>为了把折扣策略应用到 Order 实例上，只需把促销函数作为参数传入。</p><p>执行效果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> order_fun <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>joe = Customer(<span class="string">'John Doe'</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ann = Customer(<span class="string">'Ann Smith'</span>, <span class="number">1100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cart = [LineItem(<span class="string">'banana'</span>, <span class="number">4</span>, <span class="number">.5</span>), LineItem(<span class="string">'apple'</span>, <span class="number">10</span>, <span class="number">1.5</span>), LineItem(<span class="string">'watermellon'</span>, <span class="number">5</span>, <span class="number">5.0</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(joe, cart, fidelity_promo)</span><br><span class="line">&lt;Order total: <span class="number">42.00</span> due: <span class="number">42.00</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(ann, cart, fidelity_promo)</span><br><span class="line">&lt;Order total: <span class="number">42.00</span> due: <span class="number">39.90</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>banana_cart = [LineItem(<span class="string">'banana'</span>, <span class="number">30</span>, <span class="number">.5</span>), LineItem(<span class="string">'apple'</span>, <span class="number">10</span>, <span class="number">1.5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(joe, banana_cart, bulk_item_promo)</span><br><span class="line">&lt;Order total: <span class="number">30.00</span> due: <span class="number">28.50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>long_order = [LineItem(str(item_code), <span class="number">1</span>, <span class="number">1.0</span>) <span class="keyword">for</span> item_code <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Order(joe, long_order, large_order_promo)</span><br><span class="line">&lt;Order total: <span class="number">10.00</span> due: <span class="number">9.30</span>&gt;</span><br></pre></td></tr></table></figure></p><p>具体策略一般没有内部状态，只是处理上下文中的数据。因此一定要使用普通的函数，而无需编写只有一个方法的类，再去实现另一个类声明的单函数接口。函数比用户自定义类的实例更为轻量，各个策略函数在 Python 编译模块时只会创建一次。即普通的函数是可共享的对象，可以同时在多个上下文中使用。</p><h4 id="选择最佳策略"><a href="#选择最佳策略" class="headerlink" title="选择最佳策略"></a>选择最佳策略</h4><p>在上述代码的基础上，添加 <code>best_promo</code> 函数计算所有折扣，并返回额度最大的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promos = [fidelity_promo, bulk_item_promo, large_order_promo]</span><br><span class="line"></span><br><span class="line">def best_promo(order):</span><br><span class="line">    return max(promo(order) for promo in promos)</span><br></pre></td></tr></table></figure></p><p>与其他几个 *_promo 函数一样，<code>best_promo</code> 函数的参数是一个 Order 实例。使用生成器表达式把 order 传给 promos 列表中的各个函数，返回折扣额度最大的促销策略。<br>虽然上述代码可用且易于阅读，但若想添加新的促销策略，除了定义新的折扣函数以外，还应注意记得把新定义的函数添加到 promos 列表中。</p><p>可以使用内置的 <code>globals()</code> 函数找出模块中的全部策略。<code>globals()</code> 函数会返回一个字典，包含针对当前模块的全局符号表（对函数或方法来说，“当前模块”指的是定义它们的模块，而不是调用它们的模块）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">promos = [globals()[name] <span class="keyword">for</span> name <span class="keyword">in</span> globals()</span><br><span class="line">          <span class="keyword">if</span> name.endswith(<span class="string">'_promo'</span>)</span><br><span class="line">          <span class="keyword">and</span> name != <span class="string">'best_promo'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)</span><br></pre></td></tr></table></figure></p><p>动态收集促销折扣函数更为显式的一种方案是使用简单的装饰器。参考下一章节。</p><h4 id="使用装饰器改进策略模式"><a href="#使用装饰器改进策略模式" class="headerlink" title="使用装饰器改进策略模式"></a>使用装饰器改进策略模式</h4><p>使用注册装饰器可以改进前面的电商促销折扣示例。<br>之前的主要问题是，定义体中有函数名称，但 <code>best_promo</code> 用来判断哪个折扣幅度最大的 promos 列表中也有函数名称。这种重复导致新增折扣函数后可能会忘记把它添加到 promos 列表中，导致 <code>best_promos</code> 忽略新策略且不报错，为系统引入了不易察觉的缺陷。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">promos = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">promotion</span><span class="params">(promo_func)</span>:</span></span><br><span class="line">    promos.append(promo_func)</span><br><span class="line">    <span class="keyword">return</span> promo_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@promotion</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fidelity</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> order.total() * <span class="number">.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;= <span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@promotion</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulk_item</span><span class="params">(order)</span>:</span></span><br><span class="line">    discount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</span><br><span class="line">        <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</span><br><span class="line">            discount += item.total() * <span class="number">.1</span></span><br><span class="line">    <span class="keyword">return</span> discount</span><br><span class="line"></span><br><span class="line"><span class="meta">@promotion</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">large_order</span><span class="params">(order)</span>:</span></span><br><span class="line">    discount_items = &#123;item.product <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</span><br><span class="line">    <span class="keyword">if</span> len(discount_items) &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> order.total() * <span class="number">.07</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)</span><br></pre></td></tr></table></figure><p>promos 列表起初是空的，promotion 把 promo_func 添加到 promos 列表中，然后原封不动地将其返回。即被 @promotion 装饰的函数都会<strong>提前</strong>添加到 promos 列表中（装饰器在被装饰的函数定义之后（通常是在导入时）立即运行）。</p><p>相比于之前的方案，此方案有以下几个优点：</p><ul><li>促销函数无需使用特殊的名称（即不用以 _promo 结尾）</li><li>@promotion 装饰器突出了被装饰的函数的作用，还便于临时禁用某个促销策略：只需把装饰器注释掉</li><li>促销折扣策略可以在其他模块中定义，只要使用 @promotion 装饰即可</li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://shop.oreilly.com/product/0636920032519.do" target="_blank" rel="noopener">Fluent Python</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;经典的策略模式&quot;&gt;&lt;a href=&quot;#经典的策略模式&quot; class=&quot;headerlink&quot; title=&quot;经典的策略模式&quot;&gt;&lt;/a&gt;经典的策略模式&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;“策略模式”：定义一系列算法，把它们一一封装，并且使它们之间可以相互替换。
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Functional" scheme="https://rollingstarky.github.io/tags/Functional/"/>
    
      <category term="DesignPattern" scheme="https://rollingstarky.github.io/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>Fluent Python 笔记 —— 字典与集合</title>
    <link href="https://rollingstarky.github.io/2020/11/08/fluent-python-dicts-and-sets/"/>
    <id>https://rollingstarky.github.io/2020/11/08/fluent-python-dicts-and-sets/</id>
    <published>2020-11-07T16:00:00.000Z</published>
    <updated>2020-11-08T14:00:18.260Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、映射类型"><a href="#一、映射类型" class="headerlink" title="一、映射类型"></a>一、映射类型</h4><p>标准库里的所有映射类型都是利用 dict 实现的，它们有个共同的限制：其中的<strong>键必须是可散列的数据类型</strong>。<br>关于可散列的数据类型的定义：<br>若某对象是可散列的，则它的散列值在其整个生命周期中是保持不变的。该对象需要实现 <code>__hash__</code> 方法和 <code>__qe__</code> 方法（跟其他键做比较）。如果两个可散列对象是相等的，那么他们的散列值一定相等。</p><p>不可变数据类型中的 <code>str</code>、<code>bytes</code> 和数字都是可散列类型。<br>虽然元组本身是不可变序列，但元组中的元素有可能是其他可变类型的引用。只有当一个元组中包含的所有元素都是可散列类型的情况下，该元组才是可散列的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tt = (<span class="number">1</span>, <span class="number">2</span>, (<span class="number">30</span>, <span class="number">40</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hash(tt)</span><br><span class="line"><span class="number">-3907003130834322577</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tl = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hash(tl)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable type: <span class="string">'list'</span></span><br></pre></td></tr></table></figure></p><p>一般用户自定义类型的对象都是可散列的，因此这些对象在比较时都是不相等的。<br>若某个对象实现了 <code>__eq__</code> 方法，并且在方法中用到了该对象的内部状态，则只有当这些内部状态都是不可变类型的情况下，该对象才是可散列的。</p><h4 id="二、字典推导"><a href="#二、字典推导" class="headerlink" title="二、字典推导"></a>二、字典推导</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>DIAL_CODES = [</span><br><span class="line"><span class="meta">... </span>    (<span class="number">86</span>, <span class="string">'China'</span>),</span><br><span class="line"><span class="meta">... </span>    (<span class="number">91</span>, <span class="string">'India'</span>),</span><br><span class="line"><span class="meta">... </span>    (<span class="number">1</span>, <span class="string">'America'</span>),</span><br><span class="line"><span class="meta">... </span>    (<span class="number">55</span>, <span class="string">'Brazil'</span>),</span><br><span class="line"><span class="meta">... </span>    (<span class="number">7</span>, <span class="string">'Russia'</span>)</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>country_code = &#123;country: code <span class="keyword">for</span> code, country <span class="keyword">in</span> DIAL_CODES&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>country_code</span><br><span class="line">&#123;<span class="string">'China'</span>: <span class="number">86</span>, <span class="string">'India'</span>: <span class="number">91</span>, <span class="string">'America'</span>: <span class="number">1</span>, <span class="string">'Brazil'</span>: <span class="number">55</span>, <span class="string">'Russia'</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;code: country.upper() <span class="keyword">for</span> country, code <span class="keyword">in</span> country_code.items() <span class="keyword">if</span> code &lt; <span class="number">66</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">'AMERICA'</span>, <span class="number">55</span>: <span class="string">'BRAZIL'</span>, <span class="number">7</span>: <span class="string">'RUSSIA'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="三、setdefault-处理找不到的键"><a href="#三、setdefault-处理找不到的键" class="headerlink" title="三、setdefault 处理找不到的键"></a>三、setdefault 处理找不到的键</h4><p>以下代码的写法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_dict.setdefault(key, []).append(new_value)</span><br></pre></td></tr></table></figure></p><p>其效果等同于如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> my_dict:</span><br><span class="line">    my_dict[key] = []</span><br><span class="line">my_dict[key].append(new_value)</span><br></pre></td></tr></table></figure></p><p>都是获取 my_dict 中 key 键对应的值（如果该 key 不存在，则新增 key 并令其值为 <code>[]</code>），然后向 key 对应的值（列表）中添加新元素。<br>只不过后者至少要进行两次键查询（如果键不存在，则执行三次键查询），而使用 <code>setdefault</code> 只需要一次键查询就可以完成整个操作。<code>setdefault</code> 在获取 key 键对应的值时，如果该 key 不存在，则把 key 和空列表直接放进映射并返回空列表，因而不需要执行第二次键值查找。</p><h4 id="四、弹性键查询"><a href="#四、弹性键查询" class="headerlink" title="四、弹性键查询"></a>四、弹性键查询</h4><h5 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h5><p><code>collections.defaultdict</code> 可以做到即便某个键在映射里不存在，也能够在读取这个键的时候得到一个默认值。只需要用户在初始化 <code>defaultdict</code> 对象时，为其指定一个创建默认值的方法。<br>即在实例化 <code>defaultdict</code> 的时候，向构造方法提供一个可调用对象，该对象会在 <code>__getitem__</code> 碰到找不到的键的时候被调用，让 <code>__getitem__</code> 返回某种默认值。</p><p>如 <code>dd = defaultdict(list)</code>。若键 <code>new-key</code> 在 dd 中不存在，表达式 <code>dd[&#39;new-key&#39;]</code> 会执行以下操作：</p><ul><li>调用 <code>list()</code> 创建一个新列表</li><li>把新列表作为值，<code>new-key</code> 作为键存放到 dd 中</li><li>返回新列表的引用</li></ul><p>这个用来生成默认值得可调用对象（<code>list()</code>）存放在名为 <code>default_factory</code> 的实例属性里。若创建 defaultdict 的时候没有指定 default_factory，则查询不存在的键会触发 KeyError。<br>这些特性背后依赖的是 <code>__missing__</code> 特殊方法，这个特殊方法是所有映射类型都可以选择性地去支持的。</p><h5 id="missing"><a href="#missing" class="headerlink" title="missing"></a><strong>missing</strong></h5><p>所有的映射类型处理找不到的键的时候，都会涉及到 <code>__missing__</code> 方法。虽然基类 dict 并没有定义这个方法，但如果有一个类继承了 dict，该类提供 <code>__missing__</code> 方法，则 <code>__getitem__</code> 找不到键的时候，会自动调用 <code>__missing__</code> 而不会抛出 KeyError 异常。</p><p><code>__missing__</code> 方法只会被 <code>__getitem__</code> 调用（比如在表达式 <code>d[k]</code> 中）。提供 <code>__missing__</code> 方法对 <code>get</code> 或 <code>__contains__</code> 方法的使用没有影响。</p><p>如需要实现一种自定义的映射类型，在查询的时候将映射里的键都转换成 str。示例代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrKeyDict</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(key, str):</span><br><span class="line">            <span class="keyword">raise</span> KeyError(key)</span><br><span class="line">        <span class="keyword">return</span> self[str(key)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> self.keys() <span class="keyword">or</span> str(key) <span class="keyword">in</span> self.keys()</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> strkeydict <span class="keyword">import</span> StrKeyDict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = StrKeyDict([(<span class="string">'2'</span>, <span class="string">'two'</span>), (<span class="string">'4'</span>, <span class="string">'four'</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'2'</span>]</span><br><span class="line"><span class="string">'two'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">4</span>]</span><br><span class="line"><span class="string">'four'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">1</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/home/starky/program/python/algorithm/strkeydict.py"</span>, line <span class="number">5</span>, <span class="keyword">in</span> __missing__</span><br><span class="line">    <span class="keyword">return</span> self[str(key)]</span><br><span class="line">  File <span class="string">"/home/starky/program/python/algorithm/strkeydict.py"</span>, line <span class="number">4</span>, <span class="keyword">in</span> __missing__</span><br><span class="line">    <span class="keyword">raise</span> KeyError(key)</span><br><span class="line">KeyError: <span class="string">'1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'2'</span>)</span><br><span class="line"><span class="string">'two'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="number">4</span>)</span><br><span class="line"><span class="string">'four'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="number">1</span>, <span class="string">'N/A'</span>)</span><br><span class="line"><span class="string">'N/A'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>StrKeyDict 继承自 dict，如果找不到的键本身是字符串，抛出 KeyError 异常；如果找不到的键不是字符串，则将其转换成字符串后再进行查找。<br><code>get</code> 方法把查找工作用 <code>self[key]</code> 的形式委托给 <code>__getitem__</code>，这样在确定查找失败之前，还能通过 <code>__missing__</code> 在给某个键一个机会。</p><p><code>isinstance(key, str)</code> 在 <code>__missing__</code> 中是必须的，若 <code>str(k)</code> 不是一个存在的键，代码就会陷入无限递归。因为 <code>__missing__</code> 最后一行中的 <code>self[str(key)]</code> 会调用 <code>__getitem__</code>，而 <code>str(key)</code> 又不存在，则 <code>__missing__</code> 又会被调用。</p><p><code>__contains__</code> 方法也是必须的，因为从 <code>dict</code> 继承到的 <code>__contians__</code> 方法不会在找不到键时调用 <code>__missing__</code> 方法。</p><h5 id="不可变-Map"><a href="#不可变-Map" class="headerlink" title="不可变 Map"></a>不可变 Map</h5><p>标准库里所有的映射类型都是可变的。从 Python 3.3 开始，<strong>types</strong> 模块引入了一个名为 <strong>MappingProxyType</strong> 的封装类，可以从普通映射创建一个只读的映射视图。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> types <span class="keyword">import</span> MappingProxyType</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="number">1</span>: <span class="string">'A'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy = MappingProxyType(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy</span><br><span class="line">mappingproxy(&#123;<span class="number">1</span>: <span class="string">'A'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy[<span class="number">1</span>]</span><br><span class="line"><span class="string">'A'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy[<span class="number">2</span>] = <span class="string">'x'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'mappingproxy'</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">2</span>] = <span class="string">'B'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy</span><br><span class="line">mappingproxy(&#123;<span class="number">1</span>: <span class="string">'A'</span>, <span class="number">2</span>: <span class="string">'B'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy[<span class="number">2</span>]</span><br><span class="line"><span class="string">'B'</span></span><br></pre></td></tr></table></figure></p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合的本质是许多<strong>唯一对象</strong>的聚集，可用于去重：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'spam'</span>, <span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'spam'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set(l)</span><br><span class="line">&#123;<span class="string">'spam'</span>, <span class="string">'eggs'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>除了保证唯一性，集合还实现了很多基础的中缀运算符。比如 <code>a | b</code> 求并集，<code>a &amp; b</code> 求交集，<code>a - b</code> 求差集等。合理使用这些运算符可以省去不必要的循环和逻辑操作，使代码行数更少且更易读。</p><p>比如有一个电子邮件地址的集合 haystack，还要维护一个较小的电子邮件集合 needles，然后求出 needles 中有多少地址同时也出现在了 heystack 里。<br>求 needles 的元素在 heystack 中出现的次数，两个变量都是集合类型，则只用一行代码即可实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">found = len(needles &amp; haystack)</span><br></pre></td></tr></table></figure></p><p>若不使用交集操作的话，则需要通过以下代码实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> needles:</span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> haystack:</span><br><span class="line">       found += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h4 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h4><p>散列表（<strong>Hash Map</strong>）是一种稀疏数组（即总是有空白元素的数组），散列表中的单元通常叫做表元（<strong>bucket</strong>）。在 dict 背后的散列表中，每个键值对都占用一个表元，每个表元都包含两个部分，对键的引用和对值的引用。因为所有表元的大小一致，可以通过偏移量来读取某个表元。</p><p>Python 会保证大概三分之一的表元是空的，当快要达到这个阈值时，原有的散列表会被复制到一个更大的空间里。把对象存入散列表中之前，需要先计算该元素键的散列值。</p><p>内置的 <code>hash()</code> 函数可用于计算所有内置类型对象的散列值。若自定义对象调用 <code>hash()</code>，实际上运行的是自定义的 <code>__hash__</code> 方法。若两个对象比较时大小相等，则它们的散列值也必须相等。即 <code>1 == 1.0</code> 为真，则 <code>hash(1) == hash(1.0)</code> 也必须为真。</p><p>为了让散列值能够作为散列表索引使用，这些散列值必须在索引空间内尽量分散开。意味着在理想状态下，越是相似但不相等的对象，其散列值差别也越大。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hash(<span class="number">1.0001</span>)</span><br><span class="line"><span class="number">230584300921345</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hash(<span class="number">1.0002</span>)</span><br><span class="line"><span class="number">461168601842689</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hash(<span class="number">1.0003</span>)</span><br><span class="line"><span class="number">691752902764033</span></span><br></pre></td></tr></table></figure></p><p><strong>散列表算法</strong><br>为了获取 <code>my_dict[search_key]</code> 背后的值，Python 首先会调用 <code>hash(search_key)</code> 来计算 search_key 的散列值，将该值最低的几位数字作为偏移量（具体几位作为偏移量，需依据当前散列表的大小），在散列表里查找表元。若查找出的表元为空，则抛出 KeyError 异常。若表元非空，该表元中会有一对 <code>found_key: found_value</code>。Python 会检查 <code>search_key == found_key</code> 是否为真，若为真则返回 found_value。<br>若 search_key 与 found_key 不匹配，这种情况称为<strong>散列冲突</strong>。算法会在散列值中另外再取几位数字，用特殊方法处理一下，把新得到的数字作为索引继续寻找表元并重复以上步骤。</p><h5 id="字典的特性"><a href="#字典的特性" class="headerlink" title="字典的特性"></a>字典的特性</h5><p><strong>键必须是可散列的</strong><br>可散列对象满足以下三个要求：</p><ul><li>支持 <code>hash()</code> 函数，且通过 <code>__hash__()</code> 得到的散列值是不变的</li><li>支持通过 <code>__eq__()</code> 方法检测相等性</li><li>若 <code>a == b</code> 为真，则 <code>hash(a) == hash(b)</code> 也为真</li></ul><p>所有用户自定义对象默认都是可散列的，其散列值有 <code>id()</code> 获取，且都不相等。</p><p><strong>字典在内存上开销巨大</strong><br>字典使用了散列表，散列表又必须是稀疏的，从而导致字典在空间的使用上效率低下。<br>若需要存放数量巨大的记录，放在由元组或具名元组构成的列表中会是比较好的选择。<br>用元组取代字典存储记录，一是避免了散列表所耗费的空间，二是无需把记录中字段的名字在每个元素里都存一遍，从而节省空间。<br>在用户自定义类型中，<code>__slots__</code> 属性可以改变实例属性的存储方式，由 dict 变为 tuple。</p><p><strong>字典的键查询很快</strong><br>dict 的实现是典型的空间换时间。字典类型有着巨大的内存开销，但是它提供了无视数据量大小的快速访问。</p><p><strong>键的次序取决于添加顺序</strong></p><h5 id="集合的特性"><a href="#集合的特性" class="headerlink" title="集合的特性"></a>集合的特性</h5><p><strong>集合里的元素必须是可散列的</strong></p><p><strong>集合很消耗内存</strong></p><p><strong>可以很高效地判断元素是否存在于某个集合中</strong></p><p><strong>元素的次序取决于被添加到集合里的次序</strong></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://shop.oreilly.com/product/0636920032519.do" target="_blank" rel="noopener">Fluent Python</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、映射类型&quot;&gt;&lt;a href=&quot;#一、映射类型&quot; class=&quot;headerlink&quot; title=&quot;一、映射类型&quot;&gt;&lt;/a&gt;一、映射类型&lt;/h4&gt;&lt;p&gt;标准库里的所有映射类型都是利用 dict 实现的，它们有个共同的限制：其中的&lt;strong&gt;键必须是可散列的
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="DataStructure" scheme="https://rollingstarky.github.io/tags/DataStructure/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Dict" scheme="https://rollingstarky.github.io/tags/Dict/"/>
    
      <category term="Map" scheme="https://rollingstarky.github.io/tags/Map/"/>
    
      <category term="Hash" scheme="https://rollingstarky.github.io/tags/Hash/"/>
    
      <category term="Set" scheme="https://rollingstarky.github.io/tags/Set/"/>
    
  </entry>
  
</feed>
