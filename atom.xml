<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StarryLand</title>
  
  <subtitle>我的全部道路，就是从孤独走向人间</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rollingstarky.github.io/"/>
  <updated>2021-06-09T15:29:10.952Z</updated>
  <id>https://rollingstarky.github.io/</id>
  
  <author>
    <name>星舞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Rust programming language 读书笔记——结构体（Struct）</title>
    <link href="https://rollingstarky.github.io/2021/06/09/the-rust-programming-language-reading-notes-struct/"/>
    <id>https://rollingstarky.github.io/2021/06/09/the-rust-programming-language-reading-notes-struct/</id>
    <published>2021-06-08T16:00:00.000Z</published>
    <updated>2021-06-09T15:29:10.952Z</updated>
    
    <content type="html"><![CDATA[<p><strong>结构（Struct）是一种自定义数据类型</strong>。允许我们命名多个相关的值并将它们组成一个有机的结合体。</p><h4 id="定义与实例化"><a href="#定义与实例化" class="headerlink" title="定义与实例化"></a>定义与实例化</h4><p>关键字 <code>struct</code> 被用来定义并命名结构体，一个良好的结构体名称需反映出自身数据组合的意义。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span></span> &#123;</span><br><span class="line">    username: <span class="built_in">String</span>,</span><br><span class="line">    email: <span class="built_in">String</span>,</span><br><span class="line">    sign_in_count: <span class="built_in">u64</span>,</span><br><span class="line">    active: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>结构体就像是类型的通用模板，将具体的数据填入模板时就创建了新的实例</strong>。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user1 = User &#123;</span><br><span class="line">    email: <span class="built_in">String</span>::from(<span class="string">"someone@example.com"</span>),</span><br><span class="line">    username: <span class="built_in">String</span>::from(<span class="string">"someone@example.com"</span>),</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    sign_in_count: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在创建了结构体实例后，可以通过点号来访问实例中的特定字段。假如这个实例是可变的，还可以通过点号来修改字段的值。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> user1 = User &#123;</span><br><span class="line">    email: <span class="built_in">String</span>::from(<span class="string">"someone@example.com"</span>),</span><br><span class="line">    username: <span class="built_in">String</span>::from(<span class="string">"someusername123"</span>),</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    sign_in_count: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user1.email = <span class="built_in">String</span>::from(<span class="string">"anotheremail@example.com"</span>);</span><br></pre></td></tr></table></figure></p><p>需要注意的是，<strong>一旦结构体实例定义为可变，那么实例中的所有字段都将是可变的</strong>。</p><p>可以在函数体的最后一个表达式中构建结构体实例，来隐式的将这个实例作为结果返回。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">build_user</span></span>(email: <span class="built_in">String</span>, username: <span class="built_in">String</span>) -&gt; User &#123;</span><br><span class="line">    User &#123;</span><br><span class="line">        email: email,</span><br><span class="line">        username: username,</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        sign_in_count: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在变量名与字段名相同时，可以使用简化版的字段初始化方法重构上面的 <code>build_user</code> 函数。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">build_user</span></span>(email: <span class="built_in">String</span>, username: <span class="built_in">String</span>) -&gt; User &#123;</span><br><span class="line">    User &#123;</span><br><span class="line">        email,</span><br><span class="line">        username,</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        sign_in_count: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在许多情况下，新创建的实例中，除了需要修改的小部分字段以外，其余字段的值与旧实例完全相同。可以使用<strong>结构体更新语法</strong>快速实现此类新实例的创建。</p><p>使用结构体更新语法来为一个 User 实例设置新的 email 和 username 字段的值，并从 user1 实例中获取剩余字段的值：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user2 = User &#123;</span><br><span class="line">    email: <span class="built_in">String</span>::from(<span class="string">"another@example.com"</span>),</span><br><span class="line">    username: <span class="built_in">String</span>::from(<span class="string">"anotherusername567"</span>),</span><br><span class="line">    ..user1</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>..</code> 表示剩下的那些还未被显式赋值的字段都与给定实例拥有相同的值。</p><h5 id="元组结构体"><a href="#元组结构体" class="headerlink" title="元组结构体"></a>元组结构体</h5><p>可以使用一种类似元组的方式定义结构体，这种结构体也被称作元组结构体。元组结构体同样拥有表明自身含义的名称，但无需在声明时对其字段进行命名，只标注类型即可。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Color</span></span>(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> black = Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> origin = Point(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>这里的 black 和 origin 是不同的类型，因为它们两个分别是不同元组结构体的实例。<br><strong>每一个结构体都拥有自己的类型</strong>。</p><h4 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h4><p>使用 cargo 命令创建一个名为 rectangles 的项目：<br><code>cargo new rectangles</code><br>这个程序会接收以像素为单位的宽度和高度作为输入，并计算出对应的长方形面积。</p><p>编辑项目中的 <code>src/main.rs</code> 源代码文件：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> width1 = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">let</span> height1 = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The area of the rectangle is &#123;&#125;"</span>, area(width1, height1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(width: <span class="built_in">u32</span>, height: <span class="built_in">u32</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    width * height</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行 <code>cargo run</code> 命令查看输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cargo run</span><br><span class="line">    Finished dev [unoptimized + debuginfo] target(s) in 2.53s</span><br><span class="line">     Running `target/debug/rectangle`</span><br><span class="line">The area of the rectangle is 1500</span><br></pre></td></tr></table></figure></p><p><code>area</code> 函数用来计算长方形的面积，接收宽和高两个参数。这两个参数是相互关联的，但程序中没有任何地方可以体现这一点。将宽和高放在一起能够使代码更加易懂和易于维护。</p><p><strong>使用元组关联长方形的宽和高</strong><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect1 = (<span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The area of the rectangle is &#123;&#125;"</span>, area(rect1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(dimensions: (<span class="built_in">u32</span>, <span class="built_in">u32</span>)) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    dimensions.<span class="number">0</span> * dimensions.<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面的代码中，元组使输入的参数结构化了，现在只需要传递一个参数就可以调用函数 <code>area</code>。<br>但元组不会给出自身元素的名称，只能通过索引访问。这使得程序变得难以阅读。<br>比如当需要将该长方形绘制到屏幕上时，混淆宽度和高度就容易出现问题。</p><p><strong>使用结构体增加有意义的描述信息</strong><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect1 = Rectangle &#123;</span><br><span class="line">        width: <span class="number">30</span>,</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The area of the rectangle is &#123;&#125;"</span>, area(&amp;rect1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(rectangle: &amp;Rectangle) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    rectangle.width * rectangle.height</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Rectangle 结构体表明了宽度和高度是相互关联的两个值，并为这些值提供了描述性的名字。因此代码看起来会更加清晰。</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>方法与函数十分相似，它们都使用 <code>fn</code> 关键字及一个名称进行声明；它们都可以拥有参数和返回值；它们都包含了一段在调用时执行的代码。<br>但<strong>方法总是被定义在某个结构体（或者枚举类型、trait 对象）的上下文中，且它们的第一个参数都是 <code>self</code>，用于指代调用该方法的结构体实例</strong>。</p><p>将 <code>area</code> 函数定义为 Rectangle 结构体中的方法：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect1 = Rectangle &#123;</span><br><span class="line">        width: <span class="number">30</span>,</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The area of the rectangle is &#123;&#125;"</span>, rect1.area());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于方法的声明被放置在 <code>impl Rectangle</code> 块中，因此 Rust 能够将 <code>self</code> 的类型推导为 Rectangle，我们才可以在 <code>area</code> 的签名中使用 <code>&amp;self</code> 来替代 <code>&amp;Rectangle</code>。<br>使用方法替代函数不仅能够避免在每个方法的签名中重复编写 self 的类型，还有助于程序员组织代码的结构。可以将某个类型的实例需要的功能放置在同一个 impl 块中，避免用户在代码库中盲目地搜索它们。</p><p>添加 <code>can_hold</code> 方法检测当前的 Rectangle 实例能否完整地包含传入的另一个 Rectangle 实例：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">can_hold</span></span>(&amp;<span class="keyword">self</span>, other: &amp;Rectangle) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt; other.width &amp;&amp; <span class="keyword">self</span>.height &gt; other.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect1 = Rectangle &#123;</span><br><span class="line">        width: <span class="number">30</span>,</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> rect2 = Rectangle &#123;</span><br><span class="line">        width: <span class="number">10</span>,</span><br><span class="line">        height: <span class="number">40</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> rect3 = Rectangle &#123;</span><br><span class="line">        width: <span class="number">60</span>,</span><br><span class="line">        height: <span class="number">45</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"Can rect1 hold rect2? &#123;&#125;"</span>, rect1.can_hold(&amp;rect2));</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"Can rect1 hold rect3? &#123;&#125;"</span>, rect1.can_hold(&amp;rect3));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="关联函数"><a href="#关联函数" class="headerlink" title="关联函数"></a>关联函数</h5><p>除了方法，impl 块还允许我们定义不用接收 self 作为参数的函数。这类函数与结构体（而不是实例）相互关联，因此也被称为关联函数。<br>它们不会作用于某个具体的结构体实例。<br>之前用到的 <code>String::from</code> 就是关联函数的一种。</p><p>关联函数常被用作构造器来返回一个结构体的新实例。例如可以编写一个 <code>square</code> 关联函数，只接收一个参数，该参数同时用作宽度与高度来构造正方形实例。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">square</span></span>(size: <span class="built_in">u32</span>) -&gt; Rectangle &#123;</span><br><span class="line">        Rectangle &#123; width: size, height: size &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以使用 <code>let sq = Rectangle::square(3);</code> 类似的语法来创建正方形实例。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>结构体可以让我们基于特定领域的规则创建有意义的自定义类型</strong>。<br>通过使用结构体，可以将相互关联的数据组合起来，并为每条数据赋予有含义的名称，从而使代码更加清晰。<br>方法可以让我们为结构体实例指定特殊的行为，而关联函数则可以将那些不需要实例的特定功能放置到结构体的命名空间中。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://doc.rust-lang.org/book/" target="_blank" rel="noopener">The Rust Programming Language</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;结构（Struct）是一种自定义数据类型&lt;/strong&gt;。允许我们命名多个相关的值并将它们组成一个有机的结合体。&lt;/p&gt;
&lt;h4 id=&quot;定义与实例化&quot;&gt;&lt;a href=&quot;#定义与实例化&quot; class=&quot;headerlink&quot; title=&quot;定义与实例化&quot;
      
    
    </summary>
    
      <category term="Rust" scheme="https://rollingstarky.github.io/categories/Rust/"/>
    
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Type" scheme="https://rollingstarky.github.io/tags/Type/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="Class" scheme="https://rollingstarky.github.io/tags/Class/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Function" scheme="https://rollingstarky.github.io/tags/Function/"/>
    
      <category term="Rust" scheme="https://rollingstarky.github.io/tags/Rust/"/>
    
      <category term="Struct" scheme="https://rollingstarky.github.io/tags/Struct/"/>
    
      <category term="Method" scheme="https://rollingstarky.github.io/tags/Method/"/>
    
  </entry>
  
  <entry>
    <title>Vim 配置光标形状和颜色（Windows Terminal、xterm）</title>
    <link href="https://rollingstarky.github.io/2021/06/08/change-vim-cursor-shape-and-color-in-xterm-or-windows-terminal/"/>
    <id>https://rollingstarky.github.io/2021/06/08/change-vim-cursor-shape-and-color-in-xterm-or-windows-terminal/</id>
    <published>2021-06-07T16:00:00.000Z</published>
    <updated>2021-06-08T13:15:37.593Z</updated>
    
    <content type="html"><![CDATA[<p>Windows Terminal 里的 Vim 设置了浅的配色，刚好光标默认是白色的竖线，不容易看出来。很有点费眼睛。</p><p>想把光标改成其他颜色的方块样式。因为不是 gvim，<code>guicursor</code> 之类的配置不起作用。<br>上网查了些资料，测试如下配置可以正常生效（貌似这个 Terminal 是属于 <code>xterm</code> 那一类）：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" Set cursor shape and color</span></span><br><span class="line"><span class="keyword">if</span> &amp;term =~ <span class="string">"xterm"</span></span><br><span class="line">    <span class="comment">" INSERT mode</span></span><br><span class="line">    <span class="keyword">let</span> &amp;t_SI = <span class="string">"\&lt;Esc&gt;[6 q"</span> . <span class="string">"\&lt;Esc&gt;]12;blue\x7"</span></span><br><span class="line">    <span class="comment">" REPLACE mode</span></span><br><span class="line">    <span class="keyword">let</span> &amp;t_SR = <span class="string">"\&lt;Esc&gt;[3 q"</span> . <span class="string">"\&lt;Esc&gt;]12;black\x7"</span></span><br><span class="line">    <span class="comment">" NORMAL mode</span></span><br><span class="line">    <span class="keyword">let</span> &amp;t_EI = <span class="string">"\&lt;Esc&gt;[2 q"</span> . <span class="string">"\&lt;Esc&gt;]12;green\x7"</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="comment">" 1 -&gt; blinking block  闪烁的方块</span></span><br><span class="line"><span class="comment">" 2 -&gt; solid block  不闪烁的方块</span></span><br><span class="line"><span class="comment">" 3 -&gt; blinking underscore  闪烁的下划线</span></span><br><span class="line"><span class="comment">" 4 -&gt; solid underscore  不闪烁的下划线</span></span><br><span class="line"><span class="comment">" 5 -&gt; blinking vertical bar  闪烁的竖线</span></span><br><span class="line"><span class="comment">" 6 -&gt; solid vertical bar  不闪烁的竖线</span></span><br></pre></td></tr></table></figure></p><p>其中各配置项的含义如下：</p><ul><li><code>&amp;t_SI</code> 表示插入模式</li><li><code>&amp;t_SR</code> 表示替换模式</li><li><code>&amp;t_EI</code> 表示 Normal 模式</li><li><code>.</code> 号左边的 <code>&quot;\&lt;Esc&gt;[6 q&quot;</code> 用来配置光标的形状。其中 <code>6</code> 的取值可以是 <code>1 - 6</code>，分别指代不同的光标样式（参考前面的注释）</li><li><code>.</code> 号右边的 <code>&quot;\&lt;Esc&gt;]12;blue\x7&quot;</code> 用来配置光标颜色，其中的 <code>blue</code> 可以替换为其他颜色名词</li></ul><p>设置光标颜色时也可以使用 RGB 颜色，格式为 <code>rgb:RR/GG/BB</code>。比如纯白色的光标即为 <code>&quot;\&lt;Esc&gt;]12;rgb:FF/FF/FF\x7&quot;</code>。</p><p>若只想设置光标形状，直接去掉 <code>.</code> 号以及右边的颜色配置部分即可。如 <code>let &amp;t_SR = &quot;\&lt;Esc&gt;[3 q&quot;</code>。<br>同理，只想修改颜色时也可以将 <code>.</code> 号左边的形状配置部分删掉。<br><code>.</code> 号在这里的作用其实是字符串拼接，方便区分形状配置部分和颜色配置部分而已。去掉 <code>.</code> 号直接将两部分配置写在一个字符串里也是可以的。<br>即 <code>let &amp;t_SR = &quot;\&lt;Esc&gt;[3 q&quot; . &quot;\&lt;Esc&gt;]12;black\x7&quot;</code> 等同于 <code>let &amp;t_SR = &quot;\&lt;Esc&gt;[3 q\&lt;Esc&gt;]12;black\x7&quot;</code></p><p>Normal 模式（绿色方块）：<img src="https://upload-images.jianshu.io/upload_images/6875152-ae01d0d4a9671096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Normal"></p><p>插入模式（蓝色竖线）：<img src="https://upload-images.jianshu.io/upload_images/6875152-4fa8045616982bdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Insert"></p><p>替换模式（黑色下划线）：<img src="https://upload-images.jianshu.io/upload_images/6875152-426522041791876e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Replace"></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://stackoverflow.com/questions/14920634/cursor-color-in-xterm-change-accordingly-to-the-syntax-in-vim" target="_blank" rel="noopener">Cursor color in xterm; change accordingly to the syntax in vim</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Windows Terminal 里的 Vim 设置了浅的配色，刚好光标默认是白色的竖线，不容易看出来。很有点费眼睛。&lt;/p&gt;
&lt;p&gt;想把光标改成其他颜色的方块样式。因为不是 gvim，&lt;code&gt;guicursor&lt;/code&gt; 之类的配置不起作用。&lt;br&gt;上网查了些资料
      
    
    </summary>
    
      <category term="Linux" scheme="https://rollingstarky.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://rollingstarky.github.io/tags/Linux/"/>
    
      <category term="Tools" scheme="https://rollingstarky.github.io/tags/Tools/"/>
    
      <category term="Configuration" scheme="https://rollingstarky.github.io/tags/Configuration/"/>
    
      <category term="Tricks" scheme="https://rollingstarky.github.io/tags/Tricks/"/>
    
      <category term="Vim" scheme="https://rollingstarky.github.io/tags/Vim/"/>
    
      <category term="Xterm" scheme="https://rollingstarky.github.io/tags/Xterm/"/>
    
      <category term="Terminal" scheme="https://rollingstarky.github.io/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title>The Rust programming language 读书笔记——所有权与 Move 机制</title>
    <link href="https://rollingstarky.github.io/2021/06/07/the-rust-programming-language-reading-notes-ownership-and-move/"/>
    <id>https://rollingstarky.github.io/2021/06/07/the-rust-programming-language-reading-notes-ownership-and-move/</id>
    <published>2021-06-06T16:00:00.000Z</published>
    <updated>2021-06-07T15:16:34.071Z</updated>
    
    <content type="html"><![CDATA[<ul><li>所有权概念是 Rust 语言的核心功能</li><li>Rust 没有垃圾回收（GC）机制</li><li>Rust 通过所有权和相关工具保障内存安全</li></ul><p>所有语言都需要管理自己在运行时使用的计算机内存空间。<br>使用垃圾回收机制的语言（Java、Python）会<strong>在运行时定期检查并回收</strong>没有被继续使用的内存；另外一些语言（C、C++）则需要<strong>程序员手动地分配和释放</strong>内存。</p><p>Rust 采用第三种方式：它使用包含特定规则的所有权系统来管理内存。这套规则允许<strong>编译器在编译过程中执行检查工作</strong>，不会产生任何的运行时开销。</p><h4 id="栈与堆"><a href="#栈与堆" class="headerlink" title="栈与堆"></a>栈与堆</h4><p>栈和堆都是代码在运行时可以使用的内存空间。<br><strong>所有存储在栈中的数据必须拥有一个已知且固定的大小。在编译期无法确定大小的数据只能存放在堆中</strong>。</p><p>堆空间的管理较为松散。当希望将数据放入堆中时，可以请求特定大小的空间，操作系统会根据请求在堆中找到一块足够大的可用空间，并把指向这块空间地址的指针返回给我们。这个过程称为分配。</p><p>由于指针（内存地址）的大小是固定的且可以在编译期确定，因此可以将指针存放在栈中。通过指针指向的地址访问指针所指向的具体数据。</p><p>由于多了指针跳转的环节，<strong>访问堆上的数据要慢于访问栈上的数据</strong>。许多系统编程语言都需要程序员去记录代码中分配的堆空间，最小化堆上的冗余，并及时清理无用数据以避免耗尽内存空间。所有权的概念就是为了将上述问题交给 Rust 处理，减轻程序员的这部分心智负担。</p><h4 id="所有权规则"><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h4><ul><li>Rust 中的每一个值都有一个对应的变量作为它的拥有者</li><li>在同一时间内，值有且只有一个拥有者</li><li>当所有者离开自己的作用域时，它拥有的值就会被释放掉</li></ul><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><p><strong>作用域是一个对象在程序中有效的范围</strong>。</p><p>如：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;                       <span class="comment">// 变量 s 还未声明，因此在这里不可用</span></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"hello"</span>;    <span class="comment">// 从这里开始变量 s 变得可用</span></span><br><span class="line">    <span class="comment">// 执行与 s 相关的操作</span></span><br><span class="line">&#125;                       <span class="comment">// 作用域到这里结束，变量 s 不再可用</span></span><br></pre></td></tr></table></figure></p><ul><li>变量在进入作用域后变得有效</li><li>变量会保持自己的有效性直到离开自己的作用域</li></ul><p>字符串字面量（如 <code>let s = &quot;hello&quot;</code>）属于被<strong>硬编码进程序</strong>的字符串值。很方便，但并不适用于所有场景。<br>一是因为<strong>字符串字面量是不可变的</strong>，二是因为并不是所有字符串的值都能在编写代码时确定。<br>比如需要获取用户的输入并保存。</p><p>Rust 提供了第二种字符串类型 String。<strong>String 会在堆上分配存储空间</strong>，因此能够处理未知大小的文本。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">s.push_str(<span class="string">", world!"</span>);    <span class="comment">// push_str() 函数向 String 空间的尾部添加了一段字符串字面量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);    <span class="comment">// 这里会输出完整的 hello, world!</span></span><br></pre></td></tr></table></figure></p><p>对于字符串字面量而言，由于在编译时就知道其内容，这部分硬编码的文本被直接嵌入到了可执行文件中。这也是访问字符串字面量异常高效的原因。<br>对于 String 类型而言，为了支持一种可变的、可增长的类型，需要在堆上分配一块在编译时未知大小的内存来存放数据。<br><strong>当使用完 String 时，则需要通过某种方式来将这些内存归还给操作系统</strong>。</p><p>对于拥有 GC 机制的语言，GC 会替代程序员记录并清理那些不再使用的内存。而对于没有 GC 的语言，识别不再使用的内存并调用代码显式释放的工作就需要程序员来完成。<br>假如忘记释放内存，就会造成内存泄漏；假如过早地释放内存，就会产生一个非法变量；假如重复释放同一块内存，就会产生无法预知的后果。</p><p>Rust 提供了另外一套解决方案：<strong>内存会在拥有它的变量离开作用域后自动地进行释放</strong>。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;                                     <span class="comment">// 变量 s 还未声明，因此在这里不可用</span></span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);    <span class="comment">// 从这里开始变量 s 变得可用</span></span><br><span class="line">    <span class="comment">// 执行与 s 相关的操作</span></span><br><span class="line">&#125;                                     <span class="comment">// 作用域到这里结束，变量 s 失效</span></span><br></pre></td></tr></table></figure></p><p>Rust 会在作用域结束的地方（即 <code>}</code> 处）自动回收分配给变量 s 的内存。</p><h4 id="内存与分配"><a href="#内存与分配" class="headerlink" title="内存与分配"></a>内存与分配</h4><p>对于整数类型的数据：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = x;</span><br></pre></td></tr></table></figure></p><p>上述代码将整数值 5 绑定给变量 x，再创建一个 x 值的拷贝，绑定给变量 y。由于整数是已知固定大小的简单值，两个值 5 会同时被推入栈中。</p><p>对于 String 类型的数据：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1;</span><br></pre></td></tr></table></figure></p><p>类似的代码，运行方式却并不一致。</p><p>String 的内存布局如下图：<img src="https://upload-images.jianshu.io/upload_images/6875152-ecb048bdb6e79553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="String"></p><p>对于绑定给变量 s1 的 String 来说，该字符串的文本内容（<code>hello</code>）保存在了堆上，同时在栈中保存着一个指向字符串内容的指针、一个长度和一个容量信息。</p><p>当将 s1 赋值给 s2 时，便复制了一次 String 的数据。这意味着我们复制了它存储在栈上的指针、长度和容量字段，而指针指向的堆上的数据并没有被复制。</p><p>变量 s1 和 s2 的内存布局如下图：<img src="https://upload-images.jianshu.io/upload_images/6875152-70f122622d77bade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="s1 &amp; s2"></p><p>前面提到过，当一个变量离开当前的作用域时，Rust 会自动将变量使用的堆内存释放和回收。但若是有两个指针指向了同一个地址，就会导致如 s2 和 s1 离开自己的作用域时，Rust 会尝试重复释放相同的内存，进而有可能导致正在使用的数据发生损坏。<br>为了确保内存安全，同时也避免复制分配的内存，Rust 在上述场景下会简单的将 s1 废弃。因此也就不需要在 s1 离开作用域后清理任何东西。这一行为即为 <strong>Move</strong>。</p><p>试图在 s2 创建完毕后访问 s1（如下所示）会导致编译错误。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">let</span> s2 = s1;  <span class="comment">// 变量 s1 在这里被废弃</span></span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;, world"</span>, s1);  <span class="comment">// 错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Rust 会报出 <strong>borrow of moved value: <code>s1</code></strong> 错误。</p><p><strong>Rust 永远不会自动创建数据的深度拷贝</strong>。</p><p>对于<strong>栈上数据的复制</strong>，比如：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"x = &#123;&#125;, y = &#123;&#125;"</span>, x, y);</span><br></pre></td></tr></table></figure></p><p>上面的代码是完全合法的。因为整型的数据可以在编译时确定自己的大小，能够将数据完整地存储在栈中。对于这些类型而言，深度拷贝与浅度拷贝没有任何区别。</p><h4 id="所有权与函数"><a href="#所有权与函数" class="headerlink" title="所有权与函数"></a>所有权与函数</h4><p><strong>将值传递给函数在语义上类似于对变量进行赋值。将变量传递给函数将会触发移动或复制</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>); <span class="comment">//变量 s 进入作用域</span></span><br><span class="line">    takes_ownership(s); <span class="comment">// s 的值被移动进了函数</span></span><br><span class="line">                        <span class="comment">// 变量 s 从这里开始不再有效</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>; <span class="comment">// 变量 x 进入作用域</span></span><br><span class="line">    makes_copy(x); <span class="comment">// 变量 x 被传递进了函数</span></span><br><span class="line">                   <span class="comment">// 但 i32 类型不受 Move 机制影响，因此这里 x 依旧可用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_ownership</span></span>(some_string: <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="comment">// some_string 进入作用域</span></span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;"</span>, some_string);</span><br><span class="line">&#125; <span class="comment">// some_string 离开作用域，占用的内存被释放</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">makes_copy</span></span>(some_integer: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;"</span>, some_integer);</span><br><span class="line">&#125; <span class="comment">// some_integer 离开作用域，没有特别的事情发生</span></span><br></pre></td></tr></table></figure><p>在上述代码中，尝试在调用 <code>takes_ownership</code> 后使用变量 s 会导致编译错误。</p><p><strong>函数在返回值的过程中也会发生所有权的转移</strong>。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = gives_ownership(); <span class="comment">// gives_ownership 将它的返回值移动至变量 s1 中</span></span><br><span class="line">    <span class="keyword">let</span> s2 = <span class="built_in">String</span>::from(<span class="string">"hello"</span>); <span class="comment">// 变量 s2 进入作用域</span></span><br><span class="line">    <span class="keyword">let</span> s3 = takes_and_gives_back(s2); <span class="comment">// s2 被移动进函数 takes_and_gives_back，而这个函数的返回值又被移动到了变量 s3 上</span></span><br><span class="line">&#125; <span class="comment">// s3 和 s1 在这里离开作用域并被销毁，而 s2 已经移动了，因此不会发生任何事情</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">gives_ownership</span></span>() -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> some_string = <span class="built_in">String</span>::from(<span class="string">"hello"</span>); <span class="comment">//  some_string 进入作用域</span></span><br><span class="line">    some_string <span class="comment">// some_string 作为返回值移动至调用方</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// takes_and_gives_back 将取得一个 String 的所有权并将它作为结果返回</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_and_gives_back</span></span>(a_string: <span class="built_in">String</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    a_string <span class="comment">// a_string 作为返回值移动至调用方</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>变量的所有权转移总是遵循相同的模式：<strong>将一个值赋值给另一个变量时就会转移所有权。当一个持有堆数据的变量离开作用域时，它的数据就会被清理回收，除非这些数据的所有权被移动到了另一个变量上</strong>。</p><h4 id="引用与借用"><a href="#引用与借用" class="headerlink" title="引用与借用"></a>引用与借用</h4><p>参考如下示例代码：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">let</span> (s2, len) = calculate_length(s1);</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The length of '&#123;&#125;' is &#123;&#125;"</span>, s2, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">calculate_length</span></span>(s: <span class="built_in">String</span>) -&gt; (<span class="built_in">String</span>, <span class="built_in">usize</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> length = s.len();</span><br><span class="line">    (s, length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于调用 <code>caculate_length</code> 会导致 String 移动到函数体内部，我们又需要在调用后继续使用该 String，因此不得不通过元组将 String 作为元素继续返回。</p><p>这种写法未免过于笨拙。在下面的代码中，新的 <code>calculate_length</code> 函数使用了 String 的引用作为参数而不会直接转移值的所有权。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">let</span> len = calculate_length(&amp;s1);</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The length of '&#123;&#125;' is &#123;&#125;"</span>, s1, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">calculate_length</span></span>(s: &amp;<span class="built_in">String</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    s.len()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在新的代码中，调用 <code>calculate_length</code> 函数时使用了 <code>&amp;s1</code> 作为参数，且在该函数的定义中使用 <code>&amp;String</code> 替代了 <code>String</code>。<br><strong>&amp; 代表引用，允许在不获取所有权的情况下使用值</strong>。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-98dfcbcd42cf0d54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引用"></p><p><code>&amp;s1</code> 语法允许在不转移所有权的前提下创建一个指向 <code>s1</code> 值的引用。由于引用不持有值的所有权，当引用离开当前作用域时，它指向的值也不会被丢弃。<br>当一个函数使用引用而不是值本身作为参数时，我们就不需要为了归还所有权而特意去返回值。毕竟引用根本没有取得所有权。</p><p><strong>这种通过引用传递参数给函数的方法也称作借用</strong>。</p><h5 id="可变引用"><a href="#可变引用" class="headerlink" title="可变引用"></a>可变引用</h5><p>与变量类似，引用默认是不可变的。Rust 不允许修改引用指向的值（除非声明为 mut）。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line">    change(&amp;<span class="keyword">mut</span> s);</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;"</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">change</span></span>(some_string: &amp;<span class="keyword">mut</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    some_string.push_str(<span class="string">", world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于特定作用域中的特定数据，一次只能声明一个可变引用</strong>。<br>比如：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">let</span> r1 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">    <span class="keyword">let</span> r2 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, r1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就会出现 <strong>cannot borrow <code>s</code> as mutable more than once at a time</strong> 编译错误。这个规则使得引用的可变性只能以一种受到严格限制的方式使用。但另一方面，遵循这条限制性规则可以在编译时避免数据竞争。即<strong>不允许两个或两个以上的指针同时访问（且至少有一个指针会写入数据）同一空间</strong>。<br>数据竞争会导致未定义的行为，往往难以在运行时进行跟踪，也就使得出现的 bug 更加难以被诊断和修复。</p><p><strong>不能在拥有不可变引用的同时创建可变引用</strong>。编译时会报出 <strong>cannot borrow <code>s</code> as immutable because it is also borrowed as mutable</strong> 错误。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">let</span> r1 = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="keyword">let</span> r2 = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="keyword">let</span> r3 = &amp;<span class="keyword">mut</span> s; <span class="comment">// 错误</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, r2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不能在拥有不可变引用的同时创建可变引用，但可以同时存在多个不可变引用。因为对数据的只读操作不会影响到其他读取数据的用户。</p><p><strong>Rust 编译器可以为用户提早（编译时而不是运行时）暴露那些潜在的 bug，并且明确指出出现问题的地方。用户就不再需要去追踪调试为何数据会在运行时发生了非预期的变化</strong>。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://doc.rust-lang.org/book/" target="_blank" rel="noopener">The Rust Programming Language</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;所有权概念是 Rust 语言的核心功能&lt;/li&gt;
&lt;li&gt;Rust 没有垃圾回收（GC）机制&lt;/li&gt;
&lt;li&gt;Rust 通过所有权和相关工具保障内存安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有语言都需要管理自己在运行时使用的计算机内存空间。&lt;br&gt;使用垃圾回收机制的
      
    
    </summary>
    
      <category term="Rust" scheme="https://rollingstarky.github.io/categories/Rust/"/>
    
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Reference" scheme="https://rollingstarky.github.io/tags/Reference/"/>
    
      <category term="Rust" scheme="https://rollingstarky.github.io/tags/Rust/"/>
    
      <category term="Ownership" scheme="https://rollingstarky.github.io/tags/Ownership/"/>
    
      <category term="Move" scheme="https://rollingstarky.github.io/tags/Move/"/>
    
      <category term="Pointer" scheme="https://rollingstarky.github.io/tags/Pointer/"/>
    
  </entry>
  
  <entry>
    <title>The Rust programming language 读书笔记——通用编程概念</title>
    <link href="https://rollingstarky.github.io/2021/06/04/the-rust-programming-language-reading-notes-common-concepts/"/>
    <id>https://rollingstarky.github.io/2021/06/04/the-rust-programming-language-reading-notes-common-concepts/</id>
    <published>2021-06-03T16:00:00.000Z</published>
    <updated>2021-06-04T12:03:49.088Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h4><p><strong>Rust 中的变量默认是不可变的</strong>。</p><p>可以通过如下代码测试变量的不可变性：</p><ul><li>使用 <code>cargo new variables</code> 命令创建新的 Rust 项目</li><li>进入新创建的 <code>variables</code> 目录，编辑 <code>src/main.rs</code> 源代码文件</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The value is &#123;&#125;"</span>, x);</span><br><span class="line">    x = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The value is &#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 <code>cargo run</code> 命令编译并执行 Rust 程序，出现如下报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error[E0384]: cannot assign twice to immutable variable `x`</span><br></pre></td></tr></table></figure></p><p>即 Rust 编译器不允许程序代码对不可变变量进行二次赋值。</p><p><strong>可以通过 <code>let mut</code> 关键字声明可变变量</strong>。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The value is &#123;&#125;"</span>, x);</span><br><span class="line">    x = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The value is &#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cargo run</span><br><span class="line">    Finished dev [unoptimized + debuginfo] target(s) in 0.29s</span><br><span class="line">     Running `target/debug/variables`</span><br><span class="line">The value is 10</span><br><span class="line">The value is 20</span><br></pre></td></tr></table></figure><p><strong>PS</strong>：在使用重型数据结构时，适当地使用可变性去修改一个实例，可能比重新返回一个新分配的实例更有效率；而数据结构更为轻量时，采用偏函数式的风格创建新变量来进行赋值，可能会使代码更易于理解。</p><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><ul><li>使用 <code>const</code> 而不是 <code>let</code> 关键字声明常量</li><li>声明常量时必须显式地<strong>标注值的类型</strong></li><li>常量可以被声明在任何作用域中。在一个值需要被不同部分的代码共同引用时很有用处</li><li>无法将一个函数的返回值或其他需要<strong>在运行时计算</strong>的值绑定到常量上</li></ul><p><code>const PI: f32 = 3.1415;</code></p><h5 id="Shadow"><a href="#Shadow" class="headerlink" title="Shadow"></a>Shadow</h5><p>Shadow 的意思是，<strong>一个新声明的变量可以覆盖掉旧的同名变量</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> x = x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> x = x * <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The value is &#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    Finished dev [unoptimized + debuginfo] target(s) in 0.00s</span><br><span class="line">     Running `target/debug/variables`</span><br><span class="line">The value is 12</span><br></pre></td></tr></table></figure><p>Shadow 机制允许在复用变量名称的同时改变变量的类型。比如下面的代码就是合法的：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> spaces = <span class="string">"     "</span>;</span><br><span class="line"><span class="keyword">let</span> sapces = spaces.len();</span><br></pre></td></tr></table></figure></p><p>通过复用 <code>spaces</code> 这个名字，就不需要再声明诸如 <code>spaces_str</code> 和 <code>spaces_num</code> 之类的变量。</p><p>但如果使用 <code>mut</code> 关键字来模拟上述效果就会报错。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> spaces = <span class="string">"     "</span>;</span><br><span class="line">spaces = spaces.len();</span><br></pre></td></tr></table></figure></p><p>因为编译器拒绝修改变量的类型，即便该变量是可变的。<br>Shadow 的机制在于使用 <code>let</code> 关键字<strong>重新声明</strong>了变量。</p><h4 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h4><p><strong>Rust 是一门静态类型语言，在编译过程中需要知道所有变量的具体类型。</strong></p><p>大部分情况下，编译器可以自动推导出变量类型。但比如需要将 String 类型转换为数值类型时，就必须显式地添加类型标注：<br><code>let guess: u32 = &quot;42&quot;.parse().expect(&quot;Not a number&quot;);</code></p><h5 id="标量（Scalar）类型"><a href="#标量（Scalar）类型" class="headerlink" title="标量（Scalar）类型"></a>标量（Scalar）类型</h5><p>标量类型是单个值类型的统称。Rust 内置 4 种基础的标量类型：整数、浮点数、布尔值和字符。</p><p><strong>整数类型</strong></p><table><thead><tr><th>长度</th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>8 bit</td><td>i8</td><td>u8</td></tr><tr><td>16 bit</td><td>i16</td><td>u16</td></tr><tr><td>32 bit</td><td>i32</td><td>u32</td></tr><tr><td>64 bit</td><td>i64</td><td>u64</td></tr></tbody></table><p>有无符号代表了一个整数类型是否包含负数。即有符号的整数总是需要一个 bit 表示当前数值是否为正。<br>对于一个 n bit 的有符号整数，其取值范围是 <code>- 2 ^ (n - 1)</code> 到 <code>2 ^ (n - 1) - 1</code>；长度为 n bit 的无符号整数，其取值范围则是 <code>0</code> 到 <code>2 ^ n - 1</code>。</p><p><strong>浮点数类型</strong><br>包含 <code>f32</code> 和 <code>f64</code> 两种类型。Rust 默认会将未标注类型的浮点数推导为 <code>f64</code>。整数会推导为 <code>i32</code>。</p><p><strong>字符类型</strong><br>Rust 中，char 类型使用单引号指定，字符串类型使用双引号指定。</p><p>char 类型占用 <strong>4 个字节</strong>，是一个 Unicode 标量值。<br><code>let smile = &#39;😀&#39;;</code></p><h5 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h5><p>复合类型可以将多个<strong>不同类型</strong>的值组合成一个类型。Rust 内置两种复合类型，元组和数组。</p><h5 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h5><ul><li>元组每个位置上的值都有一个类型</li><li>元组拥有固定的长度。无法在声明结束后增加或减少其中的元素。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> tup: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了从元组中获取单个值，可以使用<strong>模式匹配</strong>来<strong>解构</strong>（拆包）元组。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> tup = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> (x, y, z) = tup;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The value of y is: &#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还可以通过索引使用点号访问元组中的元素。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> five_hundred = x.<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> six_point_four = x.<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> one = x.<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><ul><li>数组中的所有元素都必须是相同的类型</li><li>数组拥有固定的长度，一旦声明就无法更改大小</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> months = [</span><br><span class="line">        <span class="string">"January"</span>,</span><br><span class="line">        <span class="string">"February"</span>,</span><br><span class="line">        <span class="string">"March"</span>,</span><br><span class="line">        <span class="string">"April"</span>,</span><br><span class="line">        <span class="string">"May"</span>,</span><br><span class="line">        <span class="string">"June"</span>,</span><br><span class="line">        <span class="string">"July"</span>,</span><br><span class="line">        <span class="string">"August"</span>,</span><br><span class="line">        <span class="string">"September"</span>,</span><br><span class="line">        <span class="string">"October"</span>,</span><br><span class="line">        <span class="string">"November"</span>,</span><br><span class="line">        <span class="string">"December"</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组的类型标注：<code>let a: [i32; 5] = [1, 2, 3, 4, 5];</code></p><p>初始化含有相同元素的数组：<code>let a = [3; 5];</code><br>等价于 <code>let a = [3, 3, 3, 3, 3];</code></p><p><strong>数组由一整块分配在栈上的内存组成，可以通过索引访问数组中的元素。</strong><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> first = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> second = a[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h4><p><strong>必须显式地声明每个参数（如果有）的数据类型</strong>。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    another_function(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">another_function</span></span>(x: <span class="built_in">i32</span>, y: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The value of x is: &#123;&#125;"</span>, x);</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The value of y is: &#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Rust 是一门基于<strong>表达式</strong>的语言。它将<strong>语句（statement）</strong>与<strong>表达式（expression）</strong>区分为两个不同的概念。</p><p>如使用 <code>let</code> 关键字创建变量并绑定值时的指令就是一条语句：<br><code>let y = 6;</code><br><strong>语句不会返回值</strong>。</p><p>在 C 或 Ruby 语言里，赋值语句会返回所赋的值。因此可以使用 <code>x = y =6</code> 这样的语句，但 Rust 不支持这样的语法。</p><p><strong>表达式会计算出某个值作为结果返回</strong>。<br>如 <code>5 + 6</code> 就是表达式（返回 11），<code>let y = 6</code> 中的数字 6 也是表达式（返回 6 本身）。<br>表达式本身可以作为语句的一部分。<br>用来创建新作用域的<strong>大括号也是表达式</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> y = &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The value of y is: &#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>let y =</code> 后面大括号部分的内容就是一个表达式，它会将计算出的结果 4 作为返回值。该返回值接着通过赋值语句绑定给变量 <code>y</code>。<br>结尾处的 <code>x + 1</code> 并没有添加分号。若加上分号，则这段代码就变成了语句而不会返回任何值。</p><p><strong>函数可以向调用它的代码返回值。但需要在箭头后面声明值的类型</strong>。<br>可以使用 <code>return</code> 关键字指定一个值提前从函数中返回，但<strong>大多数函数都隐式地返回了最后的表达式</strong>。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = plus_one(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The value of x is: &#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">plus_one</span></span>(x: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码会输出 6。但如果在 <code>plus_one</code> 函数末尾的 <code>x + 1</code> 处加上分号，该表达式就会变成语句（不返回任何值），最终在编译时报出 <strong>mismatched types</strong> 错误。<br>原因是 <code>plus_one</code> 的声明中指定返回值类型为 <code>i32</code>，但由于语句不返回任何值，Rust 默认返回了一个空元组（<code>()</code>），导致实际的返回值类型与函数定义产生了冲突。</p><h4 id="四、控制流"><a href="#四、控制流" class="headerlink" title="四、控制流"></a>四、控制流</h4><h5 id="if-表达式"><a href="#if-表达式" class="headerlink" title="if 表达式"></a>if 表达式</h5><p><strong>if 表达式必须产生一个 bool 类型的值，否则会触发编译错误</strong>。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> number &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">"number was three"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面的代码中，if 表达式的计算结果为 3，而 Rust 期望获得一个 bool 值，因此编译时会爆出 mismatched types 错误。<br><strong>Rust 不会自动尝试将非布尔值转换为布尔类型</strong>。</p><p><strong>if 是一个表达式</strong>。可以在 <code>let</code> 语句右侧使用 if 表达式来完成赋值。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> condition = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123;</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="number">6</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The value of number is &#123;&#125;"</span>, number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>整个 if 表达式的值取决于具体哪一个代码块得到了执行。因此，<strong>所有 if 分支可能返回的值都必须是同一种类型的</strong>。否则会触发编译错误。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> condition = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123;</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="string">"six"</span>    <span class="comment">// 错误，类型不匹配</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The value of number is &#123;&#125;"</span>, number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><p>Rust 提供了 3 种循环：<code>loop</code>、<code>while</code>、<code>for</code>。</p><p><strong>从 loop 循环中返回值</strong><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">loop</span> &#123;</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"The result is &#123;&#125;"</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>break</code> 关键字中断循环并返回 <code>counter * 2</code>。</p><p><strong>while 循环</strong><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> number = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> number != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;!"</span>, number);</span><br><span class="line"></span><br><span class="line">        number = number - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"LIFTOFF!!!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>for 循环遍历集合中的元素</strong><br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> a.iter() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"the value is: &#123;&#125;"</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>for 循环重构前面使用 while 循环的代码<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>).rev() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;!"</span>, number);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"LIFTOFF!!!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://doc.rust-lang.org/book/" target="_blank" rel="noopener">The Rust Programming Language</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、变量&quot;&gt;&lt;a href=&quot;#一、变量&quot; class=&quot;headerlink&quot; title=&quot;一、变量&quot;&gt;&lt;/a&gt;一、变量&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Rust 中的变量默认是不可变的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;可以通过如下代码测试变量的不可变性：&lt;/
      
    
    </summary>
    
      <category term="Rust" scheme="https://rollingstarky.github.io/categories/Rust/"/>
    
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="Function" scheme="https://rollingstarky.github.io/tags/Function/"/>
    
      <category term="Programming" scheme="https://rollingstarky.github.io/tags/Programming/"/>
    
      <category term="Basic" scheme="https://rollingstarky.github.io/tags/Basic/"/>
    
      <category term="Rust" scheme="https://rollingstarky.github.io/tags/Rust/"/>
    
      <category term="Variable" scheme="https://rollingstarky.github.io/tags/Variable/"/>
    
      <category term="Loop" scheme="https://rollingstarky.github.io/tags/Loop/"/>
    
  </entry>
  
  <entry>
    <title>Vim 8.1 懒人配置手册（包含 C/C++、Python、Rust 自动补全，基于 coc.nvim）</title>
    <link href="https://rollingstarky.github.io/2021/05/30/vim-configuration-with-coc-support-rust-c-python-complete/"/>
    <id>https://rollingstarky.github.io/2021/05/30/vim-configuration-with-coc-support-rust-c-python-complete/</id>
    <published>2021-05-29T16:00:00.000Z</published>
    <updated>2021-05-30T04:11:52.734Z</updated>
    
    <content type="html"><![CDATA[<p>先说点废话。</p><p>最近装了 WSL2，想着作为 Win10 内置的 Linux 系统，应该比一般的虚拟机要来得平滑一些。毕竟虚拟机还要装 Virtualbox，每次开机还要多点几下，还要等它启动。怕麻烦。。。</p><p>可能习惯问题，喜欢在 Linux 下配置开发环境（学习写代码）。总感觉 Windows 上略显磨叽了一些。也许我道行不够。碰到需要编译的东西，一套工具装起来过于繁琐，直接 <code>sudo apt install gcc</code> 不香吗。</p><p>可惜 WSL 没有桌面支持，装不上 Vscode。对于工具的选择，我的原则是简单够用就好，Vscode 即是目前我的最爱（非重度编码）。<br>开箱即用，功能满足基本需求。无非代码高亮、自动补全、查看定义、语法检查、代码格式化，再加个跳转。</p><p>于是决定在 Windows 系统上安装 Vscode，借助 Remote WSL 插件“远程”编码。可惜有 BUG，一直不能正常工作。Github 上提了 issue，没人理。无奈转向 Vim。</p><p>一开始用的补全插件是 YouCompleteMe，还要编译。虽然敲个命令就能自动执行，但光 Rust 支持就在本地给我搞了将近 1G 的文件，不太能忍。网上查了下，貌似已经很老的机制了。于是转向较新一点的 <a href="https://github.com/neoclide/coc.nvim" target="_blank" rel="noopener">coc.nvim</a>。据说支持各种 <strong>LSP</strong>（这个缩写。。。），也不懂，能用就行。</p><p>废话结束。</p><h4 id="一、效果截图"><a href="#一、效果截图" class="headerlink" title="一、效果截图"></a>一、效果截图</h4><p><img src="https://upload-images.jianshu.io/upload_images/6875152-bce3edb12a0512e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Rust"></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-2f240a19b109d409.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Python"></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-95c01dea41212ed7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="C++"></p><h4 id="二、NERDTree-文件浏览器"><a href="#二、NERDTree-文件浏览器" class="headerlink" title="二、NERDTree 文件浏览器"></a>二、NERDTree 文件浏览器</h4><p><a href="https://www.vim.org/" target="_blank" rel="noopener">vim</a> 用的自带的 8.1 版本，有内置的插件管理。一般的插件安装流程是直接将插件源代码 clone 到 <code>~/.vim/pack/vendor/start</code> 路径下（没有就创建），再在 vim 中运行 <code>:helptags ~/.vim/pack/vendor/start/someplugin/doc</code> 命令生成帮助文档（这一步可选）。</p><p>vim 会自动检测已经下载的插件。<code>vendor</code> 路径下可以有 <code>start</code> 和 <code>opt</code> 两个目录，<code>start</code> 路径下的插件会在 vim 启动时自动加载，<code>opt</code> 路径下的插件则需要通过 <code>:packadd</code> 命令手动加载。</p><p><code>vendor</code> 也可以是其他名称，同位置下也可以有多个相同结构的目录，方便对不同类型的插件分别进行管理。<br>省事起见，这里所有的插件都放在 <code>~/.vim/pack/vendor/start</code> 下面。</p><p>NERDTree 文件浏览器插件安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.vim/pack/vendor/start</span><br><span class="line">git clone https://github.com/scrooloose/nerdtree</span><br></pre></td></tr></table></figure></p><p>在 <code>~/.vimrc</code> 文件中添加配置：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" 进入 vim 时自动开启 NERDTree</span></span><br><span class="line"><span class="keyword">autocmd</span> VimEnter * NERDTree | <span class="keyword">wincmd</span> <span class="keyword">p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 若关闭某个 buff 后 NERDTree 是仅剩的最后一个 buff，则自动关闭 NERDTree</span></span><br><span class="line"><span class="keyword">autocmd</span> BufEnter * <span class="keyword">if</span> <span class="built_in">tabpagenr</span>(<span class="string">'$'</span>) == <span class="number">1</span> &amp;&amp; <span class="built_in">winnr</span>(<span class="string">'$'</span>) == <span class="number">1</span> &amp;&amp; <span class="built_in">exists</span>(<span class="string">'b:NERDTree'</span>) &amp;&amp; <span class="variable">b:NERDTree</span>.isTabTree() | <span class="keyword">quit</span> | <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 使用 Ctrl+n 快捷键打开或关闭 NERDTree</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-n&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure></p><p>更多配置选项参考 <a href="https://vimawesome.com/plugin/nerdtree-red" target="_blank" rel="noopener">VimAwesome</a></p><h4 id="三、vim-airline-与配色"><a href="#三、vim-airline-与配色" class="headerlink" title="三、vim-airline 与配色"></a>三、vim-airline 与配色</h4><p>安装 vim-airline 状态栏美化插件：<br><code>git clone https://github.com/vim-airline/vim-airline</code></p><p>关于配色，萝卜青菜各有所爱。懒得去一个一个试。<br>准备了两套，vim-one 深色和 gruvbox 浅色。</p><p>vim-one 插件安装：<br><code>git clone https://github.com/rakr/vim-one</code></p><p>添加配置：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" 深色背景</span></span><br><span class="line"><span class="keyword">set</span> bg=dark</span><br><span class="line"></span><br><span class="line"><span class="comment">" 启用 one 配色</span></span><br><span class="line"><span class="keyword">colorscheme</span> one</span><br></pre></td></tr></table></figure></p><p>效果截图：<img src="https://upload-images.jianshu.io/upload_images/6875152-46db9d19ef58a4b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vim-one dark"></p><p>安装 gruvbox 插件：<br><code>git clone https://github.com/morhetz/gruvbox</code></p><p>修改配置文件（注释掉 <code>colorscheme one</code>）：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> bg=light</span><br><span class="line"><span class="comment">" colorscheme one</span></span><br><span class="line"><span class="keyword">autocmd</span> vimenter * ++nested <span class="keyword">colorscheme</span> gruvbox</span><br></pre></td></tr></table></figure></p><p>效果截图：<img src="https://upload-images.jianshu.io/upload_images/6875152-8affb9a9151b9816.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gruvbox light"></p><p>更复杂的配置可自行在 <a href="https://vimawesome.com/" target="_blank" rel="noopener">VimAwesome</a> 搜索对应的插件，或者进入相应的 Github 主页查看。</p><h4 id="四、coco-nvim-代码补全与语法检查"><a href="#四、coco-nvim-代码补全与语法检查" class="headerlink" title="四、coco.nvim 代码补全与语法检查"></a>四、coco.nvim 代码补全与语法检查</h4><p>安装  <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs</a> &gt;= 10.12，官网上写的是通过 <code>curl -sL install-node.now.sh/lts | bash</code> 命令安装。我个人建议使用 <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a> 安装最新的 lts 版本。此处不赘述。</p><p>安装 coc.nvim 插件：<br><code>git clone https://github.com/neoclide/coc.nvim.git</code></p><p>为了得到某种编程语言的补全功能，还需要安装对应语言的 coc 扩展以及代码补全后端（LSP）。<br>比如 C/C++ 对应的 coc 扩展为 <a href="https://github.com/clangd/coc-clangd" target="_blank" rel="noopener">coc-clangd</a>，LSP 为 <code>clangd</code>。两个都需要。</p><p>安装 coc 扩展的方法非常简单，进入 vim 后运行 <code>:CocInstall extension_name</code> 命令即可。<br>比如使用 <code>:CocInstall coc-clangd</code> 命令安装 <code>coc-clangd</code> 扩展。coc 扩展我遇到的都比较小，安装非常迅速，也会单独开一个窗口显示进度信息。</p><p>coc 扩展安装完成后，打开对应的源代码文件，比如 <code>vim test.c</code>，vim 就会自动在本地环境中寻找对应的 LSP（C/C++ 语言是 <code>clangd</code>）。</p><p>若 <code>clangd</code> 此时并未安装，vim 就会提示你运行某个命令（在 vim 内部）自动安装该依赖。这里有个坑。<br>不知道是不是网络的问题，我复制运行了 vim 提供的命令，一直显示下载中，几个小时不见下载完成。。。</p><p>好在可以手动安装 <code>clangd</code>，退出 vim 直接运行 <code>sudo apt install clangd</code> 即可。<br>此时 coc.nvim 对于 C/C++ 的补全支持即安装配置完成。</p><h5 id="Rust-和-Python-语言支持"><a href="#Rust-和-Python-语言支持" class="headerlink" title="Rust 和 Python 语言支持"></a>Rust 和 Python 语言支持</h5><p>对于 Rust 语言，需要先安装 <a href="https://github.com/fannheyward/coc-rust-analyzer" target="_blank" rel="noopener">coc-rust-analyzer</a> 扩展：<br><code>:CocInstall coc-rust-analyzer</code><br>这一步简单迅速。</p><p>安装 <code>rust-src</code>：<code>rustup component add rust-src</code></p><p>接着还必须安装针对 Rust 的 LSP（<code>rust-analyzer</code>）。鉴于安装 <code>clangd</code> 时出现的曲折，我决定手动安装 <code>rust-analyzer</code>。诡异的事情发生了。手动安装的可执行程序不被 coc 识别。<br>无奈下尝试 vim 中的自动安装居然成功了。。。</p><p>方法是用 vim 新建任意一个 rust 源文件（<code>vim test.rs</code>），vim 会自动弹出提示，找不到 <code>rust-analyzer</code>，是否自动安装，选择 <code>Yes</code> 即可。这里的安装过程居然异乎寻常的快。<br>安装完成后可能不会立即生效，会尝试创建索引。多打开几个文件试试。</p><p>至于 Python，安装 <a href="https://github.com/fannheyward/coc-pyright" target="_blank" rel="noopener">coc-pyright</a>：<br><code>:CocInstall coc-pyright</code></p><p>印象中并没有做其他操作，对于 Python 的支持就自动生效了，也许是安装扩展的时候自动安装了对应的 LSP。</p><p>对于其他语言的支持，可参考 <a href="https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions" target="_blank" rel="noopener">Using coc extensions</a>。</p><p>coc.nvim 示例配置（从官方 Github 上 copy 的，主要是一些快捷键的映射，可根据需求删减。没细看）：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" Set internal encoding of vim, not needed on neovim, since coc.nvim using some</span></span><br><span class="line"><span class="comment">" unicode characters in the file autoload/float.vim</span></span><br><span class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" TextEdit might fail if hidden is not set.</span></span><br><span class="line"><span class="keyword">set</span> hidden</span><br><span class="line"></span><br><span class="line"><span class="comment">" Some servers have issues with backup files, see #649.</span></span><br><span class="line"><span class="keyword">set</span> nobackup</span><br><span class="line"><span class="keyword">set</span> nowritebackup</span><br><span class="line"></span><br><span class="line"><span class="comment">" Give more space for displaying messages.</span></span><br><span class="line"><span class="keyword">set</span> cmdheight=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable</span></span><br><span class="line"><span class="comment">" delays and poor user experience.</span></span><br><span class="line"><span class="keyword">set</span> updatetime=<span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Don't pass messages to |ins-completion-menu|.</span></span><br><span class="line"><span class="keyword">set</span> shortmess+=<span class="keyword">c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Always show the signcolumn, otherwise it would shift the text each time</span></span><br><span class="line"><span class="comment">" diagnostics appear/become resolved.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">"nvim-0.5.0"</span>) || <span class="built_in">has</span>(<span class="string">"patch-8.1.1564"</span>)</span><br><span class="line">  <span class="comment">" Recently vim can merge signcolumn and number column into one</span></span><br><span class="line">  <span class="keyword">set</span> signcolumn=<span class="keyword">number</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">set</span> signcolumn=yes</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Use tab for trigger completion with characters ahead and navigate.</span></span><br><span class="line"><span class="comment">" <span class="doctag">NOTE:</span> Use command ':verbose imap &lt;tab&gt;' to make sure tab is not mapped by</span></span><br><span class="line"><span class="comment">" other plugin before putting this into your config.</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;TAB&gt;</span></span><br><span class="line">      \ <span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;C-n&gt;"</span> :</span><br><span class="line">      \ <span class="symbol">&lt;SID&gt;</span>check_back_space() ? <span class="string">"\&lt;TAB&gt;"</span> :</span><br><span class="line">      \ coc#refresh()</span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span><span class="symbol">&lt;S-TAB&gt;</span> <span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;C-p&gt;"</span> : <span class="string">"\&lt;C-h&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">s</span>:<span class="title">check_back_space</span><span class="params">()</span> <span class="title">abort</span></span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">col</span> = <span class="keyword">col</span>(<span class="string">'.'</span>) - <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> !col || <span class="built_in">getline</span>(<span class="string">'.'</span>)[<span class="keyword">col</span> - <span class="number">1</span>]  =~# <span class="string">'\s'</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Use &lt;c-space&gt; to trigger completion.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">'nvim'</span>)</span><br><span class="line">  <span class="keyword">inoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;c-space&gt;</span> coc#refresh()</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">inoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;expr&gt;</span> &lt;<span class="keyword">c</span>-@&gt; coc#refresh()</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Make &lt;CR&gt; auto-select the first completion item and notify coc.nvim to</span></span><br><span class="line"><span class="comment">" format on enter, &lt;cr&gt; could be remapped by other vim plugin</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;cr&gt;</span> <span class="built_in">pumvisible</span>() ? coc#_select_confirm()</span><br><span class="line">                              \: <span class="string">"\&lt;C-g&gt;u\&lt;CR&gt;\&lt;c-r&gt;=coc#on_enter()\&lt;CR&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Use `[g` and `]g` to navigate diagnostics</span></span><br><span class="line"><span class="comment">" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> [g <span class="symbol">&lt;Plug&gt;</span>(coc-diagnostic-<span class="keyword">prev</span>)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> ]g <span class="symbol">&lt;Plug&gt;</span>(coc-diagnostic-<span class="keyword">next</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">" GoTo code navigation.</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> gd <span class="symbol">&lt;Plug&gt;</span>(coc-definition)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> gy <span class="symbol">&lt;Plug&gt;</span>(coc-<span class="built_in">type</span>-definition)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> gi <span class="symbol">&lt;Plug&gt;</span>(coc-implementation)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="keyword">gr</span> <span class="symbol">&lt;Plug&gt;</span>(coc-references)</span><br><span class="line"></span><br><span class="line"><span class="comment">" Use K to show documentation in preview window.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span> K :<span class="keyword">call</span> <span class="symbol">&lt;SID&gt;</span>show_documentation()<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">s</span>:<span class="title">show_documentation</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">index</span>([<span class="string">'vim'</span>,<span class="string">'help'</span>], &amp;<span class="keyword">filetype</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">execute</span> <span class="string">'h '</span>.<span class="built_in">expand</span>(<span class="string">'&lt;cword&gt;'</span>)</span><br><span class="line">  <span class="keyword">elseif</span> (coc#rpc#ready())</span><br><span class="line">    <span class="keyword">call</span> CocActionAsync(<span class="string">'doHover'</span>)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">execute</span> <span class="string">'!'</span> . &amp;keywordprg . <span class="string">" "</span> . <span class="built_in">expand</span>(<span class="string">'&lt;cword&gt;'</span>)</span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Highlight the symbol and its references when holding the cursor.</span></span><br><span class="line"><span class="keyword">autocmd</span> CursorHold * <span class="keyword">silent</span> <span class="keyword">call</span> CocActionAsync(<span class="string">'highlight'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">" Symbol renaming.</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>rn <span class="symbol">&lt;Plug&gt;</span>(coc-<span class="built_in">rename</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">" Formatting selected code.</span></span><br><span class="line"><span class="keyword">xmap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">f</span>  <span class="symbol">&lt;Plug&gt;</span>(coc-format-selected)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">f</span>  <span class="symbol">&lt;Plug&gt;</span>(coc-format-selected)</span><br><span class="line"></span><br><span class="line"><span class="keyword">augroup</span> mygroup</span><br><span class="line">  autocmd!</span><br><span class="line">  <span class="comment">" Setup formatexpr specified filetype(s).</span></span><br><span class="line">  <span class="keyword">autocmd</span> FileType typescript,json <span class="keyword">setl</span> formatexpr=CocAction(<span class="string">'formatSelected'</span>)</span><br><span class="line">  <span class="comment">" Update signature help on jump placeholder.</span></span><br><span class="line">  <span class="keyword">autocmd</span> User CocJumpPlaceholder <span class="keyword">call</span> CocActionAsync(<span class="string">'showSignatureHelp'</span>)</span><br><span class="line"><span class="keyword">augroup</span> end</span><br><span class="line"></span><br><span class="line"><span class="comment">" Applying codeAction to the selected region.</span></span><br><span class="line"><span class="comment">" Example: `&lt;leader&gt;aap` for current paragraph</span></span><br><span class="line"><span class="keyword">xmap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">a</span>  <span class="symbol">&lt;Plug&gt;</span>(coc-codeaction-selected)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">a</span>  <span class="symbol">&lt;Plug&gt;</span>(coc-codeaction-selected)</span><br><span class="line"></span><br><span class="line"><span class="comment">" Remap keys for applying codeAction to the current buffer.</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>ac  <span class="symbol">&lt;Plug&gt;</span>(coc-codeaction)</span><br><span class="line"><span class="comment">" Apply AutoFix to problem on the current line.</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>qf  <span class="symbol">&lt;Plug&gt;</span>(coc-<span class="keyword">fix</span>-current)</span><br><span class="line"></span><br><span class="line"><span class="comment">" Map function and class text objects</span></span><br><span class="line"><span class="comment">" <span class="doctag">NOTE:</span> Requires 'textDocument.documentSymbol' support from the language server.</span></span><br><span class="line"><span class="keyword">xmap</span> <span class="keyword">if</span> <span class="symbol">&lt;Plug&gt;</span>(coc-funcobj-i)</span><br><span class="line"><span class="keyword">omap</span> <span class="keyword">if</span> <span class="symbol">&lt;Plug&gt;</span>(coc-funcobj-i)</span><br><span class="line"><span class="keyword">xmap</span> af <span class="symbol">&lt;Plug&gt;</span>(coc-funcobj-<span class="keyword">a</span>)</span><br><span class="line"><span class="keyword">omap</span> af <span class="symbol">&lt;Plug&gt;</span>(coc-funcobj-<span class="keyword">a</span>)</span><br><span class="line"><span class="keyword">xmap</span> ic <span class="symbol">&lt;Plug&gt;</span>(coc-classobj-i)</span><br><span class="line"><span class="keyword">omap</span> ic <span class="symbol">&lt;Plug&gt;</span>(coc-classobj-i)</span><br><span class="line"><span class="keyword">xmap</span> ac <span class="symbol">&lt;Plug&gt;</span>(coc-classobj-<span class="keyword">a</span>)</span><br><span class="line"><span class="keyword">omap</span> ac <span class="symbol">&lt;Plug&gt;</span>(coc-classobj-<span class="keyword">a</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">" Remap &lt;C-f&gt; and &lt;C-b&gt; for scroll float windows/popups.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">'nvim-0.4.0'</span>) || <span class="built_in">has</span>(<span class="string">'patch-8.2.0750'</span>)</span><br><span class="line">  <span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;C-f&gt;</span> coc#float#has_scroll() ? coc#float#scroll(<span class="number">1</span>) : <span class="string">"\&lt;C-f&gt;"</span></span><br><span class="line">  <span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;C-b&gt;</span> coc#float#has_scroll() ? coc#float#scroll(<span class="number">0</span>) : <span class="string">"\&lt;C-b&gt;"</span></span><br><span class="line">  <span class="keyword">inoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;C-f&gt;</span> coc#float#has_scroll() ? <span class="string">"\&lt;c-r&gt;=coc#float#scroll(1)\&lt;cr&gt;"</span> : <span class="string">"\&lt;Right&gt;"</span></span><br><span class="line">  <span class="keyword">inoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;C-b&gt;</span> coc#float#has_scroll() ? <span class="string">"\&lt;c-r&gt;=coc#float#scroll(0)\&lt;cr&gt;"</span> : <span class="string">"\&lt;Left&gt;"</span></span><br><span class="line">  <span class="keyword">vnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;C-f&gt;</span> coc#float#has_scroll() ? coc#float#scroll(<span class="number">1</span>) : <span class="string">"\&lt;C-f&gt;"</span></span><br><span class="line">  <span class="keyword">vnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;C-b&gt;</span> coc#float#has_scroll() ? coc#float#scroll(<span class="number">0</span>) : <span class="string">"\&lt;C-b&gt;"</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Use CTRL-S for selections ranges.</span></span><br><span class="line"><span class="comment">" Requires 'textDocument/selectionRange' support of language server.</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;C-s&gt;</span> <span class="symbol">&lt;Plug&gt;</span>(coc-<span class="built_in">range</span>-select)</span><br><span class="line"><span class="keyword">xmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;C-s&gt;</span> <span class="symbol">&lt;Plug&gt;</span>(coc-<span class="built_in">range</span>-select)</span><br><span class="line"></span><br><span class="line"><span class="comment">" Add `:Format` command to format current buffer.</span></span><br><span class="line">command! -nargs=<span class="number">0</span> Format :<span class="keyword">call</span> CocAction(<span class="string">'format'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">" Add `:Fold` command to fold current buffer.</span></span><br><span class="line">command! -nargs=? Fold :<span class="keyword">call</span>     CocAction(<span class="string">'fold'</span>, <span class="symbol">&lt;f-args&gt;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">" Add `:OR` command for organize imports of the current buffer.</span></span><br><span class="line">command! -nargs=<span class="number">0</span> OR   :<span class="keyword">call</span>     CocAction(<span class="string">'runCommand'</span>, <span class="string">'editor.action.organizeImport'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">" Add (Neo)Vim's native statusline support.</span></span><br><span class="line"><span class="comment">" <span class="doctag">NOTE:</span> Please see `:h coc-status` for integrations with external plugins that</span></span><br><span class="line"><span class="comment">" provide custom statusline: lightline.vim, vim-airline.</span></span><br><span class="line"><span class="keyword">set</span> statusline^=%&#123;coc#status()&#125;%&#123;<span class="built_in">get</span>(<span class="variable">b:</span>,<span class="string">'coc_current_function'</span>,<span class="string">''</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">" Mappings for CoCList</span></span><br><span class="line"><span class="comment">" Show all diagnostics.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">a</span>  :<span class="symbol">&lt;C-u&gt;</span>CocList diagnostics<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="comment">" Manage extensions.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">e</span>  :<span class="symbol">&lt;C-u&gt;</span>CocList extensions<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="comment">" Show commands.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">c</span>  :<span class="symbol">&lt;C-u&gt;</span>CocList commands<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="comment">" Find symbol of current document.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">o</span>  :<span class="symbol">&lt;C-u&gt;</span>CocList outline<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="comment">" Search workspace symbols.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span>s  :<span class="symbol">&lt;C-u&gt;</span>CocList -I symbols<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="comment">" Do default action for next item.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">j</span>  :<span class="symbol">&lt;C-u&gt;</span>CocNext<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">" Do default action for previous item.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">k</span>  :<span class="symbol">&lt;C-u&gt;</span>CocPrev<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">" Resume latest coc list.</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;nowait&gt;</span> <span class="symbol">&lt;space&gt;</span><span class="keyword">p</span>  :<span class="symbol">&lt;C-u&gt;</span>CocListResume<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="五、彩蛋"><a href="#五、彩蛋" class="headerlink" title="五、彩蛋"></a>五、彩蛋</h4><h5 id="smile"><a href="#smile" class="headerlink" title="smile"></a>smile</h5><p>在 vim 中运行 <code>:smile</code></p><p>效果：<img src="https://upload-images.jianshu.io/upload_images/6875152-bda45aec4856c64d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=":smile"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">:smile</span><br><span class="line">                            oooo$$$$$$$$$$$$oooo</span><br><span class="line">                        oo$$$$$$$$$$$$$$$$$$$$$$$$o</span><br><span class="line">                     oo$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o         o$   $$ o$</span><br><span class="line">     o $ oo        o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o       $$ $$ $$o$</span><br><span class="line">  oo $ $ &quot;$      o$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$o       $$$o$$o$</span><br><span class="line">  &quot;$$$$$$o$     o$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$o    $$$$$$$$</span><br><span class="line">    $$$$$$$    $$$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">    $$$$$$$$$$$$$$$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$$$$$$  &quot;&quot;&quot;$$$</span><br><span class="line">     &quot;$$$&quot;&quot;&quot;&quot;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     &quot;$$$</span><br><span class="line">      $$$   o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     &quot;$$$o</span><br><span class="line">     o$$&quot;   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$       $$$o</span><br><span class="line">     $$$    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$&quot; &quot;$$$$$$ooooo$$$$o</span><br><span class="line">    o$$$oooo$$$$$  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$   o$$$$$$$$$$$$$$$$$</span><br><span class="line">    $$$$$$$$&quot;$$$$   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     $$$$&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">   &quot;&quot;&quot;&quot;       $$$$    &quot;$$$$$$$$$$$$$$$$$$$$$$$$$$$$&quot;      o$$$</span><br><span class="line">              &quot;$$$o     &quot;&quot;&quot;$$$$$$$$$$$$$$$$$$&quot;$$&quot;         $$$</span><br><span class="line">                $$$o          &quot;$$&quot;&quot;$$$$$$&quot;&quot;&quot;&quot;           o$$$</span><br><span class="line">                 $$$$o                                o$$$&quot;</span><br><span class="line">                  &quot;$$$$o      o$$$$$$o&quot;$$$$o        o$$$$</span><br><span class="line">                    &quot;$$$$$oo     &quot;&quot;$$$$o$$$$$o   o$$$$&quot;&quot;</span><br><span class="line">                       &quot;&quot;$$$$$oooo  &quot;$$$o$$$$$$$$$&quot;&quot;&quot;</span><br><span class="line">                          &quot;&quot;$$$$$$$oo $$$$$$$$$$</span><br><span class="line">                                  &quot;&quot;&quot;&quot;$$$$$$$$$$$</span><br><span class="line">                                      $$$$$$$$$$$$</span><br><span class="line">                                       $$$$$$$$$$&quot;</span><br><span class="line">                                        &quot;$$$&quot;&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h5 id="Kill-Sheep-小游戏"><a href="#Kill-Sheep-小游戏" class="headerlink" title="Kill Sheep 小游戏"></a>Kill Sheep 小游戏</h5><p>针对 vim 8.2 版本，可在 Windows 系统中安装 <a href="https://www.vim.org/download.php" target="_blank" rel="noopener">gvim 8.2</a>。</p><p>进入 <code>C:\Users\xxx\vimfiles\pack\vendor\start</code> 路径下（没有就创建），clone 源代码：<br><code>git clone https://github.com/vim/killersheep.git</code></p><p>打开 gvim，最大化，运行 <code>:KillKillKill</code> 命令即可进入游戏。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-e6ba73150a202b42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="killer sheep"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先说点废话。&lt;/p&gt;
&lt;p&gt;最近装了 WSL2，想着作为 Win10 内置的 Linux 系统，应该比一般的虚拟机要来得平滑一些。毕竟虚拟机还要装 Virtualbox，每次开机还要多点几下，还要等它启动。怕麻烦。。。&lt;/p&gt;
&lt;p&gt;可能习惯问题，喜欢在 Linux 下配置
      
    
    </summary>
    
      <category term="Linux" scheme="https://rollingstarky.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://rollingstarky.github.io/tags/Linux/"/>
    
      <category term="Tools" scheme="https://rollingstarky.github.io/tags/Tools/"/>
    
      <category term="Configuration" scheme="https://rollingstarky.github.io/tags/Configuration/"/>
    
      <category term="Vim" scheme="https://rollingstarky.github.io/tags/Vim/"/>
    
      <category term="Editor" scheme="https://rollingstarky.github.io/tags/Editor/"/>
    
      <category term="Rust" scheme="https://rollingstarky.github.io/tags/Rust/"/>
    
      <category term="IDE" scheme="https://rollingstarky.github.io/tags/IDE/"/>
    
      <category term="Completer" scheme="https://rollingstarky.github.io/tags/Completer/"/>
    
  </entry>
  
  <entry>
    <title>Windows Terminal 美化（wsl2、zsh、天气、数字时钟、ASCII Logo、彩色动画）</title>
    <link href="https://rollingstarky.github.io/2021/05/26/windows-terminal-beautify-wsl2-weather-digital-clock-splash-animation/"/>
    <id>https://rollingstarky.github.io/2021/05/26/windows-terminal-beautify-wsl2-weather-digital-clock-splash-animation/</id>
    <published>2021-05-25T16:00:00.000Z</published>
    <updated>2021-05-26T12:33:32.776Z</updated>
    
    <content type="html"><![CDATA[<p>上次用 <strong>WSL</strong>（Windows Subsystem for Linux）要追溯到好几年前了。当时 WSL 刚出来不久，抱着尝鲜的态度试着装了，想着万一能用，就不用装虚拟机了。</p><p>结果遇到了 BUG，就再也没用过。最近才听说 WSL2 已经有了，类似虚拟机的机制，好用很多。再次装来试试，目前还没遇到啥问题。记录下初始的美化步骤。</p><h4 id="一、效果截图"><a href="#一、效果截图" class="headerlink" title="一、效果截图"></a>一、效果截图</h4><p><strong>天气、日历、数字时钟、Linux 发行版的 logo、系统信息</strong><br><img src="https://upload-images.jianshu.io/upload_images/6875152-94fa6accaa42f4b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="weather-calendar-clock-logo-sysinfo"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Weather report: Hangzhou                May 2021</span><br><span class="line">                                  Su Mo Tu We Th Fr Sa       ┌────────────────────────────┐</span><br><span class="line">    _`/&quot;&quot;.-.     Rain shower, mist                   1       │   ┏━┓┏━┓ ┏━┓┏━┓   ┏━┓┏┳┓   │</span><br><span class="line">     ,\_(   ).   21 °C             2  3  4  5  6  7  8       │   ┃┃┃┣━┓╹┃┃┃┣━┓   ┣━┛┃┃┃   │</span><br><span class="line">      /(___(__)  ↓ 15 km/h         9 10 11 12 13 14 15       │   ┗━┛┗━┛╹┗━┛┗━┛   ╹  ╹ ╹   │</span><br><span class="line">        ‘ ‘ ‘ ‘  3 km             16 17 18 19 20 21 22       └────────────────────────────┘</span><br><span class="line">       ‘ ‘ ‘ ‘   0.8 mm           23 24 25 26 27 28 29</span><br><span class="line">                                  30 31</span><br><span class="line"></span><br><span class="line">    _-`````-,           ,- &apos;- .       starky@xxxxxx</span><br><span class="line">  .&apos;   .- - |          | - -.  `.     ----------------</span><br><span class="line"> /.&apos;  /                     `.   \    OS: Ubuntu 20.04.2 LTS on Windows 10 x86_64</span><br><span class="line">:/   :      _...   ..._      ``   :   Kernel: 5.4.72-microsoft-standard-WSL2</span><br><span class="line">::   :     /._ .`:&apos;_.._\.    ||   :   Uptime: 38 mins</span><br><span class="line">::    `._ ./  ,`  :    \ . _.&apos;&apos;   .   Packages: 736 (dpkg)</span><br><span class="line">`:.      /   |  -.  \-. \_      /     Shell: zsh 5.8</span><br><span class="line">  \:._ _/  .&apos;   .@)  \@) ` `\ ,.&apos;     Terminal: /dev/pts/0</span><br><span class="line">     _/,--&apos;       .- .\,-.`--`.       CPU: Intel i7-10850H (12) @ 2.712GHz</span><br><span class="line">       ,&apos;/&apos;&apos;     (( \ `  )            Memory: 118MiB / 12466MiB (0%)</span><br><span class="line">        /&apos;/&apos;  \    `-&apos;  (             CPU Usage: 1%</span><br><span class="line">         &apos;/&apos;&apos;  `._,-----&apos;             Disk (/): 3.3G / 251G (2%)</span><br><span class="line">          &apos;&apos;/&apos;    .,---&apos;              Battery1: 100% [Full]</span><br><span class="line">           &apos;&apos;/&apos;      ;:               Local IP: xx.xx.xx.xx</span><br><span class="line">             &apos;&apos;/&apos;&apos;  &apos;&apos;/               Public IP: xx.xx.xx.xx</span><br><span class="line">               &apos;&apos;/&apos;&apos;/&apos;&apos;</span><br><span class="line">                 &apos;/&apos;/&apos;</span><br><span class="line">                  `;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GNU</span><br></pre></td></tr></table></figure><p><strong>启动动画</strong><br><img src="https://upload-images.jianshu.io/upload_images/6875152-0d4935f9cd7d1897.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="splash animation"></p><p><strong>动图（加载慢）</strong><br><img src="https://upload-images.jianshu.io/upload_images/6875152-f69345a2d6fabaef.gif?imageMogr2/auto-orient/strip" alt="pipes"></p><h4 id="二、安装-WSL2-和-Windows-Terminal"><a href="#二、安装-WSL2-和-Windows-Terminal" class="headerlink" title="二、安装 WSL2 和 Windows Terminal"></a>二、安装 WSL2 和 Windows Terminal</h4><p>参考微软<strong>官方</strong>文档 <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">Windows Subsystem for Linux Installation Guide for Windows 10</a></p><p>很详细，不用再看其他文章了。</p><h4 id="三、oh-my-zsh"><a href="#三、oh-my-zsh" class="headerlink" title="三、oh-my-zsh"></a>三、oh-my-zsh</h4><p>进入 wsl，安装 <strong>zsh</strong>：<br><code>sudo apt update</code><br><code>sudo apt install zsh -y</code></p><p>安装 <strong>oh-my-zsh</strong>：<code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></p><p>安装 <strong>Powerline9k</strong> 主题：<code>git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</code></p><p>启用 Powerline9k 主题：编辑 <code>~/.zshrc</code> 配置文件，修改 <strong>ZSH_THEME</strong> 项的内容为 <code>ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</code></p><p>安装字体：访问 <a href="https://github.com/ryanoasis/nerd-fonts/releases" target="_blank" rel="noopener">nerd-fonts</a> 的 Github release 页，下载某种字体的压缩包（如 <code>JetBrainsMono.zip</code>），解压后在 Windows 系统上安装字体文件（有些时候可能需要使用管理员权限安装）</p><p>修改 Windows Terminal 的默认字体：<img src="https://upload-images.jianshu.io/upload_images/6875152-a84f2b661b58c39a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="fonts"></p><h4 id="四、oh-my-zh-插件"><a href="#四、oh-my-zh-插件" class="headerlink" title="四、oh-my-zh 插件"></a>四、oh-my-zh 插件</h4><p>安装 <strong>zsh-autosuggestions</strong>：<br><code>git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</code></p><p>安装 <strong>zsh-syntax-highlighting</strong>：<br><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code></p><p>启用插件（包含默认插件）：修改 <code>~/.zshrc</code> 配置文件的 <code>plugins</code> 项，内容如下（可按需添加或删减）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  cargo</span><br><span class="line">  command-not-found</span><br><span class="line">  docker</span><br><span class="line">  git</span><br><span class="line">  golang</span><br><span class="line">  npm</span><br><span class="line">  nvm</span><br><span class="line">  rust</span><br><span class="line">  sudo</span><br><span class="line">  systemd</span><br><span class="line">  web-search</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-30b1da8f2fd403e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="zsh-autosuggestions"><br>插件安装完成后，如上图中的情况，直接按键盘上的右方向键即可自动补全命令。</p><h4 id="五、neofetch-获取-Linux-发行版-ASCII-logo-和系统信息"><a href="#五、neofetch-获取-Linux-发行版-ASCII-logo-和系统信息" class="headerlink" title="五、neofetch 获取 Linux 发行版 ASCII logo 和系统信息"></a>五、neofetch 获取 Linux 发行版 ASCII logo 和系统信息</h4><p>安装 neofetch：<code>sudo apt install neofetch</code></p><p>效果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ neofetch --ascii_distro raspbian        </span><br><span class="line">  `.::///+:/-.        --///+//-:``    starky@xxxxxx</span><br><span class="line"> `+oooooooooooo:   `+oooooooooooo:    ----------------</span><br><span class="line">  /oooo++//ooooo:  ooooo+//+ooooo.    OS: Ubuntu 20.04.2 LTS on Windows 10 x86_64</span><br><span class="line">  `+ooooooo:-:oo-  +o+::/ooooooo:     Kernel: 5.4.72-microsoft-standard-WSL2</span><br><span class="line">   `:oooooooo+``    `.oooooooo+-      Uptime: 11 mins</span><br><span class="line">     `:++ooo/.        :+ooo+/.`       Packages: 736 (dpkg)</span><br><span class="line">        ...`  `.----.` ``..           Shell: zsh 5.8</span><br><span class="line">     .::::-``:::::::::.`-:::-`        Terminal: /dev/pts/0</span><br><span class="line">    -:::-`   .:::::::-`  `-:::-       CPU: Intel i7-10850H (12) @ 2.712GHz</span><br><span class="line">   `::.  `.--.`  `` `.---.``.::`      Memory: 107MiB / 12466MiB (0%)</span><br><span class="line">       .::::::::`  -::::::::` `       CPU Usage: 0%</span><br><span class="line"> .::` .:::::::::- `::::::::::``::.    Disk (/): 3.3G / 251G (2%)</span><br><span class="line">-:::` ::::::::::.  ::::::::::.`:::-   Battery1: 100% [Full]</span><br><span class="line">::::  -::::::::.   `-::::::::  ::::   Local IP: xx.xx.xx.xx</span><br><span class="line">-::-   .-:::-.``....``.-::-.   -::-   Public IP: xx.xx.xx.xx</span><br><span class="line"> .. ``       .::::::::.     `..`..</span><br><span class="line">   -:::-`   -::::::::::`  .:::::`</span><br><span class="line">   :::::::` -::::::::::` :::::::.</span><br><span class="line">   .:::::::  -::::::::. ::::::::</span><br><span class="line">    `-:::::`   ..--.`   ::::::.</span><br><span class="line">      `...`  `...--..`  `...`</span><br><span class="line">            .::::::::::</span><br><span class="line">             `.-::::-`</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-6c46aaa42e1aa0df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="neofetch --ascii_distro raspbian"></p><p><code>neofetch</code> 默认会输出当前系统的 logo，这里写个脚本（<code>random_distro.sh</code>）随机获取某个 Linux 发行版的 logo。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># random_distro.sh</span></span><br><span class="line">distro_list=(<span class="string">'Alpine'</span> <span class="string">'Anarchy'</span> <span class="string">'Android'</span> <span class="string">'Antergos'</span> <span class="string">'antiX'</span> <span class="string">'AOSC'</span> <span class="string">'ArcoLinux'</span> <span class="string">'ArchBox'</span> <span class="string">'ARCHlabs'</span> <span class="string">'ArchStrike'</span> <span class="string">'XFerience'</span> <span class="string">'ArchMerge'</span> <span class="string">'Arch'</span> <span class="string">'Artix'</span> <span class="string">'Arya'</span> <span class="string">'Bedrock'</span> <span class="string">'BlackArch'</span> <span class="string">'BLAG'</span> <span class="string">'BlankOn'</span> <span class="string">'BlueLight'</span> <span class="string">'bonsai'</span> <span class="string">'BSD'</span> <span class="string">'BunsenLabs'</span> <span class="string">'Calculate'</span> <span class="string">'Carbs'</span> <span class="string">'CentOS'</span> <span class="string">'Chakra'</span> <span class="string">'Chapeau'</span> <span class="string">'Chrom'</span> <span class="string">'Cleanjaro'</span> <span class="string">'ClearOS'</span> <span class="string">'Clear_Linux'</span> <span class="string">'Clover'</span> <span class="string">'Condres'</span> <span class="string">'Container_Linux'</span> <span class="string">'CRUX'</span> <span class="string">'Debian'</span> <span class="string">'Deepin'</span> <span class="string">'DesaOS'</span> <span class="string">'Devuan'</span> <span class="string">'DracOS'</span> <span class="string">'DragonFly'</span> <span class="string">'Drauger'</span> <span class="string">'Elementary'</span> <span class="string">'EndeavourOS'</span> <span class="string">'Endless'</span> <span class="string">'Exherbo'</span> <span class="string">'Fedora'</span> <span class="string">'Feren'</span> <span class="string">'FreeBSD'</span> <span class="string">'FreeMiNT'</span> <span class="string">'Frugalware'</span> <span class="string">'Funtoo'</span> <span class="string">'GalliumOS'</span> <span class="string">'Gentoo'</span> <span class="string">'Pentoo'</span> <span class="string">'GNU'</span> <span class="string">'GoboLinux'</span> <span class="string">'Grombyang'</span> <span class="string">'Guix'</span> <span class="string">'Haiku'</span> <span class="string">'Huayra'</span> <span class="string">'Hyperbola'</span> <span class="string">'janus'</span> <span class="string">'Kali'</span> <span class="string">'KaOS'</span> <span class="string">'KDE_neon'</span> <span class="string">'Kogaion'</span> <span class="string">'Korora'</span> <span class="string">'KSLinux'</span> <span class="string">'Kubuntu'</span> <span class="string">'LEDE'</span> <span class="string">'LFS'</span> <span class="string">'Linux_Lite'</span> <span class="string">'LMDE'</span> <span class="string">'Lubuntu'</span> <span class="string">'Lunar'</span> <span class="string">'macos'</span> <span class="string">'Mageia'</span> <span class="string">'Mandriva'</span> <span class="string">'Manjaro'</span> <span class="string">'Maui'</span> <span class="string">'Mer'</span> <span class="string">'Minix'</span> <span class="string">'LinuxMint'</span> <span class="string">'MX_Linux'</span> <span class="string">'Namib'</span> <span class="string">'Neptune'</span> <span class="string">'NetBSD'</span> <span class="string">'Netrunner'</span> <span class="string">'NixOS'</span> <span class="string">'Nurunner'</span> <span class="string">'NuTyX'</span> <span class="string">'OBRevenge'</span> <span class="string">'OpenBSD'</span> <span class="string">'OpenIndiana'</span> <span class="string">'OpenMandriva'</span> <span class="string">'OpenWrt'</span> <span class="string">'osmc'</span> <span class="string">'Oracle'</span> <span class="string">'Parabola'</span> <span class="string">'Pardus'</span> <span class="string">'Parrot'</span> <span class="string">'Parsix'</span> <span class="string">'TrueOS'</span> <span class="string">'PCLinuxOS'</span> <span class="string">'Peppermint'</span> <span class="string">'popos'</span> <span class="string">'Porteus'</span> <span class="string">'PostMarketOS'</span> <span class="string">'Puppy'</span> <span class="string">'PureOS'</span> <span class="string">'Qubes'</span> <span class="string">'Radix'</span> <span class="string">'Raspbian'</span> <span class="string">'Reborn_OS'</span> <span class="string">'Redstar'</span> <span class="string">'Redcore'</span> <span class="string">'Redhat'</span> <span class="string">'Refracted_Devuan'</span> <span class="string">'Rosa'</span> <span class="string">'sabotage'</span> <span class="string">'Sabayon'</span> <span class="string">'Sailfish'</span> <span class="string">'SalentOS'</span> <span class="string">'Scientific'</span> <span class="string">'Septor'</span> <span class="string">'SharkLinux'</span> <span class="string">'Siduction'</span> <span class="string">'SliTaz'</span> <span class="string">'SmartOS'</span> <span class="string">'Solus'</span> <span class="string">'Source_Mage'</span> <span class="string">'Sparky'</span> <span class="string">'Star'</span> <span class="string">'SteamOS'</span> <span class="string">'SunOS'</span> <span class="string">'openSUSE_Leap'</span> <span class="string">'openSUSE'</span> <span class="string">'SwagArch'</span> <span class="string">'Tails'</span> <span class="string">'Trisquel'</span> <span class="string">'Ubuntu-Budgie'</span> <span class="string">'Ubuntu-GNOME'</span> <span class="string">'Ubuntu-MATE'</span> <span class="string">'Ubuntu-Studio'</span> <span class="string">'Void'</span> <span class="string">'Obarun'</span> <span class="string">'windows10'</span> <span class="string">'Windows7'</span> <span class="string">'Xubuntu'</span>)</span><br><span class="line"></span><br><span class="line">length=<span class="variable">$&#123;#distro_list[@]&#125;</span></span><br><span class="line"></span><br><span class="line">distro=<span class="variable">$&#123;distro_list[$RANDOM % $length]&#125;</span></span><br><span class="line"></span><br><span class="line">neofetch --ascii_distro <span class="variable">$distro</span></span><br></pre></td></tr></table></figure></p><p>运行 <code>bash random_distro.sh</code> 即可获取随机的 Linux 发行版 logo。</p><p>为了使该脚本可以在 Terminal 启动时自动运行，可以添加如下一条命令到 <code>~/.zshrc</code> 配置文件末尾：<br><code>bash /path/to/random_distro.sh</code></p><h4 id="六、Shell-脚本显示天气和数字时钟"><a href="#六、Shell-脚本显示天气和数字时钟" class="headerlink" title="六、Shell 脚本显示天气和数字时钟"></a>六、Shell 脚本显示天气和数字时钟</h4><p><code>weather-clock.sh</code> 脚本从网上找的，没做改动（参考文章 <a href="https://askubuntu.com/questions/1020692/terminal-splash-screen-with-weather-calendar-time-sysinfo" target="_blank" rel="noopener">Terminal splash screen with Weather, Calendar, Time &amp; Sysinfo?</a>）。代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NAME: now</span></span><br><span class="line"><span class="comment"># PATH: $HOME/bin</span></span><br><span class="line"><span class="comment"># DESC: Display current weather, calendar and time</span></span><br><span class="line"><span class="comment"># CALL: Called from terminal or ~/.bashrc</span></span><br><span class="line"><span class="comment"># DATE: Apr 6, 2017. Modified: May 24, 2019.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UPDT: 2019-05-24 If Weather unavailable nicely formatted error message.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> To display all available toilet fonts use this one-liner:</span></span><br><span class="line"><span class="comment">#       for i in $&#123;TOILET_FONT_PATH:=/usr/share/figlet&#125;/*.&#123;t,f&#125;lf; do j=$&#123;i##*/&#125;; toilet -d "$&#123;i%/*&#125;" -f "$j" "$&#123;j%.*&#125;"; done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup for 92 character wide terminal</span></span><br><span class="line">DateColumn=34 <span class="comment"># Default is 27 for 80 character line, 34 for 92 character line</span></span><br><span class="line">TimeColumn=61 <span class="comment"># Default is 49 for   "   "   "   "    61 "   "   "   "</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Replace Edmonton with your city name, GPS, etc. See: curl wttr.in/:help</span></span><br><span class="line">curl wttr.in/Hangzhou?0 --silent --max-time 3 &gt; /tmp/now-weather</span><br><span class="line"><span class="comment"># Timeout #. Increase for slow connection---^</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">readarray</span> aWeather &lt; /tmp/now-weather</span><br><span class="line">rm -f /tmp/now-weather</span><br><span class="line"></span><br><span class="line"><span class="comment"># Was valid weather report found or an error message?</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$&#123;aWeather[0]&#125;</span>"</span> == <span class="string">"Weather report:"</span>* ]] ; <span class="keyword">then</span></span><br><span class="line">    WeatherSuccess=<span class="literal">true</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;aWeather[@]&#125;</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    WeatherSuccess=<span class="literal">false</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"+============================+"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"| Weather unavailable now!!! |"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"| Check reason with command: |"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"|                            |"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"| curl wttr.in/Edmonton?0    |"</span> <span class="comment"># Replace Edmonton with your city</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"|   --silent --max-time 3    |"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"+============================+"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" "</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">" "</span>                <span class="comment"># Pad blank lines for calendar &amp; time to fit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------- DATE -------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># calendar current month with today highlighted.</span></span><br><span class="line"><span class="comment"># colors 00=bright white, 31=red, 32=green, 33=yellow, 34=blue, 35=purple,</span></span><br><span class="line"><span class="comment">#        36=cyan, 37=white</span></span><br><span class="line"></span><br><span class="line">tput sc                 <span class="comment"># Save cursor position.</span></span><br><span class="line"><span class="comment"># Move up 9 lines</span></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> [ $((++i)) -lt 10 ]; <span class="keyword">do</span> tput cuu1; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$WeatherSuccess</span>"</span> == <span class="literal">true</span> ]] ; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># Depending on length of your city name and country name you will:</span></span><br><span class="line">    <span class="comment">#   1. Comment out next three lines of code. Uncomment fourth code line.</span></span><br><span class="line">    <span class="comment">#   2. Change subtraction value and set number of print spaces to match</span></span><br><span class="line">    <span class="comment">#      subtraction value. Then place comment on fourth code line.</span></span><br><span class="line">    Column=$((DateColumn - 10))</span><br><span class="line">    tput cuf <span class="variable">$Column</span>        <span class="comment"># Move x column number</span></span><br><span class="line">    <span class="comment"># Blank out ", country" with x spaces</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"          "</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    tput cuf <span class="variable">$DateColumn</span>    <span class="comment"># Position to column 27 for date display</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -h needed to turn off formating: https://askubuntu.com/questions/1013954/bash-substring-stringoffsetlength-error/1013960#1013960</span></span><br><span class="line">cal &gt; /tmp/terminal1</span><br><span class="line"><span class="comment"># -h not supported in Ubuntu 18.04. Use second answer: https://askubuntu.com/a/1028566/307523</span></span><br><span class="line">tr -<span class="built_in">cd</span> <span class="string">'\11\12\15\40\60-\136\140-\176'</span> &lt; /tmp/terminal1  &gt; /tmp/terminal</span><br><span class="line"></span><br><span class="line">CalLineCnt=1</span><br><span class="line">Today=$(date +<span class="string">"%e"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"\033[32m"</span>   <span class="comment"># color green -- see list above.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> IFS= <span class="built_in">read</span> -r Cal; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"%s"</span> <span class="string">"<span class="variable">$Cal</span>"</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$CalLineCnt</span> -gt 2 ]] ; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># See if today is on current line &amp; invert background</span></span><br><span class="line">        tput cub 22</span><br><span class="line">        <span class="keyword">for</span> (( j=0 ; j &lt;= 18 ; j += 3 )) ; <span class="keyword">do</span></span><br><span class="line">            Test=<span class="variable">$&#123;Cal:$j:2&#125;</span>            <span class="comment"># Current day on calendar line</span></span><br><span class="line">            <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$Test</span>"</span> == <span class="string">"<span class="variable">$Today</span>"</span> ]] ; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">"\033[7m"</span>        <span class="comment"># Reverse: [ 7 m</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">"%s"</span> <span class="string">"<span class="variable">$Today</span>"</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">"\033[0m"</span>        <span class="comment"># Normal: [ 0 m</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">"\033[32m"</span>       <span class="comment"># color green -- see list above.</span></span><br><span class="line">                tput cuf 1</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tput cuf 3</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    tput cud1               <span class="comment"># Down one line</span></span><br><span class="line">    tput cuf <span class="variable">$DateColumn</span>    <span class="comment"># Move 27 columns right</span></span><br><span class="line">    CalLineCnt=$((++CalLineCnt))</span><br><span class="line"><span class="keyword">done</span> &lt; /tmp/terminal</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"\033[00m"</span>           <span class="comment"># color -- bright white (default)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">tput rc                     <span class="comment"># Restore saved cursor position.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------- TIME --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">tput sc                 <span class="comment"># Save cursor position.</span></span><br><span class="line"><span class="comment"># Move up 8 lines</span></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> [ $((++i)) -lt 9 ]; <span class="keyword">do</span> tput cuu1; <span class="keyword">done</span></span><br><span class="line">tput cuf <span class="variable">$TimeColumn</span>    <span class="comment"># Move 49 columns right</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Do we have the toilet package?</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hash</span> toilet 2&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" <span class="variable">$(date +"%I:%M %P")</span> "</span> | \</span><br><span class="line">        toilet -f future --filter border &gt; /tmp/terminal</span><br><span class="line"><span class="comment"># Do we have the figlet package?</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">hash</span> figlet 2&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="comment">#    echo $(date +"%I:%M %P") | figlet &gt; /tmp/terminal</span></span><br><span class="line">    date +<span class="string">"%I:%M %P"</span> | figlet &gt; /tmp/terminal</span><br><span class="line"><span class="comment"># else use standard font</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">#    echo $(date +"%I:%M %P") &gt; /tmp/terminal</span></span><br><span class="line">    date +<span class="string">"%I:%M %P"</span> &gt; /tmp/terminal</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> IFS= <span class="built_in">read</span> -r Time; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"\033[01;36m"</span>    <span class="comment"># color cyan</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"%s"</span> <span class="string">"<span class="variable">$Time</span>"</span></span><br><span class="line">    tput cud1               <span class="comment"># Up one line</span></span><br><span class="line">    tput cuf <span class="variable">$TimeColumn</span>    <span class="comment"># Move 49 columns right</span></span><br><span class="line"><span class="keyword">done</span> &lt; /tmp/terminal</span><br><span class="line"></span><br><span class="line">tput rc                     <span class="comment"># Restore saved cursor position.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></p><p>运行效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ bash weather-clock.sh</span><br><span class="line">Weather report: Hangzhou                May 2021</span><br><span class="line">                                  Su Mo Tu We Th Fr Sa       ┌────────────────────────────┐</span><br><span class="line">    _`/&quot;&quot;.-.     Rain shower, mist                   1       │   ┏━┓┏━┓ ┏━┓┏━┓   ┏━┓┏┳┓   │</span><br><span class="line">     ,\_(   ).   21 °C             2  3  4  5  6  7  8       │   ┃┃┃┣━┓╹┃┃┃┗━┫   ┣━┛┃┃┃   │</span><br><span class="line">      /(___(__)  ↓ 15 km/h         9 10 11 12 13 14 15       │   ┗━┛┗━┛╹┗━┛┗━┛   ╹  ╹ ╹   │</span><br><span class="line">        ‘ ‘ ‘ ‘  3 km             16 17 18 19 20 21 22       └────────────────────────────┘</span><br><span class="line">       ‘ ‘ ‘ ‘   0.8 mm           23 24 25 26 27 28 29</span><br><span class="line">                                  30 31</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-4d563fc7479cc5bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="weather-clock"></p><p>其中获取天气的关键代码为 <code>curl wttr.in/Hangzhou?0 --silent --max-time 3</code>，可自行改为自己所在的城市。</p><p>同样，为了使 Terminal 在启动时能自动运行该脚本，在 <code>~/.zshrc</code> 配置文件的末尾（<code>random-distro.sh</code> 上面一行）添加如下内容：<br><code>bash /path/to/weather-clock.sh</code></p><p><strong>PS</strong>：数字时钟的正常显示需要依赖 <code>toilet</code> 软件。<br>安装 <code>toilet</code>：<code>sudo apt install toilet</code></p><h4 id="七、pipe-sh-生成-Terminal-启动动画"><a href="#七、pipe-sh-生成-Terminal-启动动画" class="headerlink" title="七、pipe.sh 生成 Terminal 启动动画"></a>七、pipe.sh 生成 Terminal 启动动画</h4><p>获取 <code>pipe.sh</code> 程序：<code>git clone https://github.com/pipeseroni/pipes.sh.git</code></p><p>提取项目中的 <code>pipes.sh/pipes.sh</code> 源文件到任意路径下。<br>为了使 Terminal 在启动时能自动运行该脚本，在 <code>~/.zshrc</code> 配置文件的末尾（weather-clock.sh 上面一行）添加如下内容：<br><code>bash /path/to/pipes.sh -p 5</code></p><p>运行效果：<img src="https://upload-images.jianshu.io/upload_images/6875152-2976132226d25aca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pipes.sh"></p><p>按下空格键可终止动画。</p><p>GIF 版本：<img src="https://upload-images.jianshu.io/upload_images/6875152-f69345a2d6fabaef.gif?imageMogr2/auto-orient/strip" alt="pipes"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上次用 &lt;strong&gt;WSL&lt;/strong&gt;（Windows Subsystem for Linux）要追溯到好几年前了。当时 WSL 刚出来不久，抱着尝鲜的态度试着装了，想着万一能用，就不用装虚拟机了。&lt;/p&gt;
&lt;p&gt;结果遇到了 BUG，就再也没用过。最近才听说 WS
      
    
    </summary>
    
      <category term="Linux" scheme="https://rollingstarky.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://rollingstarky.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="https://rollingstarky.github.io/tags/Shell/"/>
    
      <category term="Terminal" scheme="https://rollingstarky.github.io/tags/Terminal/"/>
    
      <category term="Zsh" scheme="https://rollingstarky.github.io/tags/Zsh/"/>
    
      <category term="Beautify" scheme="https://rollingstarky.github.io/tags/Beautify/"/>
    
      <category term="Neofetch" scheme="https://rollingstarky.github.io/tags/Neofetch/"/>
    
      <category term="Ascii Art" scheme="https://rollingstarky.github.io/tags/Ascii-Art/"/>
    
      <category term="Weather" scheme="https://rollingstarky.github.io/tags/Weather/"/>
    
  </entry>
  
  <entry>
    <title>Miniconda 和 poetry 搭建 Python 开发环境（支持多版本、依赖管理）</title>
    <link href="https://rollingstarky.github.io/2021/05/19/build-python-development-environment-with-miniconda-and-poetry/"/>
    <id>https://rollingstarky.github.io/2021/05/19/build-python-development-environment-with-miniconda-and-poetry/</id>
    <published>2021-05-18T16:00:00.000Z</published>
    <updated>2021-05-18T17:00:13.482Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于自己的日常习惯测试整理，通过 Windows 系统演示（Linux 系统操作步骤大同小异）。<a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener">Miniconda</a> 用来提供 <code>conda</code> 命令管理多个 Python 版本（如 Python 3.8、Python 3.9）；<a href="https://python-poetry.org/" target="_blank" rel="noopener">poetry</a> 则用来创建基于项目的虚拟环境，维护对应的包依赖关系。</p></blockquote><h4 id="一、效果演示"><a href="#一、效果演示" class="headerlink" title="一、效果演示"></a>一、效果演示</h4><p><code>conda</code> 命令查看安装的 Python 版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;conda env list</span><br><span class="line"># conda environments:</span><br><span class="line">#</span><br><span class="line">base                  *  C:\Users\xniu\Miniconda3</span><br><span class="line">python2.7.18             C:\Users\xniu\Miniconda3\envs\python2.7.18</span><br><span class="line">python3.9.4              C:\Users\xniu\Miniconda3\envs\python3.9.4</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-9b8721fa7a29c760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="conda env list"></p><p><code>poetry</code> 查看某个项目的包依赖关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\auto-test&gt;poetry show</span><br><span class="line">certifi  2020.12.5 Python package for providing Mozilla&apos;s CA Bundle.</span><br><span class="line">chardet  4.0.0     Universal encoding detector for Python 2 and 3</span><br><span class="line">idna     2.10      Internationalized Domain Names in Applications (IDNA)</span><br><span class="line">requests 2.25.1    Python HTTP for Humans.</span><br><span class="line">selenium 3.141.0   Python bindings for Selenium</span><br><span class="line">urllib3  1.26.4    HTTP library with thread-safe connection pooling, file post, and more.</span><br><span class="line"></span><br><span class="line">(python3.9.4) C:\Users\Administrator\projects\auto-test&gt;poetry show -t</span><br><span class="line">requests 2.25.1 Python HTTP for Humans.</span><br><span class="line">|-- certifi &gt;=2017.4.17</span><br><span class="line">|-- chardet &gt;=3.0.2,&lt;5</span><br><span class="line">|-- idna &gt;=2.5,&lt;3</span><br><span class="line">`-- urllib3 &gt;=1.21.1,&lt;1.27</span><br><span class="line">selenium 3.141.0 Python bindings for Selenium</span><br><span class="line">`-- urllib3 *</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-e8240c1acb75577f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="poetry show"></p><h4 id="二、安装-Miniconda"><a href="#二、安装-Miniconda" class="headerlink" title="二、安装 Miniconda"></a>二、安装 Miniconda</h4><p>Miniconda 软件提供了 <code>conda</code> 命令，可以用来创建基于不同 Python 版本的虚拟环境。</p><p>访问 <a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener">Miniconda 官网</a>，下载对应系统版本的安装包并安装。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-2c77ef6a30057998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="package"></p><p>安装完成后，添加 <code>conda</code> 命令的路径（安装目录下的 <code>Scripts</code> 目录）到 <strong>PATH</strong> 环境变量。其路径一般为 <code>C:\Users\xxx\Miniconda3\Scripts\</code>。</p><p>添加完成后，打开一个新的命令提示符，运行 <code>conda</code> 命令看是否有反应。</p><h5 id="创建基于不同-Python-版本的虚拟环境"><a href="#创建基于不同-Python-版本的虚拟环境" class="headerlink" title="创建基于不同 Python 版本的虚拟环境"></a>创建基于不同 Python 版本的虚拟环境</h5><p><code>conda create -n python3.9.4 python=3.9.4</code><br>上述命令会创建一个新的 Python 虚拟环境，并安装 Python 3.9.4。</p><p>其中 <code>-n</code> 选项用于指定该虚拟环境的名称，方便后续通过 <code>conda activate xxx</code> 启用该虚拟环境；<br><code>python=3.9.4</code> 命令用于安装指定版本的 Python 程序。</p><p>虚拟环境创建成功后，即可使用 <code>conda activate python3.9.4</code> 命令启用该虚拟环境。<br>此后在该命令提示符环境下任何 <code>python</code> 命令都会自动使用 Python3.9.4 执行。</p><p><code>conda env list</code> 命令可以查看现有的 Python 虚拟环境。</p><p><strong>PS</strong>：更多 <code>conda</code> 命令可参考 <a href="https://docs.conda.io/projects/conda/en/latest/commands.html" target="_blank" rel="noopener">Command reference</a>。</p><h4 id="三、安装-poetry"><a href="#三、安装-poetry" class="headerlink" title="三、安装 poetry"></a>三、安装 poetry</h4><p>poetry 的安装可参考 <a href="https://python-poetry.org/docs/#installation" target="_blank" rel="noopener">poetry 官方文档</a>。对于 Windows 系统可直接打开一个 PowerShell 窗口，运行以下命令：<br><code>(Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -UseBasicParsing).Content | python -</code></p><p>安装成功后，<code>poetry</code> 命令会自动添加到 PATH 环境变量中。</p><h5 id="创建基于项目的虚拟环境"><a href="#创建基于项目的虚拟环境" class="headerlink" title="创建基于项目的虚拟环境"></a>创建基于项目的虚拟环境</h5><p>打开一个新的命令提示符，使用 <code>conda activate python3.9.4</code> 命令激活某个 Python 版本。</p><p>进入到项目路径下，运行 <code>poetry init</code> 命令初始化配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry init</span><br><span class="line"></span><br><span class="line">This command will guide you through creating your pyproject.toml config.</span><br><span class="line"></span><br><span class="line">Package name [test-poetry]:</span><br><span class="line">Version [0.1.0]:</span><br><span class="line">Description []:</span><br><span class="line">Author [None, n to skip]:  n</span><br><span class="line">License []:</span><br><span class="line">Compatible Python versions [^3.9]:</span><br><span class="line"></span><br><span class="line">Would you like to define your main dependencies interactively? (yes/no) [yes] no</span><br><span class="line">Would you like to define your development dependencies interactively? (yes/no) [yes] no</span><br><span class="line">Generated file</span><br><span class="line"></span><br><span class="line">[tool.poetry]</span><br><span class="line">name = &quot;test-poetry&quot;</span><br><span class="line">version = &quot;0.1.0&quot;</span><br><span class="line">description = &quot;&quot;</span><br><span class="line">authors = [&quot;Your Name &lt;you@example.com&gt;&quot;]</span><br><span class="line"></span><br><span class="line">[tool.poetry.dependencies]</span><br><span class="line">python = &quot;^3.9&quot;</span><br><span class="line"></span><br><span class="line">[tool.poetry.dev-dependencies]</span><br><span class="line"></span><br><span class="line">[build-system]</span><br><span class="line">requires = [&quot;poetry-core&gt;=1.0.0&quot;]</span><br><span class="line">build-backend = &quot;poetry.core.masonry.api&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you confirm generation? (yes/no) [yes] yes</span><br></pre></td></tr></table></figure></p><p>上述操作会在项目目录下自动创建 <code>pyproject.toml</code> 配置文件，内容如下：<br><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"test-poetry"</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">"0.1.0"</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">""</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">"Your Name &lt;you@example.com&gt;"</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">python</span> = <span class="string">"^3.9"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dev-dependencies]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [<span class="string">"poetry-core&gt;=1.0.0"</span>]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">"poetry.core.masonry.api"</span></span><br></pre></td></tr></table></figure></p><p>使用 <code>poetry shell</code> 命令自动创建<strong>基于当前项目</strong>的虚拟环境并激活该环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry shell</span><br><span class="line">Creating virtualenv test-poetry-thSlgjIV-py3.9 in C:\Users\Administrator\AppData\Local\pypoetry\Cache\virtualenvs</span><br><span class="line">Spawning shell within C:\Users\Administrator\AppData\Local\pypoetry\Cache\virtualenvs\test-poetry-thSlgjIV-py3.9</span><br><span class="line">Microsoft Windows [Version 10.0.18363.1316]</span><br><span class="line">(c) 2019 Microsoft Corporation. All rights reserved.</span><br></pre></td></tr></table></figure></p><p>运行 <code>code .</code> 命令使用 VSCode 软件打开本项目，此时即可在 IDE 中切换到新创建的基于本项目的虚拟环境（VSCode 已经安装了 Python 插件）。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-14910e736377b051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VSCode"></p><h5 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h5><p><code>poetry add xxx</code> 命令可以用来在当前环境中安装某个依赖包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry add requests</span><br><span class="line">Using version ^2.25.1 for requests</span><br><span class="line"></span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies...</span><br><span class="line"></span><br><span class="line">Writing lock file</span><br><span class="line"></span><br><span class="line">Package operations: 5 installs, 0 updates, 0 removals</span><br><span class="line"></span><br><span class="line">  • Installing certifi (2020.12.5)</span><br><span class="line">  • Installing chardet (4.0.0)</span><br><span class="line">  • Installing idna (2.10)</span><br><span class="line">  • Installing urllib3 (1.26.4)</span><br><span class="line">  • Installing requests (2.25.1)</span><br></pre></td></tr></table></figure></p><p><code>poetry add xxx -D</code> 命令可以用来安装针对开发环境的某个依赖包（用 <code>poetry remove</code> 命令卸载此类包时也需要指定 <code>-D</code> 选项）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry add autopep8 -D</span><br><span class="line">Using version ^1.5.7 for autopep8</span><br><span class="line"></span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies...</span><br><span class="line"></span><br><span class="line">Writing lock file</span><br><span class="line"></span><br><span class="line">Package operations: 3 installs, 0 updates, 0 removals</span><br><span class="line"></span><br><span class="line">  • Installing pycodestyle (2.7.0)</span><br><span class="line">  • Installing toml (0.10.2)</span><br><span class="line">  • Installing autopep8 (1.5.7)</span><br></pre></td></tr></table></figure></p><p>同时，安装的依赖包信息也会自动添加到 <code>pyproject.toml</code> 配置文件中：<br><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"test-poetry"</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">"0.1.0"</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">""</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">"Your Name &lt;you@example.com&gt;"</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">python</span> = <span class="string">"^3.9"</span></span><br><span class="line"><span class="attr">requests</span> = <span class="string">"^2.25.1"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dev-dependencies]</span></span><br><span class="line"><span class="attr">autopep8</span> = <span class="string">"^1.5.7"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [<span class="string">"poetry-core&gt;=1.0.0"</span>]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">"poetry.core.masonry.api"</span></span><br></pre></td></tr></table></figure></p><p>后续配置新的环境时，<code>pyproject.toml</code> 可以发挥类似 <code>requirements.txt</code> 文件的作用。即借助此文件中的配置，可以直接使用 <code>peotry install</code> 命令自动安装文件中包含的依赖项。</p><h5 id="维护环境依赖"><a href="#维护环境依赖" class="headerlink" title="维护环境依赖"></a>维护环境依赖</h5><p>使用 <code>poetry show</code> 命令查看当前安装的依赖包列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry show</span><br><span class="line">autopep8    1.5.7     A tool that automatically formats Python code to conform to the PEP 8 style guide</span><br><span class="line">certifi     2020.12.5 Python package for providing Mozilla&apos;s CA Bundle.</span><br><span class="line">chardet     4.0.0     Universal encoding detector for Python 2 and 3</span><br><span class="line">idna        2.10      Internationalized Domain Names in Applications (IDNA)</span><br><span class="line">pycodestyle 2.7.0     Python style guide checker</span><br><span class="line">requests    2.25.1    Python HTTP for Humans.</span><br><span class="line">toml        0.10.2    Python Library for Tom&apos;s Obvious, Minimal Language</span><br><span class="line">urllib3     1.26.4    HTTP library with thread-safe connection pooling, file post, and more.</span><br></pre></td></tr></table></figure></p><p>使用 <code>poetry show -t</code> 命令查看当前环境中各包之间的依赖关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry show -t</span><br><span class="line">autopep8 1.5.7 A tool that automatically formats Python code to conform to the PEP 8 style guide</span><br><span class="line">|-- pycodestyle &gt;=2.7.0</span><br><span class="line">`-- toml *</span><br><span class="line">requests 2.25.1 Python HTTP for Humans.</span><br><span class="line">|-- certifi &gt;=2017.4.17</span><br><span class="line">|-- chardet &gt;=3.0.2,&lt;5</span><br><span class="line">|-- idna &gt;=2.5,&lt;3</span><br><span class="line">`-- urllib3 &gt;=1.21.1,&lt;1.27</span><br></pre></td></tr></table></figure></p><p>若此时使用 <code>poetry remove autopep8 -D</code> 命令移除 <code>autopep8</code>，则之前自动安装的 <code>pycodestyle</code>、<code>toml</code> 依赖项也会被移除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(python3.9.4) C:\Users\Administrator\projects\python\test-poetry&gt;poetry remove autopep8 -D</span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies...</span><br><span class="line"></span><br><span class="line">Writing lock file</span><br><span class="line"></span><br><span class="line">Package operations: 0 installs, 0 updates, 3 removals</span><br><span class="line"></span><br><span class="line">  • Removing autopep8 (1.5.7)</span><br><span class="line">  • Removing pycodestyle (2.7.0)</span><br><span class="line">  • Removing toml (0.10.2)</span><br></pre></td></tr></table></figure></p><p><strong>PS</strong>：更多 <code>poetry</code> 命令和用法可参考官方文档：<a href="https://python-poetry.org/docs/cli/" target="_blank" rel="noopener">Poetry Commands</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;基于自己的日常习惯测试整理，通过 Windows 系统演示（Linux 系统操作步骤大同小异）。&lt;a href=&quot;https://docs.conda.io/en/latest/miniconda.html&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="Poetry" scheme="https://rollingstarky.github.io/tags/Poetry/"/>
    
      <category term="Miniconda" scheme="https://rollingstarky.github.io/tags/Miniconda/"/>
    
      <category term="Conda" scheme="https://rollingstarky.github.io/tags/Conda/"/>
    
      <category term="Package" scheme="https://rollingstarky.github.io/tags/Package/"/>
    
  </entry>
  
  <entry>
    <title>Django（drf）配合 Vue Element 实现文件上传下载功能</title>
    <link href="https://rollingstarky.github.io/2021/03/13/django-drf-and-vue-element-file-upload-and-download/"/>
    <id>https://rollingstarky.github.io/2021/03/13/django-drf-and-vue-element-file-upload-and-download/</id>
    <published>2021-03-12T16:00:00.000Z</published>
    <updated>2021-03-13T15:22:28.864Z</updated>
    
    <content type="html"><![CDATA[<h4 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h4><h5 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h5><p>编辑 <code>models.py</code> 代码，通过 <code>FileField</code> 字段记录文件信息：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilesModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    file = models.FileField(upload_to=<span class="string">'uploads/'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'files_storage'</span></span><br><span class="line">        ordering = [<span class="string">'-id'</span>]</span><br></pre></td></tr></table></figure></p><h5 id="Serializer"><a href="#Serializer" class="headerlink" title="Serializer"></a>Serializer</h5><p>这里使用 Django REST framework 实现后端 REST API，需要创建序列化器 <code>serializers.py</code>，内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="comment"># files 是 app 的名字</span></span><br><span class="line"><span class="keyword">from</span> files <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilesSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.FilesModel</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure></p><h5 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h5><p>编辑 <code>views.py</code> 代码，内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> files <span class="keyword">import</span> models, serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = models.FilesModel.objects.all()</span><br><span class="line">    serializer_class = serializers.FilesSerializer</span><br></pre></td></tr></table></figure></p><h5 id="Urls"><a href="#Urls" class="headerlink" title="Urls"></a>Urls</h5><p>在 files 路径下新建 <code>urls.py</code> 文件，填写路由配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"><span class="keyword">from</span> files <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'files'</span>, views.FileViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>在项目总配置路径下（<code>settings.py</code> 所在的路径）编辑根路由配置文件 <code>urls.py</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'storage/'</span>, include(<span class="string">'files.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h5 id="测试后端-API"><a href="#测试后端-API" class="headerlink" title="测试后端 API"></a>测试后端 API</h5><p>运行后台服务 <code>python manage.py runserver 0.0.0.0:8000</code>，访问 <a href="http://xx.xx.xx.xx:8000/storage/files/，界面如下：" target="_blank" rel="noopener">http://xx.xx.xx.xx:8000/storage/files/，界面如下：</a><br><img src="https://upload-images.jianshu.io/upload_images/6875152-ed76119688b03565.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Django REST framework"></p><p>测试上传文件，效果如下：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-010d20514b00401a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上传成功"></p><h4 id="前端代码（手动上传）"><a href="#前端代码（手动上传）" class="headerlink" title="前端代码（手动上传）"></a>前端代码（手动上传）</h4><p>借助 Element UI 的 upload 组件，Vue 代码（<code>index.vue</code>）如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-upload</span><br><span class="line">      ref=&quot;upload&quot;</span><br><span class="line">      drag</span><br><span class="line">      action=&quot;http://xx.xx.xx.xx:8000/storage/files/&quot;</span><br><span class="line">      :auto-upload=&quot;false&quot;</span><br><span class="line">      :on-success=&quot;onSuccess&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;i class=&quot;el-icon-upload&quot; /&gt;</span><br><span class="line">      &lt;div class=&quot;el-upload__text&quot;&gt;将文件拖到此处，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">    &lt;el-button style=&quot;margin-left: 10px;&quot; size=&quot;small&quot; type=&quot;success&quot; @click=&quot;submitUpload&quot;&gt;上传到服务器&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;UploadDemo&apos;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submitUpload() &#123;</span><br><span class="line">      this.$refs.upload.submit()</span><br><span class="line">    &#125;,</span><br><span class="line">    onSuccess() &#123;</span><br><span class="line">      this.$message.success(&apos;上传成功&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>其中 <code>el-upload</code> 组件的 <code>action</code> 属性用于指定后台 API 的 URI；<br><code>:auto-upload</code> 属性用于设置是否自动上传（这里设置为 <code>false</code>，手动触发上传动作）；<br><code>:on-success</code> 属性用于指定上传成功后触发的方法。</p><p><code>submitUpload()</code> 中的 <code>this.$refs.upload.submit()</code> 方法触发文件上传动作。</p><p>界面如下：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-65b26a1e943716c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上传界面"></p><p>测试文件上传：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-7ccc4d25b88df2c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上传成功"></p><p>后台数据如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/template.html"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/20171215091830_55126_hSnPtZR.png"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">17</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h4 id="文件上传的同时添加其他数据"><a href="#文件上传的同时添加其他数据" class="headerlink" title="文件上传的同时添加其他数据"></a>文件上传的同时添加其他数据</h4><h5 id="修改数据库模型"><a href="#修改数据库模型" class="headerlink" title="修改数据库模型"></a>修改数据库模型</h5><p>编辑后端 <code>models.py</code> 文件，添加其他字段：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilesModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, default=<span class="string">''</span>)</span><br><span class="line">    file = models.FileField(upload_to=<span class="string">'uploads/'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'files_storage'</span></span><br><span class="line">        ordering = [<span class="string">'-id'</span>]</span><br></pre></td></tr></table></figure></p><p>数据库迁移后，重启后台 Web 服务。</p><p>后台数据如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/template.html"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/20171215091830_55126_hSnPtZR.png"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">17</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h5 id="修改前端代码"><a href="#修改前端代码" class="headerlink" title="修改前端代码"></a>修改前端代码</h5><p>添加其他数据的输入界面，同时将附加数据绑定到 <code>el-upload</code> 组件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-label&gt;名称&lt;/el-label&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;fileData.name&quot; style=&quot;width: 20%&quot; /&gt;</span><br><span class="line">    &lt;el-upload</span><br><span class="line">      ref=&quot;upload&quot;</span><br><span class="line">      drag</span><br><span class="line">      class=&quot;upload-demo&quot;</span><br><span class="line">      action=&quot;http://xx.xx.xx.xx:8000/storage/files/&quot;</span><br><span class="line">      :data=&quot;fileData&quot;</span><br><span class="line">      :auto-upload=&quot;false&quot;</span><br><span class="line">      :on-success=&quot;onSuccess&quot;</span><br><span class="line">      style=&quot;padding: 30px&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;i class=&quot;el-icon-upload&quot; /&gt;</span><br><span class="line">      &lt;div class=&quot;el-upload__text&quot;&gt;将文件拖到此处，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">    &lt;el-button style=&quot;margin-left: 10px;&quot; size=&quot;small&quot; type=&quot;success&quot; @click=&quot;submitUpload&quot;&gt;上传到服务器&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;UploadDemo&apos;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      fileData: &#123;</span><br><span class="line">        name: &apos;&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submitUpload() &#123;</span><br><span class="line">      this.$refs.upload.submit()</span><br><span class="line">    &#125;,</span><br><span class="line">    onSuccess() &#123;</span><br><span class="line">      this.$message.success(&apos;上传成功&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>其中 <code>el-upload</code> 组件的 <code>:data</code> 属性用于指定文件上传时附加的数据（类型为 JavaScript 对象）。</p><p>文件上传测试：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-5f22e11cd28c0ee4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件上传（带数据）"></p><p>上传完成，后台数据如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/AnyDesk.exe"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">19</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"测试文件"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/template.html"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"http://172.20.23.34:8000/storage/files/uploads/20171215091830_55126_hSnPtZR.png"</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">17</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><p>修改后台视图代码（<code>views.py</code>），添加文件下载的 API 响应逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> files <span class="keyword">import</span> models, serializers</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> FileResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = models.FilesModel.objects.all()</span><br><span class="line">    serializer_class = serializers.FilesSerializer</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(methods=['get', 'post'], detail=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self, request, pk=None, *args, **kwargs)</span>:</span></span><br><span class="line">        file_obj = self.get_object()</span><br><span class="line">        response = FileResponse(open(file_obj.file.path, <span class="string">'rb'</span>))</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>此时访问 <a href="http://xx.xx.xx.xx:8000/storage/files/[id]/download/" target="_blank" rel="noopener">http://xx.xx.xx.xx:8000/storage/files/[id]/download/</a> 链接，即可直接下载上传到服务器上的文件。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-bb5a7c0448592919.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载文件"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o anydesk.exe <span class="number">172</span>.<span class="number">20</span>.<span class="number">23</span>.<span class="number">34</span>:<span class="number">8000</span>/storage/files/<span class="number">19</span>/download/</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   <span class="built_in">Time</span>    <span class="built_in">Time</span>     <span class="built_in">Time</span>  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line"><span class="number">100</span> <span class="number">3584</span>k  <span class="number">100</span> <span class="number">3584</span>k    <span class="number">0</span>     <span class="number">0</span>   <span class="number">102</span>M      <span class="number">0</span> --:--:-- --:--:-- --:--:--  <span class="number">102</span>M</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://element.eleme.cn/#/zh-CN/component/upload" target="_blank" rel="noopener">Element UI 官方文档</a><br><a href="https://docs.djangoproject.com/en/3.1/topics/http/file-uploads/" target="_blank" rel="noopener">Django 官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;后台代码&quot;&gt;&lt;a href=&quot;#后台代码&quot; class=&quot;headerlink&quot; title=&quot;后台代码&quot;&gt;&lt;/a&gt;后台代码&lt;/h4&gt;&lt;h5 id=&quot;Models&quot;&gt;&lt;a href=&quot;#Models&quot; class=&quot;headerlink&quot; title=&quot;Model
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Web" scheme="https://rollingstarky.github.io/tags/Web/"/>
    
      <category term="Django" scheme="https://rollingstarky.github.io/tags/Django/"/>
    
      <category term="Vue" scheme="https://rollingstarky.github.io/tags/Vue/"/>
    
      <category term="drf" scheme="https://rollingstarky.github.io/tags/drf/"/>
    
      <category term="Element" scheme="https://rollingstarky.github.io/tags/Element/"/>
    
      <category term="File" scheme="https://rollingstarky.github.io/tags/File/"/>
    
  </entry>
  
  <entry>
    <title>基本算法问题的 Python 解法——图（Graph）问题</title>
    <link href="https://rollingstarky.github.io/2021/02/20/classic-compute-problems-with-python-graph-problems/"/>
    <id>https://rollingstarky.github.io/2021/02/20/classic-compute-problems-with-python-graph-problems/</id>
    <published>2021-02-19T16:00:00.000Z</published>
    <updated>2021-02-20T12:35:08.593Z</updated>
    
    <content type="html"><![CDATA[<p><strong>图（Graph）</strong>是一种用来对某些现实问题进行建模的抽象的数学结构，这些问题从逻辑上可以被划分成一系列相互连接的<strong>节点</strong>。其中的节点称为<strong>顶点</strong>（<em>vertex</em>），顶点之间的连接称为<strong>边</strong>（<em>edge</em>）。<br>比如地铁线路就可以看作由图表示成的运输网络。每一个顶点都代表一个地铁站，而顶点之间的边则表示两个地铁站之间的路径。如果想知道某个站点到另一个站点的最短路径，图算法就能发挥作用。实际上，图算法可以被应用到任何类型的网络问题中。</p><h4 id="map-as-graph"><a href="#map-as-graph" class="headerlink" title="map as graph"></a>map as graph</h4><p><img src="https://upload-images.jianshu.io/upload_images/6875152-8255210fc341b4ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="美国最大的15个 MSA 的地图"></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-9f88ead301ab7f25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="美国最大的15个 MSA 的 graph 表示"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># edge.py</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span>:</span></span><br><span class="line">    u: int  <span class="comment"># the "from" vertex</span></span><br><span class="line">    v: int  <span class="comment"># the "to" vertex</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reversed</span><span class="params">(self)</span> -&gt; Edge:</span></span><br><span class="line">        <span class="keyword">return</span> Edge(self.v, self.u)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.u&#125;</span> -&gt; <span class="subst">&#123;self.v&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>上面代码中的 <code>Edge</code> 类表示两个顶点之间的连接（即“边”），每个顶点都由整数索引表示。其中 <code>u</code> 用来表示第一个顶点，<code>v</code> 表示第二个顶点。<br>这里只关注非方向性的 graph，edge 是双向的。而在<strong>有向图（digraph）</strong>中，edge 可以是单向的。<code>reversed()</code> 方法用来返回当前 edge 的逆向形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># graph.py</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, Generic, List, Optional</span><br><span class="line"><span class="keyword">from</span> edge <span class="keyword">import</span> Edge</span><br><span class="line"></span><br><span class="line">V = TypeVar(<span class="string">'V'</span>)  <span class="comment"># type of the vertices in the graph</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span><span class="params">(Generic[V])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vertices: List[V] = [])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._vertices: List[V] = vertices</span><br><span class="line">        self._edges: List[List[Edge]] = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> vertices]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">vertex_count</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> len(self._vertices)  <span class="comment"># Number of vertices</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edge_count</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> sum(map(len, self._edges))  <span class="comment"># Number of edges</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add a vertex to the graph and return its index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_vertex</span><span class="params">(self, vertex: V)</span> -&gt; int:</span></span><br><span class="line">        self._vertices.append(vertex)</span><br><span class="line">        self._edges.append([])  <span class="comment"># Add empty list for containing edges</span></span><br><span class="line">        <span class="keyword">return</span> self.vertex_count - <span class="number">1</span>  <span class="comment"># Return index of added vertex</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This is an undirected graph,</span></span><br><span class="line">    <span class="comment"># so we always add edges in both directions</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge</span><span class="params">(self, edge: Edge)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._edges[edge.u].append(edge)</span><br><span class="line">        self._edges[edge.v].append(edge.reversed())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add an edge using vertex indices (convenience method)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge_by_indices</span><span class="params">(self, u: int, v: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        edge: Edge = Edge(u, v)</span><br><span class="line">        self.add_edge(edge)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add an edge by looking up vertex indices (convenience method)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge_by_vertices</span><span class="params">(self, first: V, second: V)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        u: int = self._vertices.index(first)</span><br><span class="line">        v: int = self._vertices.index(second)</span><br><span class="line">        self.add_edge_by_indices(u, v)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Find the vertex at a specific index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">vertex_at</span><span class="params">(self, index: int)</span> -&gt; V:</span></span><br><span class="line">        <span class="keyword">return</span> self._vertices[index]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Find the index of a vertex in the graph</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_of</span><span class="params">(self, vertex: V)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self._vertices.index(vertex)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Find the vertices that a vertex at some index is connected to</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">neighbors_for_index</span><span class="params">(self, index: int)</span> -&gt; List[V]:</span></span><br><span class="line">        <span class="keyword">return</span> list(map(self.vertex_at, [e.v <span class="keyword">for</span> e <span class="keyword">in</span> self._edges[index]]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Look up a vertice's index and find its neighbors (convenience method)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">neighbors_for_vertex</span><span class="params">(self, vertex: V)</span> -&gt; List[V]:</span></span><br><span class="line">        <span class="keyword">return</span> self.neighbors_for_index(self.index_of(vertex))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Return all of the edges associated with a vertex at some index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edges_for_index</span><span class="params">(self, index: int)</span> -&gt; List[Edge]:</span></span><br><span class="line">        <span class="keyword">return</span> self._edges[index]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Look up the index of a vertex and return its edges (convenience method)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edges_for_vertex</span><span class="params">(self, vertex: V)</span> -&gt; List[Edge]:</span></span><br><span class="line">        <span class="keyword">return</span> self.edges_for_index(self.index_of(vertex))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make it easy to pretty-print a Graph</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        desc: str = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.vertex_count):</span><br><span class="line">            desc += <span class="string">f"<span class="subst">&#123;self.vertex_at(i)&#125;</span> -&gt; <span class="subst">&#123;self.neighbors_for_index(i)&#125;</span>\n"</span></span><br><span class="line">        <span class="keyword">return</span> desc</span><br></pre></td></tr></table></figure><p><code>Graph</code> 类聚焦于 graph 的核心角色，即将顶点用边连接起来。<br><code>_vertices</code> 列表是 Graph 类的核心，每个顶点都会被存储在该列表中。但是之后在实际引用时会使用顶点在列表中的索引。顶点本身有可能会是非常复杂的数据类型，但其索引一定会是 int 类型，相对而言更加方便使用。<br>graph 数据类型可以使用 <strong>adjacency lists</strong> 方式实现，每个顶点都拥有一个列表，里面包含了这个顶点连接的其他顶点。这里使用了由 edge 组成的列表再组成的列表（<code>_edges</code>），每个顶点都拥有一个由 edge 组成的列表，这些 edge 表示该顶点与其他顶点的连接关系。</p><p><code>Graph</code> 类中实现的方法的简单介绍：</p><ul><li><code>vertex_count</code> 属性：获取 graph 中顶点的数量</li><li><code>edge_count</code> 属性：获取 graph 中边的数量</li><li><code>add_vertex</code> 方法：添加一个新的孤立的顶点并返回其索引</li><li><code>add_edge</code> 方法：添加一条边（双向，参数是 Edge 对象）</li><li><code>add_edge_by_indices</code> 方法：通过顶点索引添加新的边（参数是边的两个顶点的索引 u、v）</li><li><code>add_edge_by_vertices</code> 方法：通过顶点添加新的边（参数是边的两个顶点（Vertex）对象）</li><li><code>vertex_at</code> 方法：通过特定的索引查询顶点</li><li><code>index_of</code> 方法：根据顶点返回其索引</li><li><code>neighbors_for_index</code> 方法：根据某个顶点的索引获取其临近的顶点（参数为顶点索引）</li><li><code>neighbors_for_vertex</code> 方法：根据某个顶点获取其临近的顶点（参数为顶点对象）</li><li><code>edges_for_index</code> 方法：根据某个顶点的索引获取与其连接的边（参数为顶点索引）</li><li><code>edges_for_vertex</code> 方法：根据某个顶点获取与其连接的边（参数为顶点对象）</li><li><code>__str__</code> 方法：友好的方式输出整个 graph</li></ul><p>补充测试代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># graph.py continued</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># test basic Graph construction</span></span><br><span class="line">    city_graph: Graph[str] = Graph([<span class="string">"Seattle"</span>, <span class="string">"San Francisco"</span>, <span class="string">"Los Angeles"</span>, <span class="string">"Riverside"</span>, <span class="string">"Phoenix"</span>, <span class="string">"Chicago"</span>, <span class="string">"Boston"</span>, <span class="string">"New York"</span>,</span><br><span class="line">                                    <span class="string">"Atlanta"</span>, <span class="string">"Miami"</span>, <span class="string">"Dallas"</span>, <span class="string">"Houston"</span>, <span class="string">"Detroit"</span>, <span class="string">"Philadelphia"</span>, <span class="string">"Washington"</span>])</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Seattle"</span>, <span class="string">"Chicago"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Seattle"</span>, <span class="string">"San Francisco"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"San Francisco"</span>, <span class="string">"Riverside"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"San Francisco"</span>, <span class="string">"Los Angeles"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Los Angeles"</span>, <span class="string">"Riverside"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Los Angeles"</span>, <span class="string">"Phoenix"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Riverside"</span>, <span class="string">"Phoenix"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Riverside"</span>, <span class="string">"Chicago"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Phoenix"</span>, <span class="string">"Dallas"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Phoenix"</span>, <span class="string">"Houston"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Chicago"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Atlanta"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Houston"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Houston"</span>, <span class="string">"Atlanta"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Houston"</span>, <span class="string">"Miami"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Chicago"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Washington"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Miami"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Miami"</span>, <span class="string">"Washington"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Chicago"</span>, <span class="string">"Detroit"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"Boston"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"Washington"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"New York"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Boston"</span>, <span class="string">"New York"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"New York"</span>, <span class="string">"Philadelphia"</span>)</span><br><span class="line">    city_graph.add_edge_by_vertices(<span class="string">"Philadelphia"</span>, <span class="string">"Washington"</span>)</span><br><span class="line">    print(city_graph)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Seattle -&gt; ['Chicago', 'San Francisco']</span><br><span class="line">San Francisco -&gt; ['Seattle', 'Riverside', 'Los Angeles']</span><br><span class="line">Los Angeles -&gt; ['San Francisco', 'Riverside', 'Phoenix']</span><br><span class="line">Riverside -&gt; ['San Francisco', 'Los Angeles', 'Phoenix', 'Chicago']</span><br><span class="line">Phoenix -&gt; ['Los Angeles', 'Riverside', 'Dallas', 'Houston']</span><br><span class="line">Chicago -&gt; ['Seattle', 'Riverside', 'Dallas', 'Atlanta', 'Detroit']</span><br><span class="line">Boston -&gt; ['Detroit', 'New York']</span><br><span class="line">New York -&gt; ['Detroit', 'Boston', 'Philadelphia']</span><br><span class="line">Atlanta -&gt; ['Dallas', 'Houston', 'Chicago', 'Washington', 'Miami']</span><br><span class="line">Miami -&gt; ['Houston', 'Atlanta', 'Washington']</span><br><span class="line">Dallas -&gt; ['Phoenix', 'Chicago', 'Atlanta', 'Houston']</span><br><span class="line">Houston -&gt; ['Phoenix', 'Dallas', 'Atlanta', 'Miami']</span><br><span class="line">Detroit -&gt; ['Chicago', 'Boston', 'Washington', 'New York']</span><br><span class="line">Philadelphia -&gt; ['New York', 'Washington']</span><br><span class="line">Washington -&gt; ['Atlanta', 'Miami', 'Detroit', 'Philadelphia']</span><br></pre></td></tr></table></figure></p><h4 id="寻找最短路径"><a href="#寻找最短路径" class="headerlink" title="寻找最短路径"></a>寻找最短路径</h4><p>在 graph 理论中，任意两个顶点之间的所有连线（边）称为路径。即从一个顶点到达另一个顶点需要走过的所有路径。<br>在一个未加权的 graph 中（即不考虑边的长度），寻找最短的路径意味着从起始顶点到目标顶点之间经过的边最少。可以使用<strong>宽度优先搜索（breadth-first search, BFS）</strong>算法查找两个顶点之间的最短路径。（BFS 算法的具体实现可参考 <a href="https://www.jianshu.com/p/34e392141d30" target="_blank" rel="noopener">基本算法问题的 Python 解法（递归与搜索）</a>中的迷宫问题）。</p><p>BFS 部分代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generic_search.py</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, Generic, List, Callable, Deque, Set, Optional</span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">'T'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(Generic[T])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, state: T, parent: Optional[Node])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.state: T = state</span><br><span class="line">        self.parent: Optional[Node] = parent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span><span class="params">(Generic[T])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._container: Deque[T] = Deque()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self._container  <span class="comment"># not is true for empty container</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item: T)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._container.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span> -&gt; T:</span></span><br><span class="line">        <span class="keyword">return</span> self._container.popleft()  <span class="comment"># FIFO</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> repr(self._container)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(initial: T, goal_test: Callable[[T], bool], successors: Callable[[T], List[T]])</span> -&gt; Optional[Node[T]]:</span></span><br><span class="line">    <span class="comment"># frontier is where we've yet to go</span></span><br><span class="line">    frontier: Queue[Node[T]] = Queue()</span><br><span class="line">    frontier.push(Node(initial, <span class="keyword">None</span>))</span><br><span class="line">    <span class="comment"># explored is where we've been</span></span><br><span class="line">    explored: Set[T] = &#123;initial&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># keep going while there is more to explore</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> frontier.empty:</span><br><span class="line">        current_node: Node[T] = frontier.pop()</span><br><span class="line">        current_state: T = current_node.state</span><br><span class="line">        <span class="comment"># if we found the goal, we're done</span></span><br><span class="line">        <span class="keyword">if</span> goal_test(current_state):</span><br><span class="line">            <span class="keyword">return</span> current_node</span><br><span class="line">        <span class="comment"># check where we can go next and haven't explored</span></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> successors(current_state):</span><br><span class="line">            <span class="keyword">if</span> child <span class="keyword">in</span> explored:  <span class="comment"># skip children we already explored</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            explored.add(child)</span><br><span class="line">            frontier.push(Node(child, current_node))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span>  <span class="comment"># went through everything and never found goal</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">node_to_path</span><span class="params">(node: Node[T])</span> -&gt; List[T]:</span></span><br><span class="line">    path: List[T] = [node.state]</span><br><span class="line">    <span class="comment"># work backwards from end to front</span></span><br><span class="line">    <span class="keyword">while</span> node.parent <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        node = node.parent</span><br><span class="line">        path.append(node.state)</span><br><span class="line">    path.reverse()</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure></p><p>继续补充 <code>graph.py</code> 代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># graph.py continued</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">from</span> generic_search <span class="keyword">import</span> bfs, Node, node_to_path</span><br><span class="line">    bfs_result: Optional[Node[V]] = bfs(<span class="string">"Boston"</span>, <span class="keyword">lambda</span> x: x == <span class="string">"Miami"</span>,</span><br><span class="line">                                        city_graph.neighbors_for_vertex)</span><br><span class="line">    <span class="keyword">if</span> bfs_result <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        print(<span class="string">"No solution found using breadth-first search!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        path: List[V] = node_to_path(bfs_result)</span><br><span class="line">        print(<span class="string">"Path from Boston to Miami:"</span>)</span><br><span class="line">        print(path)</span><br></pre></td></tr></table></figure></p><p><code>bfs()</code> 函数接受三个参数：初始状态、用于检测当前状态是否符合目标状态的 Callable（可调用对象）、用于寻找达成目标状态的路径的 Callable。<br>若需要寻找 Boston 到 Miami 的最短路径（不考虑加权的情况），则初始状态为顶点 “Boston”，用于状态检测的 Callable 则判断当前顶点是否为 “Miami”。</p><p>运行效果：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Path</span> from Boston to Miami:</span><br><span class="line">['Boston', 'Detroit', 'Washington', 'Miami']</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-5aca5a560c6a0105.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BFS"></p><h4 id="加权图"><a href="#加权图" class="headerlink" title="加权图"></a>加权图</h4><p>之前的计算中，最短路径只考虑经过的站点最少，而未将站点之间的路程计算在内。若需要将路程包含进去，则可以为 edge 加上<strong>权重</strong>来表示该 edge 对应的距离。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-dc49ed8f5b35b7fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="weight"></p><p>为了实现加权的 graph，需要实现 Edge 的子类 WeightedEdge 以及 Graph 的子类 WeightedGraph。每一个 WeightedEdge 对象都有一个关联的 float 类型的属性用来表示权重。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># weighted_edge.py</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> edge <span class="keyword">import</span> Edge</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeightedEdge</span><span class="params">(Edge)</span>:</span></span><br><span class="line">    weight: float</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reversed</span><span class="params">(self)</span> -&gt; WeightedEdge:</span></span><br><span class="line">        <span class="keyword">return</span> WeightedEdge(self.v, self.u, self.weight)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># so that we can order edges by weight to find the minimum weight edge</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other: WeightedEdge)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight &lt; other.weight</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.u&#125;</span> <span class="subst">&#123;self.weight&#125;</span>&gt; <span class="subst">&#123;self.v&#125;</span>"</span></span><br></pre></td></tr></table></figure></p><p>WeightedEdge 子类添加了一个 <code>weight</code> 属性，通过 <code>__lt__()</code> 方法实现了 <code>&lt;</code> 操作符，令 WeightedEdge 对象成为可比较的，使得返回 weight 最小的 edge 成为可能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># weighted_graph.py</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, Generic, List, Tuple</span><br><span class="line"><span class="keyword">from</span> graph <span class="keyword">import</span> Graph</span><br><span class="line"><span class="keyword">from</span> weighted_edge <span class="keyword">import</span> WeightedEdge</span><br><span class="line"></span><br><span class="line">V = TypeVar(<span class="string">'V'</span>)  <span class="comment"># type of the vertices in the graph</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeightedGraph</span><span class="params">(Generic[V], Graph[V])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vertices: List[V] = [])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._vertices: List[V] = vertices</span><br><span class="line">        self._edges: List[List[WeightedEdge]] = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> vertices]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge_by_indices</span><span class="params">(self, u: int, v: int, weight: float)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        edge: WeightedEdge = WeightedEdge(u, v, weight)</span><br><span class="line">        self.add_edge(edge)  <span class="comment"># call superclass version</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge_by_vertices</span><span class="params">(self, first: V, second: V, weight: float)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        u: int = self._vertices.index(first)</span><br><span class="line">        v: int = self._vertices.index(second)</span><br><span class="line">        self.add_edge_by_indices(u, v, weight)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">neighbors_for_index_with_weights</span><span class="params">(self, index: int)</span> -&gt; List[Tuple[V, float]]:</span></span><br><span class="line">        distance_tuples: List[Tuple[V, float]] = []</span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> self.edges_for_index(index):</span><br><span class="line">            distance_tuples.append((self.vertex_at(edge.v), edge.weight))</span><br><span class="line">        <span class="keyword">return</span> distance_tuples</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        desc: str = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.vertex_count):</span><br><span class="line">            desc += <span class="string">f"<span class="subst">&#123;self.vertex_at(i)&#125;</span> -&gt; <span class="subst">&#123;self.neighbors_for_index_with_weights(i)&#125;</span>\n"</span></span><br><span class="line">        <span class="keyword">return</span> desc</span><br></pre></td></tr></table></figure><p>WeightedGraph 类继承自 Graph，在原来的基础上对某些需要适应 weight 属性的方法做了对应的修改。</p><p>补充 <code>weighted_graph.py</code> 代码，测试运行效果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># weighted_graph.py continued</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    city_graph2: WeightedGraph[str] = WeightedGraph([<span class="string">"Seattle"</span>, <span class="string">"San Francisco"</span>,</span><br><span class="line">                                                     <span class="string">"Los Angeles"</span>, <span class="string">"Riverside"</span>,</span><br><span class="line">                                                     <span class="string">"Phoenix"</span>, <span class="string">"Chicago"</span>, <span class="string">"Boston"</span>,</span><br><span class="line">                                                     <span class="string">"New York"</span>, <span class="string">"Atlanta"</span>, <span class="string">"Miami"</span>,</span><br><span class="line">                                                     <span class="string">"Dallas"</span>, <span class="string">"Houston"</span>, <span class="string">"Detroit"</span>,</span><br><span class="line">                                                     <span class="string">"Philadelphia"</span>, <span class="string">"Washington"</span>])</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Seattle"</span>, <span class="string">"Chicago"</span>, <span class="number">1737</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Seattle"</span>, <span class="string">"San Francisco"</span>, <span class="number">678</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"San Francisco"</span>, <span class="string">"Riverside"</span>, <span class="number">386</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"San Francisco"</span>, <span class="string">"Los Angeles"</span>, <span class="number">348</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Los Angeles"</span>, <span class="string">"Riverside"</span>, <span class="number">50</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Los Angeles"</span>, <span class="string">"Phoenix"</span>, <span class="number">357</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Riverside"</span>, <span class="string">"Phoenix"</span>, <span class="number">307</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Riverside"</span>, <span class="string">"Chicago"</span>, <span class="number">1704</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Phoenix"</span>, <span class="string">"Dallas"</span>, <span class="number">887</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Phoenix"</span>, <span class="string">"Houston"</span>, <span class="number">1015</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Chicago"</span>, <span class="number">805</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Atlanta"</span>, <span class="number">721</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Houston"</span>, <span class="number">225</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Houston"</span>, <span class="string">"Atlanta"</span>, <span class="number">702</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Houston"</span>, <span class="string">"Miami"</span>, <span class="number">968</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Chicago"</span>, <span class="number">588</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Washington"</span>, <span class="number">543</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Miami"</span>, <span class="number">604</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Miami"</span>, <span class="string">"Washington"</span>, <span class="number">923</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Chicago"</span>, <span class="string">"Detroit"</span>, <span class="number">238</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"Boston"</span>, <span class="number">613</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"Washington"</span>, <span class="number">396</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"New York"</span>, <span class="number">482</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Boston"</span>, <span class="string">"New York"</span>, <span class="number">190</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"New York"</span>, <span class="string">"Philadelphia"</span>, <span class="number">81</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Philadelphia"</span>, <span class="string">"Washington"</span>, <span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">    print(city_graph2)</span><br></pre></td></tr></table></figure></p><p>运行效果：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Seattle -&gt; [('Chicago', <span class="number">1737</span>), ('San Francisco', <span class="number">678</span>)]</span><br><span class="line">San Francisco -&gt; [('Seattle', <span class="number">678</span>), ('Riverside', <span class="number">386</span>), ('Los Angeles', <span class="number">348</span>)]</span><br><span class="line">Los Angeles -&gt; [('San Francisco', <span class="number">348</span>), ('Riverside', <span class="number">50</span>), ('Phoenix', <span class="number">357</span>)]</span><br><span class="line">Riverside -&gt; [('San Francisco', <span class="number">386</span>), ('Los Angeles', <span class="number">50</span>), ('Phoenix', <span class="number">307</span>), ('Chicago', <span class="number">1704</span>)]</span><br><span class="line">Phoenix -&gt; [('Los Angeles', <span class="number">357</span>), ('Riverside', <span class="number">307</span>), ('Dallas', <span class="number">887</span>), ('Houston', <span class="number">1015</span>)]</span><br><span class="line">Chicago -&gt; [('Seattle', <span class="number">1737</span>), ('Riverside', <span class="number">1704</span>), ('Dallas', <span class="number">805</span>), ('Atlanta', <span class="number">588</span>), ('Detroit', <span class="number">238</span>)]</span><br><span class="line">Boston -&gt; [('Detroit', <span class="number">613</span>), ('New York', <span class="number">190</span>)]</span><br><span class="line">New York -&gt; [('Detroit', <span class="number">482</span>), ('Boston', <span class="number">190</span>), ('Philadelphia', <span class="number">81</span>)]</span><br><span class="line">Atlanta -&gt; [('Dallas', <span class="number">721</span>), ('Houston', <span class="number">702</span>), ('Chicago', <span class="number">588</span>), ('Washington', <span class="number">543</span>), ('Miami', <span class="number">604</span>)]</span><br><span class="line">Miami -&gt; [('Houston', <span class="number">968</span>), ('Atlanta', <span class="number">604</span>), ('Washington', <span class="number">923</span>)]</span><br><span class="line">Dallas -&gt; [('Phoenix', <span class="number">887</span>), ('Chicago', <span class="number">805</span>), ('Atlanta', <span class="number">721</span>), ('Houston', <span class="number">225</span>)]</span><br><span class="line">Houston -&gt; [('Phoenix', <span class="number">1015</span>), ('Dallas', <span class="number">225</span>), ('Atlanta', <span class="number">702</span>), ('Miami', <span class="number">968</span>)]</span><br><span class="line">Detroit -&gt; [('Chicago', <span class="number">238</span>), ('Boston', <span class="number">613</span>), ('Washington', <span class="number">396</span>), ('New York', <span class="number">482</span>)]</span><br><span class="line">Philadelphia -&gt; [('New York', <span class="number">81</span>), ('Washington', <span class="number">123</span>)]</span><br><span class="line">Washington -&gt; [('Atlanta', <span class="number">543</span>), ('Miami', <span class="number">923</span>), ('Detroit', <span class="number">396</span>), ('Philadelphia', <span class="number">123</span>)]</span><br></pre></td></tr></table></figure></p><h4 id="在加权图中搜索最短路径"><a href="#在加权图中搜索最短路径" class="headerlink" title="在加权图中搜索最短路径"></a>在加权图中搜索最短路径</h4><p>寻找某个起点城市到另一个城市的所有路线中花费最小的一条，属于单源头最短路径（single-source shortest path）问题，即从加权图中的某个顶点到任意的另外一个顶点的最短路径。</p><p><strong>Dijkstra 算法</strong> 可以用来解决单源头最短路径问题。该算法从某个起始顶点开始，可以找出加权图中所有其他顶点到起始顶点的最短路径。从某个顶点开始按照远近关系依次遍历完所有顶点并记录其总的花费（从起始顶点到当前顶点），若重复出现的顶点花费更小，则令其替换已有的记录。</p><p>具体步骤如下：</p><ul><li>将起始顶点加入到优先级队列中</li><li>从优先级队列中弹出一个顶点（一开始就是起始顶点）作为当前顶点</li><li>查看与当前顶点临近的所有顶点，若某一个之前没有被记录到，或某个顶点按照当前路径的花费低于已有的最小记录，则记录其到起始顶点的距离（作为新的最小记录）及生成该距离的最后一条边（记录路径），并将该顶点 push 到优先级队列中（令其作为之后的“当前”顶点）</li><li>重复前面两步直到优先级队列为空</li><li>返回所有顶点到起始顶点的最小距离及路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># priority_queue.py</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, Generic, List</span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush, heappop</span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">'T'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span><span class="params">(Generic[T])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._container: List[T] = []</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self._container</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item: T)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        heappush(self._container, item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span> -&gt; T:</span></span><br><span class="line">        <span class="keyword">return</span> heappop(self._container)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> repr(self._container)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dijkstra.py</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, List, Optional, Tuple, Dict</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> mst <span class="keyword">import</span> WeightedPath, print_weighted_path</span><br><span class="line"><span class="keyword">from</span> weighted_graph <span class="keyword">import</span> WeightedGraph</span><br><span class="line"><span class="keyword">from</span> weighted_edge <span class="keyword">import</span> WeightedEdge</span><br><span class="line"><span class="keyword">from</span> priority_queue <span class="keyword">import</span> PriorityQueue</span><br><span class="line"></span><br><span class="line">V = TypeVar(<span class="string">'V'</span>)  <span class="comment"># type of the vertices in the graph</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DijkstraNode</span>:</span></span><br><span class="line">    vertex: int</span><br><span class="line">    distance: float</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other: DijkstraNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.distance &lt; other.distance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other: DijkstraNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.distance == other.distance</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span><span class="params">(wg: WeightedGraph[V], root: V)</span> -&gt; Tuple[List[Optional[float]],</span></span><br><span class="line"><span class="function">                                                     Dict[int, WeightedEdge]]:</span></span><br><span class="line">    first: int = wg.index_of(root)</span><br><span class="line">    <span class="comment"># distances are unknown at first</span></span><br><span class="line">    distances: List[Optional[float]] = [<span class="keyword">None</span>] * wg.vertex_count</span><br><span class="line">    distances[first] = <span class="number">0</span>  <span class="comment"># the root is 0 away from the root</span></span><br><span class="line">    path_dict: Dict[int, WeightedEdge] = &#123;&#125;  <span class="comment"># how we got to each vertex</span></span><br><span class="line">    pq: PriorityQueue[DijkstraNode] = PriorityQueue()</span><br><span class="line">    pq.push(DijkstraNode(first, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> pq.empty:</span><br><span class="line">        u: int = pq.pop().vertex  <span class="comment"># explore the next closest vertex</span></span><br><span class="line">        dist_u: float = distances[u]  <span class="comment"># should already have seen it</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># look at every edge/vertex from current vertex</span></span><br><span class="line">        <span class="keyword">for</span> we <span class="keyword">in</span> wg.edges_for_index(u):</span><br><span class="line">            <span class="comment"># the old distance from starting vertex to this vertex</span></span><br><span class="line">            dist_v: float = distances[we.v]</span><br><span class="line">            <span class="comment"># no old distance or found shorter path</span></span><br><span class="line">            <span class="keyword">if</span> dist_v <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> dist_v &gt; we.weight + dist_u:</span><br><span class="line">                <span class="comment"># update distance to this vertex</span></span><br><span class="line">                distances[we.v] = we.weight + dist_u</span><br><span class="line">                <span class="comment"># update the edge on the shortest path to this vertex</span></span><br><span class="line">                path_dict[we.v] = we</span><br><span class="line">                <span class="comment"># explore this vertex soon</span></span><br><span class="line">                pq.push(DijkstraNode(we.v, we.weight + dist_u))</span><br><span class="line">    <span class="keyword">return</span> distances, path_dict</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper function to get easier access to dijkstra results</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance_array_to_vertex_dict</span><span class="params">(wg: WeightedGraph[V], distances:</span></span></span><br><span class="line"><span class="function"><span class="params">                                  List[Optional[float]])</span> -&gt; Dict[V, Optional[float]]:</span></span><br><span class="line">    distance_dict: Dict[V, Optional[float]] = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(distances)):</span><br><span class="line">        distance_dict[wg.vertex_at(i)] = distances[i]</span><br><span class="line">    <span class="keyword">return</span> distance_dict</span><br><span class="line"></span><br><span class="line"><span class="comment"># Takes a dictionary of edges to reach each node and returns a list of</span></span><br><span class="line"><span class="comment"># edges that goes from `start` ot `end`</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">path_dict_to_path</span><span class="params">(start: int, end: int, path_dict: Dict[int,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                            WeightedEdge])</span> -&gt; WeightedPath:</span></span><br><span class="line">    <span class="keyword">if</span> len(path_dict) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    edge_path: WeightedPath = []</span><br><span class="line">    e: WeightedEdge = path_dict[end]</span><br><span class="line">    edge_path.append(e)</span><br><span class="line">    <span class="keyword">while</span> e.u != start:</span><br><span class="line">        e = path_dict[e.u]</span><br><span class="line">        edge_path.append(e)</span><br><span class="line">    <span class="keyword">return</span> list(reversed(edge_path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    city_graph2: WeightedGraph[str] = WeightedGraph([<span class="string">"Seattle"</span>, <span class="string">"San Francisco"</span>,</span><br><span class="line">                                                     <span class="string">"Los Angeles"</span>, <span class="string">"Riverside"</span>,</span><br><span class="line">                                                     <span class="string">"Phoenix"</span>, <span class="string">"Chicago"</span>, <span class="string">"Boston"</span>,</span><br><span class="line">                                                     <span class="string">"New York"</span>, <span class="string">"Atlanta"</span>, <span class="string">"Miami"</span>,</span><br><span class="line">                                                     <span class="string">"Dallas"</span>, <span class="string">"Houston"</span>, <span class="string">"Detroit"</span>,</span><br><span class="line">                                                     <span class="string">"Philadelphia"</span>, <span class="string">"Washington"</span>])</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Seattle"</span>, <span class="string">"Chicago"</span>, <span class="number">1737</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Seattle"</span>, <span class="string">"San Francisco"</span>, <span class="number">678</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"San Francisco"</span>, <span class="string">"Riverside"</span>, <span class="number">386</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"San Francisco"</span>, <span class="string">"Los Angeles"</span>, <span class="number">348</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Los Angeles"</span>, <span class="string">"Riverside"</span>, <span class="number">50</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Los Angeles"</span>, <span class="string">"Phoenix"</span>, <span class="number">357</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Riverside"</span>, <span class="string">"Phoenix"</span>, <span class="number">307</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Riverside"</span>, <span class="string">"Chicago"</span>, <span class="number">1704</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Phoenix"</span>, <span class="string">"Dallas"</span>, <span class="number">887</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Phoenix"</span>, <span class="string">"Houston"</span>, <span class="number">1015</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Chicago"</span>, <span class="number">805</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Atlanta"</span>, <span class="number">721</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Dallas"</span>, <span class="string">"Houston"</span>, <span class="number">225</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Houston"</span>, <span class="string">"Atlanta"</span>, <span class="number">702</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Houston"</span>, <span class="string">"Miami"</span>, <span class="number">968</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Chicago"</span>, <span class="number">588</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Washington"</span>, <span class="number">543</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Atlanta"</span>, <span class="string">"Miami"</span>, <span class="number">604</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Miami"</span>, <span class="string">"Washington"</span>, <span class="number">923</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Chicago"</span>, <span class="string">"Detroit"</span>, <span class="number">238</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"Boston"</span>, <span class="number">613</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"Washington"</span>, <span class="number">396</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Detroit"</span>, <span class="string">"New York"</span>, <span class="number">482</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Boston"</span>, <span class="string">"New York"</span>, <span class="number">190</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"New York"</span>, <span class="string">"Philadelphia"</span>, <span class="number">81</span>)</span><br><span class="line">    city_graph2.add_edge_by_vertices(<span class="string">"Philadelphia"</span>, <span class="string">"Washington"</span>, <span class="number">123</span>)</span><br><span class="line">    distances, path_dict = dijkstra(city_graph2, <span class="string">"Los Angeles"</span>)</span><br><span class="line">    name_distance: Dict[str, Optional[int]] = distance_array_to_vertex_dict(city_graph2, distances)</span><br><span class="line">    print(<span class="string">"Distances from Los Angeles:"</span>)</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> name_distance.items():</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;key&#125;</span> : <span class="subst">&#123;value&#125;</span>"</span>)</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Shortest path from Los Angelges to Boston:"</span>)</span><br><span class="line">    path: WeightedPath = path_dict_to_path(city_graph2.index_of(<span class="string">"Los Angeles"</span>),</span><br><span class="line">                                           city_graph2.index_of(<span class="string">"Boston"</span>), path_dict)</span><br><span class="line">    print_weighted_path(city_graph2, path)</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Distances from Los Angeles:</span><br><span class="line">Seattle : <span class="number">1026</span></span><br><span class="line">San Francisco : <span class="number">348</span></span><br><span class="line">Los Angeles : <span class="number">0</span></span><br><span class="line">Riverside : <span class="number">50</span></span><br><span class="line">Phoenix : <span class="number">357</span></span><br><span class="line">Chicago : <span class="number">1754</span></span><br><span class="line">Boston : <span class="number">2605</span></span><br><span class="line">New York : <span class="number">2474</span></span><br><span class="line">Atlanta : <span class="number">1965</span></span><br><span class="line">Miami : <span class="number">2340</span></span><br><span class="line">Dallas : <span class="number">1244</span></span><br><span class="line">Houston : <span class="number">1372</span></span><br><span class="line">Detroit : <span class="number">1992</span></span><br><span class="line">Philadelphia : <span class="number">2511</span></span><br><span class="line">Washington : <span class="number">2388</span></span><br><span class="line"></span><br><span class="line">Shortest <span class="built_in">path</span> from Los Angelges to Boston:</span><br><span class="line">Los Angeles <span class="number">50</span>&gt; Riverside</span><br><span class="line">Riverside <span class="number">1704</span>&gt; Chicago</span><br><span class="line">Chicago <span class="number">238</span>&gt; Detroit</span><br><span class="line">Detroit <span class="number">613</span>&gt; Boston</span><br><span class="line">Total Weight: <span class="number">2605</span></span><br></pre></td></tr></table></figure></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.manning.com/books/classic-computer-science-problems-in-python" target="_blank" rel="noopener">Classic Computer Science Problems in Python</a><br><a href="https://github.com/davecom/ClassicComputerScienceProblemsInPython" target="_blank" rel="noopener">davecom/ClassicComputerScienceProblemsInPython</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;图（Graph）&lt;/strong&gt;是一种用来对某些现实问题进行建模的抽象的数学结构，这些问题从逻辑上可以被划分成一系列相互连接的&lt;strong&gt;节点&lt;/strong&gt;。其中的节点称为&lt;strong&gt;顶点&lt;/strong&gt;（&lt;em&gt;vertex&lt;/em&gt;），顶
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="DataStructure" scheme="https://rollingstarky.github.io/tags/DataStructure/"/>
    
      <category term="Algorithm" scheme="https://rollingstarky.github.io/tags/Algorithm/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Graph" scheme="https://rollingstarky.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——反模式</title>
    <link href="https://rollingstarky.github.io/2021/02/03/python-design-patterns-anti-pattern/"/>
    <id>https://rollingstarky.github.io/2021/02/03/python-design-patterns-anti-pattern/</id>
    <published>2021-02-02T16:00:00.000Z</published>
    <updated>2021-02-03T12:33:26.537Z</updated>
    
    <content type="html"><![CDATA[<p>软件设计模式提供了一套规则或标准，能够帮助开发人员在设计层面进行决策。不良的设计主要表现在四个方面：</p><ul><li>不动性：开发的应用程序非常难以重用</li><li>刚性：任何小的更改需求都会导致软件的太多部分必须进行相应的改动，牵一发而动全身</li><li>脆弱性：应用程序的任何更改都会导致现有系统变得非常容易崩溃</li><li>粘滞性：由于架构层面的修改非常困难，修改必须由开发人员在代码层面或环境本身中进行</li></ul><h4 id="软件开发反模式"><a href="#软件开发反模式" class="headerlink" title="软件开发反模式"></a>软件开发反模式</h4><p>在软件开发过程中，往往会偏离最初的代码结构，原因一般有：</p><ul><li>开发人员的想法会随着开发过程的推进而发生变化</li><li>用例通常会随着客户的反馈而进行更改</li><li>最初设计的数据结构可能会随功能或可伸缩性等方面的考虑而发生变化</li></ul><p>基于上述原因，软件通常需要进行重构。</p><p><strong>意大利面条式代码</strong></p><p>典型成因包括：</p><ul><li>对面向对象编程和分析的无知</li><li>没有考虑产品的架构或设计</li><li>快餐式思维</li></ul><p>问题：</p><ul><li>结构的重用性会降到最低</li><li>维护工作量过高</li><li>进行修改时，扩展性和灵活性会降低</li></ul><p><strong>金锤</strong></p><p>金锤的意思是一把锤子搞定所有的钉子（解决所有问题）。软件开发人员或团队通常会有一种倾向，一头扎进一个成熟的解决方案，而不管其是否满足适用性。</p><p>典型成因：</p><ul><li>来自不了解具体问题的高层的建议</li><li>某解决方案在过去多次验证有效，但当前项目有不同的背景和要求</li><li>公司已被这种技术“绑架”，或员工们因为顺手对这种技术情有独钟</li></ul><p>金锤的影响：</p><ul><li>痴迷于一个解决方案，并把它应用于所有软件项目</li><li>不是通过功能，而是通过开发中使用的技术来描述产品</li><li>没有满足需求，造成与用户的预期不符</li></ul><p><strong>熔岩流</strong></p><p>熔岩流与软件应用中的死代码或一段用不到的代码有关，人们害怕一旦对其进行修改就会破坏其他东西。随着时间的流逝，这段代码会一直留在软件中并固化其位置，就像熔岩变成硬岩一样。</p><p>熔岩流的成因：</p><ul><li>在产品中有大量的试错代码</li><li>由一个人单独编写的代码，未经审查的情况下移交给了其他开发团队</li><li>软件架构或设计的初始思想是通过代码库实现的，但没有人能理解</li></ul><p>熔岩流的症状：</p><ul><li>开发的测试工作具有很低的代码覆盖率</li><li>代码中含有莫名其妙的注释</li><li>过时的接口，或开发人员需要围绕既有代码展开工作</li></ul><p><strong>复制粘贴式编程</strong></p><p>原因：</p><ul><li>新手开发者不习惯编写代码或不知道如何开发</li><li>快速修复 bug 或急就章式的开发</li><li>代码重复，无法满足跨模块标准化以及代码结构化的要求</li><li>缺乏长远打算或深谋远虑</li></ul><p>后果：</p><ul><li>多个软件应用存在同种类型的问题</li><li>维护成本更高，bug 的生命周期也会变得更长</li><li>较少的模块化代码库，相同的代码会散落于多处</li><li>继承问题</li></ul><h4 id="软件架构反模式"><a href="#软件架构反模式" class="headerlink" title="软件架构反模式"></a>软件架构反模式</h4><p><strong>重新发明轮子</strong></p><p>原因：</p><ul><li>缺乏中央文档或存储库来讲解架构级问题和存放已实现的解决方案</li><li>社区或公司内的技术领袖之间缺乏沟通</li><li>组织中遵循的流程是从头开始构建的</li></ul><p>后果：</p><ul><li>解决一个标准问题的方案太多，其中有许多考虑得并不周全</li><li>会耗费工程团队更多的时间和资源，导致预算超标，完成时间延后</li><li>封闭的系统架构、重复劳动和糟糕的风险管理</li></ul><p><strong>供应商套牢</strong></p><p>原因：</p><ul><li>熟悉供应商公司的权威人士以及技术采购的可能折扣</li><li>基于营销和销售业务人员而不是技术评估选择的技术</li><li>在当前项目中使用经过验证的技术，即使它不适合当前项目的需要</li><li>技术人员已经接受过相关技术的培训</li></ul><p>后果：</p><ul><li>公司产品的发布周期和维护周期直接取决于供应商的发布时间</li><li>该产品是围绕该技术而不是根据客户的要求开放的</li><li>产品上市时间不可靠，不能满足客户的期望</li></ul><p><strong>委员会设计</strong></p><p>原因：</p><ul><li>根据组织的流程，产品的架构或设计是由众多的利益相关者批准的</li><li>没有指定单独的联系人或负责设计的架构师</li><li>由营销或技术专家确定设计优先级，而不是客户反馈</li></ul><p>症状：</p><ul><li>开发人员和架构师之间的观点冲突，即使在设计完成后依旧如此</li><li>过于复杂的设计，很难记录</li><li>规格或设计的任何改动都需要经过多次审查，导致实现延迟</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件设计模式提供了一套规则或标准，能够帮助开发人员在设计层面进行决策。不良的设计主要表现在四个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不动性：开发的应用程序非常难以重用&lt;/li&gt;
&lt;li&gt;刚性：任何小的更改需求都会导致软件的太多部分必须进行相应的改动，牵一发而动全身&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Pattern" scheme="https://rollingstarky.github.io/tags/Pattern/"/>
    
  </entry>
  
  <entry>
    <title>基本算法问题的 Python 解法——约束满足问题（CSP）</title>
    <link href="https://rollingstarky.github.io/2021/02/03/classic-compute-problems-with-python-constraint-satisfaction-problems/"/>
    <id>https://rollingstarky.github.io/2021/02/03/classic-compute-problems-with-python-constraint-satisfaction-problems/</id>
    <published>2021-02-02T16:00:00.000Z</published>
    <updated>2021-02-03T12:39:37.488Z</updated>
    
    <content type="html"><![CDATA[<p>由计算工具解决的很大一部分问题都可以归类为<strong>约束满足问题（CSPs, constraint-satisfaction problems）</strong>。CSP 一般包含三个基本概念：<strong>变量（variables）</strong>、<strong>域（domains）</strong>和<strong>约束条件（constraints）</strong>。</p><p>比如需要在星期五为 Joe、Mary、Sue 三个人安排一场会议，要求 Sue 必须和另外的至少一个人同时在场。针对此问题：</p><ul><li>Joe、Mary、Sue 三个人即为变量（variables）</li><li>每个人（变量）各自空闲的时间点即为对应的域（domains）。比如变量 Mary 在下午 2 点和 3 点的时候有空，这两个时间点即为变量 Mary 对应的域</li><li>约束条件（constraints）有两点：Sue 必须在场；除 Sue 以外至少还需要另一人到场</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/6875152-7d5dcdd81b242fa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="约会问题是非常经典的约束满足问题"></p><h4 id="构建-CSP-框架"><a href="#构建-CSP-框架" class="headerlink" title="构建 CSP 框架"></a>构建 CSP 框架</h4><p>约束条件通过 <code>Constraint</code> 类实现。该类中包含被约束的变量以及测试其是否满足约束的 <code>satisfied()</code> 方法。确定是否满足约束条件是针对某个特定的 CSP 的核心逻辑，该 <code>satisfied()</code> 方法必须为抽象方法，由子类覆盖后发挥实际作用，以满足不同问题的不同约束条件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># csp.py</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Generic, TypeVar, Dict, List, Optional</span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line">V = TypeVar(<span class="string">'V'</span>)  <span class="comment"># variable type</span></span><br><span class="line"></span><br><span class="line">D = TypeVar(<span class="string">'D'</span>)  <span class="comment"># domain type</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Constraint</span><span class="params">(Generic[V, D], ABC)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, variables: List[V])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.variables = variables</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">satisfied</span><span class="params">(self, assignment: Dict[V, D])</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>约束满足框架的核心部分代码是 <code>CSP</code> 类，该类集中处理变量、域和约束条件。CSP 的类型使用 Generic，目的是使其足够灵活，能够处理各种类型的 variables 和 domains。其中 variables 是 list 类型，domains 是由 variable 和对应的 list （所有可能的值）关联成的 dict 类型，constraints 则是由 variable 和对应的 list（约束条件列表）关联成的 dict 类型。</p><p><code>__init__()</code> 初始化方法会创建 <code>constraints</code> 字典，将 variables 中的值作为键，每个键关联一个空列表。<code>add_constraint()</code> 方法遍历 variables 中的值（同时也是 <code>constraints</code> 中的键），将对应的 constraint 添加到 <code>constraints</code> 字典的该 variable 键关联的列表中。<br>从而完成对 variables、domains、constraints 三类数据的初始化。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># csp.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSP</span><span class="params">(Generic[V, D])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, variables: List[V], domains: Dict[V, List[D]])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.variables = variables</span><br><span class="line">        self.domains = domains</span><br><span class="line">        self.constraints: Dict[V, List[Constraint[V, D]]] = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> variable <span class="keyword">in</span> self.variables:</span><br><span class="line">            self.constraints[variable] = []</span><br><span class="line">            <span class="keyword">if</span> variable <span class="keyword">not</span> <span class="keyword">in</span> self.domains:</span><br><span class="line">                <span class="keyword">raise</span> LookupError(<span class="string">"Every variable should have a domain assigned to it"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_constraint</span><span class="params">(self, constraint: Constraint[V, D])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">for</span> variable <span class="keyword">in</span> constraint.variables:</span><br><span class="line">            <span class="keyword">if</span> variable <span class="keyword">not</span> <span class="keyword">in</span> self.variables:</span><br><span class="line">                <span class="keyword">raise</span> LookupError(<span class="string">"Variable in constraint not in CSP"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.constraints[variable].append(constraint)</span><br></pre></td></tr></table></figure></p><p><code>consistent()</code> 方法用于检查给定的 variable 对应的每一个约束条件是否一一符合当前预设的方案。这个临时的方案用 assignment 表示。<br>即先有某个 variable，然后为其选择对应的 domain 中的任意一个值作为临时的 assignment，再检查该 assignment 是否符合对应的 variable 关联的所有约束条件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># csp.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consistent</span><span class="params">(self, variable: V, assignment: Dict[V, D])</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">for</span> constraint <span class="keyword">in</span> self.constraints[variable]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> constraint.satisfied(assignment):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>约束满足框架还需要一个简单的 <em>backtracking</em> 搜索用于查找问题的解决方案。Backtracking 意味着一旦在搜索路径的某个节点上终止，则返回到上一个已知的搜索节点，选择另一条搜索路径。有点类似于<strong>深度优先</strong>搜索（<strong>DFS, depth-first search</strong>）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking_search</span><span class="params">(self, assignment: Dict[V, D] = &#123;&#125;)</span> -&gt; Optional[Dict[V, D]]:</span></span><br><span class="line">    <span class="comment"># assignment is complete if every variable is assigned</span></span><br><span class="line">    <span class="keyword">if</span> len(assignment) == len(self.variables):</span><br><span class="line">        <span class="keyword">return</span> assignment</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get all variables in the CSP but not in the assignment</span></span><br><span class="line">    unassigned: List[V] = [v <span class="keyword">for</span> v <span class="keyword">in</span> self.variables <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> assignment]</span><br><span class="line">    first: V = unassigned[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> self.domains[first]:</span><br><span class="line">        local_assignment = assignment.copy()</span><br><span class="line">        local_assignment[first] = value</span><br><span class="line">        <span class="keyword">if</span> self.consistent(first, local_assignment):</span><br><span class="line">            result: Optional[Dict[V, D]] = self.backtracking_search(local_assignment)</span><br><span class="line">            <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure></p><p>逐条分析以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if len(assignment) == len(self.variables):</span><br><span class="line">    return assignment</span><br></pre></td></tr></table></figure></p><p>上面的 backtracking 搜索采用了<strong>递归</strong>的形式，此 <code>if</code> 语句则提供了一种递归的终止条件。即当所有 variable 都被赋予了合法的值时，意味着其中一种搭配方案已被找到，则停止进一步的搜索，返回该搭配方案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unassigned: List[V] = [v for v in self.variables if v not in assignment]</span><br><span class="line">first: V = unassigned[0]</span><br></pre></td></tr></table></figure><p>取出 variables 中第一个还未被赋值（未做选择）的 variable，作为下一步中进行赋值（做决定）和约束条件测试的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if self.consistent(first, local_assignment):</span><br><span class="line">    result: Optional[Dict[V, D]] = self.backtracking_search(local_assignment)</span><br><span class="line">    if result is not None:</span><br><span class="line">        return result</span><br></pre></td></tr></table></figure><p>为前面未赋值的某个 variable “做决定”。将对应的 domain 中所有存在的值依次赋值给该 variable，形成一个新的方案（local_assignment）。若该方案符合所有的约束条件（通过 <code>consistent()</code> 方法检测），则借助递归进行下一轮对另一个 variable 的赋值，直到触发终止条件（所有 variable 都被赋值）。</p><p><code>return None</code></p><p>若针对某个特定的 variable，已经检查完 domain 中包含的所有可能的值，仍没有找到符合要求的方案，则返回 <code>None</code> 表示没有解决。这会导致 backtracking 搜索结束本轮 <code>for</code> 循环，返回到递归的上一层中的 <code>for</code> 循环，尝试为上一步中已赋值的 variable 做出不同的决定，并继续递归（或回溯）下去。</p><h4 id="地图上色问题"><a href="#地图上色问题" class="headerlink" title="地图上色问题"></a>地图上色问题</h4><p>假如有一张澳大利亚地图，需要按州进行上色。要求所有相邻的州不能有相同的颜色。<br><img src="https://upload-images.jianshu.io/upload_images/6875152-bc114087e7adbbc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="地图上色问题的一种解决方案"></p><p>借助前面构建的约束符合框架，实现代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map_coloring.py</span></span><br><span class="line"><span class="keyword">from</span> csp <span class="keyword">import</span> Constraint, CSP</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Dict, List, Optional</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapColoringConstraint</span><span class="params">(Constraint[str, str])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, place1: str, place2: str)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        super().__init__([place1, place2])</span><br><span class="line">        self.place1 = place1</span><br><span class="line">        self.place2 = place2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">satisfied</span><span class="params">(self, assignment: Dict[str, str])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># if either place is not in the assignment, then it is not</span></span><br><span class="line">        <span class="comment"># yet possible for their colors to be conflicting</span></span><br><span class="line">        <span class="keyword">if</span> self.place1 <span class="keyword">not</span> <span class="keyword">in</span> assignment <span class="keyword">or</span> self.place2 <span class="keyword">not</span> <span class="keyword">in</span> assignment:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="comment"># check the color assigned to place1 is not the same as the</span></span><br><span class="line">        <span class="comment"># color assigned to place2</span></span><br><span class="line">        <span class="keyword">return</span> assignment[self.place1] != assignment[self.place2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    variables: List[str] = [<span class="string">"Western Australia"</span>, <span class="string">"Northern Territory"</span>, <span class="string">"South Australia"</span>,</span><br><span class="line">                            <span class="string">"Queensland"</span>, <span class="string">"New South Wales"</span>, <span class="string">"Victoria"</span>, <span class="string">"Tasmania"</span>]</span><br><span class="line">    domains: Dict[str, List[str]] = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> variable <span class="keyword">in</span> variables:</span><br><span class="line">        domains[variable] = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>]</span><br><span class="line">    csp: CSP[str, str] = CSP(variables, domains)</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Western Australia"</span>, <span class="string">"Northern Territory"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Western Australia"</span>, <span class="string">"South Australia"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"South Australia"</span>, <span class="string">"Northern Territory"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Queensland"</span>, <span class="string">"Northern Territory"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Queensland"</span>, <span class="string">"South Australia"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Queensland"</span>, <span class="string">"New South Wales"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"New South Wales"</span>, <span class="string">"South Australia"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Victoria"</span>, <span class="string">"South Australia"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Victoria"</span>, <span class="string">"New South Wales"</span>))</span><br><span class="line">    csp.add_constraint(MapColoringConstraint(<span class="string">"Victoria"</span>, <span class="string">"Tasmania"</span>))</span><br><span class="line"></span><br><span class="line">    solution: Optional[Dict[str, str]] = csp.backtracking_search()</span><br><span class="line">    <span class="keyword">if</span> solution <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        print(<span class="string">"No solution found"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(solution)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; &#123;'Western Australia': 'red', 'Northern Territory': 'green', 'South</span></span><br><span class="line"><span class="comment"># Australia': 'blue', 'Queensland': 'red', 'New South Wales': 'green',</span></span><br><span class="line"><span class="comment"># 'Victoria': 'red', 'Tasmania': 'green'&#125;</span></span><br></pre></td></tr></table></figure></p><p>简单梳理一下程序逻辑：</p><p>在上述 CSP 中，地图中的 7 个州即为 variables（为方便，以 a、b、c、d、e、f、g 代替）<br><code>variables = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;]</code></p><p>每个州都可以涂成红绿蓝三种颜色（假设用 1、2、3 指代）中的任何一种，各 variable 对应的所有颜色即组成对应 variable 的 domain：<br><code>domains = {&#39;a&#39;: [1, 2, 3], &#39;b&#39;: [1, 2, 3], &#39;c&#39;: [1, 2, 3], &#39;d&#39;: [1, 2, 3], &#39;e&#39;: [1, 2, 3], &#39;f&#39;: [1, 2, 3], &#39;g&#39;: [1, 2, 3]}</code></p><p>constraints 的逻辑在 MapColoringConstraints 类中实现，即已经涂色的相邻的两个州色彩须不一致。比如 a 与 b 相邻，则该 constraint 的表示如下：<br><code>MapColoringConstraint(&#39;a&#39;, &#39;b&#39;)</code><br>而所有的 constraints 都会关联到对应的以 variable 为键的字典中。即若 a 同时与 b 和 c 相邻，则变量 a 的 constraints 表示为：<br><code>{&#39;a&#39;: [MapColoringConstraint(&#39;a&#39;, &#39;b&#39;), MapColoringConstraint(&#39;a&#39;, &#39;c&#39;)]}</code></p><p><code>backtrack_search()</code> 方法的执行流程为：</p><ul><li>在 variables 中取第一个未被赋值（涂色）的 variable，为其赋予对应 domain 中的某个数值作为临时方案</li><li>用该 variable 对应的所有 constraints 测试上述临时方案的可行性。若符合要求，则借助递归开启下一轮循环，继续为另一个未被赋值（涂色）的 variable 赋值</li><li>若不符合要求，则继续本轮循环，为本 variable 赋予 domain 中的另一个值</li><li>若对应 domain 中的所有值赋予 variable 后都不能符合约束要求，则返回 None。本轮循环结束，回到递归的上一轮继续循环，为上一轮中已赋值的 variable 赋予不同的值，延续递归操作</li><li>若所有 variable 都已被赋值，则返回 variable 及其对应的值作为最终的解决方案；若所有循环（递归/回溯）结束，返回结果最终为 None，则表示无法找到合理的解决方案</li></ul><h4 id="国际象棋的八王后问题"><a href="#国际象棋的八王后问题" class="headerlink" title="国际象棋的八王后问题"></a>国际象棋的八王后问题</h4><p>国际象棋的棋盘由 8x8 的方格组成，棋子落于方格上。而棋子王后能够吃掉处于同一行、同一列、同一斜线上的任何一个敌方棋子。<br>八王后问题是指需要将 8 个王后放置到国际象棋棋盘上且彼此之间不会产生冲突（即不会有任意两枚棋子位于同一行、同一列或者同一斜线上）。</p><p>其中一种可能的解决方案如下图：<br><img src="https://upload-images.jianshu.io/upload_images/6875152-9424bba1dc8714d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="eight queens"></p><p>实现代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> csp <span class="keyword">import</span> Constraint, CSP</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Dict, List, Optional</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueensConstraint</span><span class="params">(Constraint[int, int])</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, columns: List[int])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        super().__init__(columns)</span><br><span class="line">        self.columns = columns</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">satisfied</span><span class="params">(self, assignment: Dict[int, int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># q1c = queen 1 column, q1r = queen 1 row</span></span><br><span class="line">        <span class="keyword">for</span> q1c, q1r <span class="keyword">in</span> assignment.items():</span><br><span class="line">            <span class="comment"># q2c = queen 2 column</span></span><br><span class="line">            <span class="keyword">for</span> q2c <span class="keyword">in</span> range(q1c + <span class="number">1</span>, len(self.columns) + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> q2c <span class="keyword">in</span> assignment:</span><br><span class="line">                    q2r = assignment[q2c]</span><br><span class="line">                    <span class="keyword">if</span> q1r == q2r:  <span class="comment"># same row?</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                    <span class="keyword">if</span> abs(q1r - q2r) == abs(q1c - q2c):  <span class="comment"># same diagonal?</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    columns: List[int] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">    rows: Dict[int, List[int]] = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> columns:</span><br><span class="line">        rows[column] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">    csp: CSP[int, int] = CSP(columns, rows)</span><br><span class="line"></span><br><span class="line">    csp.add_constraint(QueensConstraint(columns))</span><br><span class="line">    solution: Optional[Dict[int, int]] = csp.backtracking_search()</span><br><span class="line">    <span class="keyword">if</span> solution <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        print(<span class="string">"No solution found!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(solution)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; &#123;1: 1, 2: 5, 3: 8, 4: 6, 5: 3, 6: 7, 7: 2, 8: 4&#125;</span></span><br></pre></td></tr></table></figure></p><p>简单解释下 <code>satisfied()</code> 方法中的两个 <code>for</code> 循环。<code>assignment</code> 采用类似 <code>{1: 1, 2: 5, 3: 8, 4: 6, 5: 3, 6: 7, 7: 2, 8: 4}</code> 的字典类型（一开始会短一些），上述两个 <code>for</code> 循环的作用在于，先以棋盘上的第一列为标准，若第一列与剩余的几列不存在冲突，则去掉第一列，再比较第二列与剩余的几列是否存在冲突，以此类推。一旦出现任何冲突，则返回 False。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.manning.com/books/classic-computer-science-problems-in-python" target="_blank" rel="noopener">Classic Computer Science Problems in Python</a><br><a href="https://github.com/davecom/ClassicComputerScienceProblemsInPython" target="_blank" rel="noopener">davecom/ClassicComputerScienceProblemsInPython</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由计算工具解决的很大一部分问题都可以归类为&lt;strong&gt;约束满足问题（CSPs, constraint-satisfaction problems）&lt;/strong&gt;。CSP 一般包含三个基本概念：&lt;strong&gt;变量（variables）&lt;/strong&gt;、&lt;stron
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="DataStructure" scheme="https://rollingstarky.github.io/tags/DataStructure/"/>
    
      <category term="Algorithm" scheme="https://rollingstarky.github.io/tags/Algorithm/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="CSP" scheme="https://rollingstarky.github.io/tags/CSP/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——模板方法模式</title>
    <link href="https://rollingstarky.github.io/2020/12/29/python-design-patterns-template-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/29/python-design-patterns-template-pattern/</id>
    <published>2020-12-28T16:00:00.000Z</published>
    <updated>2020-12-29T11:32:16.699Z</updated>
    
    <content type="html"><![CDATA[<p>行为模式主要关注对象的响应性，处理对象之间的交互以实现更强大的功能。模板方法模式即为一种行为设计模式。<br>比如可以将制作饮料的步骤定义为模板方法中的算法，子类就能使用模板方法来实现沏茶的步骤。且步骤的改变（即子类的具体实现）并不会影响原始算法的结构。这样模板方法模式中的子类就可以通过覆盖来创建不同的行为。</p><p>模板方法模式适用于以下场景：</p><ul><li>当多个算法或类实现类似或相同逻辑的时候</li><li>在子类中实现算法有助于减少重复代码的时候</li><li>子类可以通过覆盖实现多种不同行为的时候</li></ul><p>模板方法模式的主要意图：</p><ul><li>使用基本操作定义算法的框架</li><li>重新定义子类的某些操作，无需修改算法的结构</li><li>实现代码重用并避免重复工作</li><li>利用通用接口或功能实现</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/6875152-e01622b62200ad45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><ul><li>AbstractClass：在抽象方法的帮助下定义算法的操作或步骤。这些步骤将被具体的子类覆盖</li><li>template_method()：定义算法的框架。在模板方法中调用抽象方法定义的步骤以形成序列或算法</li><li>ConcreteClass：实现需要算法子类关注的特定步骤</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compiler</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collectSource</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileToObject</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileAndRun</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.collectSource()</span><br><span class="line">        self.compileToObject()</span><br><span class="line">        self.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">iOSCompiler</span><span class="params">(Compiler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collectSource</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Collecting Swift Source Code"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileToObject</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Compiling Swift code to LLVM bitcode"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Program runing on runtime environment"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iOS = iOSCompiler()</span><br><span class="line">iOS.compileAndRun()</span><br><span class="line"><span class="comment"># =&gt; Collecting Swift Source Code</span></span><br><span class="line"><span class="comment"># =&gt; Compiling Swift code to LLVM bitcode</span></span><br><span class="line"><span class="comment"># =&gt; Program runing on runtime environment</span></span><br></pre></td></tr></table></figure><h4 id="现实中的模板方法模式"><a href="#现实中的模板方法模式" class="headerlink" title="现实中的模板方法模式"></a>现实中的模板方法模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod, ABCMeta</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trip</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setTransport</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day3</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">returnHome</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">itinerary</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setTransport()</span><br><span class="line">        self.day1()</span><br><span class="line">        self.day2()</span><br><span class="line">        self.day3()</span><br><span class="line">        self.returnHome()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VeniceTrip</span><span class="params">(Trip)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setTransport</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Take a boat and find your way in the Grand Canal"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Visit St Mark's Basilica in St Mark's Square"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Appreciate Doge's Palace"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day3</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Enjoy the food near the Rialto Bridge"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">returnHome</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Get souovenirs for friends and get back"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaldivesTrip</span><span class="params">(Trip)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setTransport</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"On foot, on any island, Wow!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Enjoy the marine life of Banana Reef"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Go for the water sports and snorkelling"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day3</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Relax on the beach and enjoy the sun"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">returnHome</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Don't feel like leaving the beach.."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TravelAgency</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrange_trip</span><span class="params">(self)</span>:</span></span><br><span class="line">        choice = input(<span class="string">"What kind of place you'd like to go historical or to a beach? "</span>)</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">'historical'</span>:</span><br><span class="line">            self.trip = VeniceTrip()</span><br><span class="line">            self.trip.itinerary()</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">'beach'</span>:</span><br><span class="line">            self.trip = MaldivesTrip()</span><br><span class="line">            self.trip.itinerary()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TravelAgency().arrange_trip()</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; What kind of place you'd like to go historical or to a beach? beach</span></span><br><span class="line"><span class="comment"># =&gt; On foot, on any island, Wow!</span></span><br><span class="line"><span class="comment"># =&gt; Enjoy the marine life of Banana Reef</span></span><br><span class="line"><span class="comment"># =&gt; Go for the water sports and snorkelling</span></span><br><span class="line"><span class="comment"># =&gt; Relax on the beach and enjoy the sun</span></span><br><span class="line"><span class="comment"># =&gt; Don't feel like leaving the beach..</span></span><br></pre></td></tr></table></figure><ul><li>抽象类 Trip 是一个接口，定义了不同日子使用的交通方式和参观地点等细节</li><li>setTransport 是一个抽象方法，由 ConcreteClass 实现，作用是设置交通方式</li><li>day1()、day2()、day3() 抽象方法定义了特定日期所参观的地点</li><li>itinerary() 模板方法则用于创建完整的行程</li><li>VeniceTrip 类和 MaldivesTrip 类是 Trip 接口的具体实现</li></ul><h4 id="模板方法的优点和缺点"><a href="#模板方法的优点和缺点" class="headerlink" title="模板方法的优点和缺点"></a>模板方法的优点和缺点</h4><p>优点：</p><ul><li>没有代码重复</li><li>使用继承而不是合成，只有为数不多的几个方法需要重写</li><li>灵活性，允许子类决定如何实现算法中的步骤</li></ul><p>缺点：</p><ul><li>调试和理解模板方法模式中的流程序列时可能会令人困惑</li><li>模板框架的维护可能是一个问题，任何层次（底层或高层）的变更都可能对实现造成干扰</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;行为模式主要关注对象的响应性，处理对象之间的交互以实现更强大的功能。模板方法模式即为一种行为设计模式。&lt;br&gt;比如可以将制作饮料的步骤定义为模板方法中的算法，子类就能使用模板方法来实现沏茶的步骤。且步骤的改变（即子类的具体实现）并不会影响原始算法的结构。这样模板方法模式中的
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Pattern" scheme="https://rollingstarky.github.io/tags/Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——观察者模式</title>
    <link href="https://rollingstarky.github.io/2020/12/29/python-design-patterns-observer-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/29/python-design-patterns-observer-pattern/</id>
    <published>2020-12-28T16:00:00.000Z</published>
    <updated>2020-12-29T11:36:51.151Z</updated>
    
    <content type="html"><![CDATA[<h4 id="行为型模式中的观察者模式"><a href="#行为型模式中的观察者模式" class="headerlink" title="行为型模式中的观察者模式"></a>行为型模式中的观察者模式</h4><p>创建型模式（比如单例模式）是基于对象的创建机制的，这些模式隔离了对象的创建细节，使得实现这些细节的代码能够与要创建的对象类型相互独立。<br>结构型模式（比如门面模式）用于设计对象和类的结构，使得它们能够相互协作以形成更大的结构。重点是结构的简化以及识别类和对象之间的关系。<br>行为型模式（比如观察者模式）主要关注的是对象的责任，处理对象之间的交互，以实现更复杂的功能。对象之间应该可以彼此交互，且应该是松耦合的。</p><p>在观察者设计模式中，对象（主题）维护了一个依赖（观察者）列表，以便主题可以使用观察者定义的任何方法通知所有观察者它所发生的变化。</p><p>在分布式应用中，多个服务通常是通过彼此交互来实现更大型的操作的。服务可以执行多种操作，但它们执行的操作会直接或很大程度上取决于其交互的服务对象的状态。<br>比如用户注册的示例，其中用户服务负责响应用户在网站上的各种操作。假设有另一个电子邮件的服务，其作用是监视用户的状态并向用户发送电子邮件。若用户刚刚注册，则用户服务将调用电子邮件服务的方法，向用户发送邮件进行账户验证。若账户经过了验证，但信用度较低，则电子邮件服务将监视用户服务并向用户发送信用度过低的电子邮件警报。</p><p>因此，若应用中存在一个许多其他服务所依赖的核心服务，该核心服务就会成为观察者必须观察/监视变化的主题。当主题发生变化时，观察者应该改变自身对象状态，或者采取某些动作。<br>从属服务监视核心服务的状态变化是观察者设计模式的经典情境。</p><p><strong>观察者模式的主要目标</strong></p><ul><li>定义了对象之间的一对多依赖关系，使得对象中的任何更改都将自动通知给其他依赖对象</li><li>封装了主题的核心组件</li></ul><h4 id="观察者模式的基本实现"><a href="#观察者模式的基本实现" class="headerlink" title="观察者模式的基本实现"></a>观察者模式的基本实现</h4><p><img src="https://upload-images.jianshu.io/upload_images/6875152-63f9b8476702d69a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__observers = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(self, observer)</span>:</span></span><br><span class="line">        self.__observers.append(observer)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notifyAll</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> observer <span class="keyword">in</span> self.__observers:</span><br><span class="line">            observer.notify(subject, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, subject)</span>:</span></span><br><span class="line">        subject.register(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self, subject, *args)</span>:</span></span><br><span class="line">        print(type(self).__name__, <span class="string">':: Got'</span>, args, <span class="string">'From'</span>, subject)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, subject)</span>:</span></span><br><span class="line">        subject.register(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self, subject, *args)</span>:</span></span><br><span class="line">        print(type(self).__name__, <span class="string">':: Got'</span>, args, <span class="string">'From'</span>, subject)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subject = Subject()</span><br><span class="line">observer1 = Observer1(subject)</span><br><span class="line">observer2 = Observer2(subject)</span><br><span class="line">subject.notifyAll(<span class="string">'notification'</span>)</span><br><span class="line"><span class="comment"># =&gt; Observer1 :: Got ('notification',) From &lt;__main__.Subject object at 0x7f9a1276fa60&gt;</span></span><br><span class="line"><span class="comment"># =&gt; Observer2 :: Got ('notification',) From &lt;__main__.Subject object at 0x7f9a1276fa60&gt;</span></span><br></pre></td></tr></table></figure><h4 id="现实中的观察者模式"><a href="#现实中的观察者模式" class="headerlink" title="现实中的观察者模式"></a>现实中的观察者模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsPublisher</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__subscribers = []</span><br><span class="line">        self.__latestNews = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attach</span><span class="params">(self, subscriber)</span>:</span></span><br><span class="line">        self.__subscribers.append(subscriber)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detach</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__subscribers.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subscribers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [type(x).__name__ <span class="keyword">for</span> x <span class="keyword">in</span> self.__subscribers]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notifySubscribers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> sub <span class="keyword">in</span> self.__subscribers:</span><br><span class="line">            sub.update()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addNews</span><span class="params">(self, news)</span>:</span></span><br><span class="line">        self.__latestNews = news</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNews</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Got News: "</span>  + self.__latestNews</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subscriber</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSSubscriber</span><span class="params">(Subscriber)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, publisher)</span>:</span></span><br><span class="line">        self.publisher = publisher</span><br><span class="line">        self.publisher.attach(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(type(self).__name__, self.publisher.getNews())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailSubscriber</span><span class="params">(Subscriber)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, publisher)</span>:</span></span><br><span class="line">        self.publisher = publisher</span><br><span class="line">        self.publisher.attach(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(type(self).__name__, self.publisher.getNews())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyOtherSubscriber</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, publisher)</span>:</span></span><br><span class="line">        self.publisher = publisher</span><br><span class="line">        self.publisher.attach(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(type(self).__name__, self.publisher.getNews())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    news_publisher = NewsPublisher()</span><br><span class="line">    <span class="keyword">for</span> Subscriber <span class="keyword">in</span> [SMSSubscriber, EmailSubscriber, AnyOtherSubscriber]:</span><br><span class="line">        Subscriber(news_publisher)</span><br><span class="line">    print(<span class="string">"\nSubscribers: "</span>, news_publisher.subscribers())</span><br><span class="line"></span><br><span class="line">    news_publisher.addNews(<span class="string">'Hello World'</span>)</span><br><span class="line">    news_publisher.notifySubscribers()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\nDetached: "</span>, type(news_publisher.detach()).__name__)</span><br><span class="line">    print(<span class="string">"\nSubscribers: "</span>, news_publisher.subscribers())</span><br><span class="line"></span><br><span class="line">    news_publisher.addNews(<span class="string">'My second news'</span>)</span><br><span class="line">    news_publisher.notifySubscribers()</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Subscribers:  ['SMSSubscriber', 'EmailSubscriber', 'AnyOtherSubscriber']</span></span><br><span class="line"><span class="comment"># =&gt; SMSSubscriber Got News: Hello World</span></span><br><span class="line"><span class="comment"># =&gt; EmailSubscriber Got News: Hello World</span></span><br><span class="line"><span class="comment"># =&gt; AnyOtherSubscriber Got News: Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Detached:  AnyOtherSubscriber</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Subscribers:  ['SMSSubscriber', 'EmailSubscriber']</span></span><br><span class="line"><span class="comment"># =&gt; SMSSubscriber Got News: My second news</span></span><br><span class="line"><span class="comment"># =&gt; EmailSubscriber Got News: My second news</span></span><br></pre></td></tr></table></figure><h4 id="松耦合与观察者模式"><a href="#松耦合与观察者模式" class="headerlink" title="松耦合与观察者模式"></a>松耦合与观察者模式</h4><p>松耦合架构的特性：</p><ul><li>降低了一个元素内发生的更改可能对其他元素产生意外影响的风险</li><li>使得测试、维护和故障排除工作更加简单</li><li>系统可以轻松地分解为可定义的元素</li></ul><p>观察者模式提供了一种实现主体和观察者松耦合的对象设计模式：</p><ul><li>主题对观察者唯一的了解就是它实现的一个特定的接口</li><li>可以随时添加任意的新观察者</li><li>添加新观察者时，完全无需修改主题</li><li>观察者或主题没有绑定在一起，可以彼此独立使用。观察者可以在任何地方重复使用</li><li>主题或观察者中的变化不会相互影响</li></ul><p><strong>观察者模式的优缺点</strong><br>优点：</p><ul><li>使得彼此交互的对象之间保持松耦合</li><li>使得可以在无需对主题或观察者进行任何修改的情况下高效地发送数据到其他对象</li><li>可以随时添加/删除观察者</li></ul><p>缺点：</p><ul><li>观察者接口必须由具体观察者实现，涉及继承，且无法进行组合</li><li>若实现不当的话，观察者可能会增加复杂性，导致性能降低</li><li>在软件应用中，通知有时是不可靠的，并导致竞争条件不一致</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;行为型模式中的观察者模式&quot;&gt;&lt;a href=&quot;#行为型模式中的观察者模式&quot; class=&quot;headerlink&quot; title=&quot;行为型模式中的观察者模式&quot;&gt;&lt;/a&gt;行为型模式中的观察者模式&lt;/h4&gt;&lt;p&gt;创建型模式（比如单例模式）是基于对象的创建机制的，这些模式隔
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Pattern" scheme="https://rollingstarky.github.io/tags/Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——状态模式</title>
    <link href="https://rollingstarky.github.io/2020/12/26/python-design-patterns-state-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/26/python-design-patterns-state-pattern/</id>
    <published>2020-12-25T16:00:00.000Z</published>
    <updated>2020-12-26T15:43:41.879Z</updated>
    
    <content type="html"><![CDATA[<p>行为模式关注的是对象的响应性，它们通过对象之间的交互以实现更复杂的功能。<br>状态模式是一种行为设计模式，在该模式中，一个对象可以基于其内部状态封装多个行为。比如根据收音机的基本状态（AM/FM），当调谐到 AM 或 FM 频道时，扫描频道的行为就会相应地发生动态的改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod, ABCMeta</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"ConcreteStateB"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"ConcreteStateA"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getState</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setState</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self.state = state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state.handle()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context = Context()</span><br><span class="line">stateA = ConcreteStateA()</span><br><span class="line">stateB = ConcreteStateB()</span><br><span class="line"></span><br><span class="line">context.setState(stateA)</span><br><span class="line">context.handle()</span><br><span class="line"><span class="comment"># =&gt; ConcreteStateA</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6875152-3efbf755276685c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><ul><li>State：定义 <code>Handle()</code> 抽象方法的接口。需要通过 <code>ConcreteState</code> 类实现</li><li>ConcreteState：实现 <code>Handle()</code> 方法，可以根据状态变化定义执行的实际操作</li><li>Context：接收客户端请求，维护着对象当前状态的引用，以根据请求调用具体的行为</li></ul><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod, ABCMeta</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doThis</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StartState</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doThis</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"TV Switching ON..."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StopState</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doThis</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"TV Switching OFF..."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TVContext</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getState</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setState</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self.state = state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doThis</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state.doThis()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context = TVContext()</span><br><span class="line">context.getState()</span><br><span class="line"></span><br><span class="line">start = StartState()</span><br><span class="line">stop = StopState()</span><br><span class="line"></span><br><span class="line">context.setState(stop)</span><br><span class="line">context.doThis()</span><br><span class="line"><span class="comment"># =&gt; TV Switching OFF...</span></span><br></pre></td></tr></table></figure><h4 id="真实用例"><a href="#真实用例" class="headerlink" title="真实用例"></a>真实用例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputerState</span>:</span></span><br><span class="line">    name = <span class="string">"state"</span></span><br><span class="line">    allowed = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">switch</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> state.name <span class="keyword">in</span> self.allowed:</span><br><span class="line">            print(<span class="string">"current:"</span>, self, <span class="string">" =&gt; switching to"</span>, state.name)</span><br><span class="line">            self.__class__ = state</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"Current:"</span>, self, <span class="string">" =&gt; switching to"</span>, state.name, <span class="string">"not possible."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Off</span><span class="params">(ComputerState)</span>:</span></span><br><span class="line">    name = <span class="string">"off"</span></span><br><span class="line">    allowed = [<span class="string">'on'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">On</span><span class="params">(ComputerState)</span>:</span></span><br><span class="line">    name = <span class="string">"on"</span></span><br><span class="line">    allowed = [<span class="string">'off'</span>, <span class="string">'suspend'</span>, <span class="string">'hibernate'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Suspend</span><span class="params">(ComputerState)</span>:</span></span><br><span class="line">    name = <span class="string">"suspend"</span></span><br><span class="line">    allowed = [<span class="string">'on'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hibernate</span><span class="params">(ComputerState)</span>:</span></span><br><span class="line">    name = <span class="string">"hibernate"</span></span><br><span class="line">    allowed = [<span class="string">'on'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state = Off()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self.state.switch(state)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    comp = Computer()</span><br><span class="line">    comp.change(On)</span><br><span class="line">    comp.change(Off)</span><br><span class="line"></span><br><span class="line">    comp.change(On)</span><br><span class="line">    comp.change(Suspend)</span><br><span class="line">    comp.change(Hibernate)</span><br><span class="line">    comp.change(On)</span><br><span class="line">    comp.change(Hibernate)</span><br><span class="line"><span class="comment"># =&gt; current: off  =&gt; switching to on</span></span><br><span class="line"><span class="comment"># =&gt; current: on  =&gt; switching to off</span></span><br><span class="line"><span class="comment"># =&gt; current: off  =&gt; switching to on</span></span><br><span class="line"><span class="comment"># =&gt; current: on  =&gt; switching to suspend</span></span><br><span class="line"><span class="comment"># =&gt; Current: suspend  =&gt; switching to hibernate not possible.</span></span><br><span class="line"><span class="comment"># =&gt; current: suspend  =&gt; switching to on</span></span><br><span class="line"><span class="comment"># =&gt; current: on  =&gt; switching to Hibernate</span></span><br></pre></td></tr></table></figure><p><strong>状态模式的优点</strong></p><ul><li>在状态设计模式中，对象的行为是其状态的函数结果，且行为在运行时依旧状态而改变。这消除了对 if/else 或 switch/case 条件逻辑的依赖</li><li>使用状态模式，实现多态行为是很方便的，并且易于添加状态来支持额外的行为</li><li>状态模式提高了聚合性，针对状态的行为被聚合到 ConcreteState 类中，放置在代码的同一个地方</li><li>状态模式不仅改善了扩展应用程序行为时的灵活性，且提高了代码的可维护性。一个 ConcreteState 类即对应一种行为</li></ul><p><strong>状态模式的缺点</strong></p><ul><li>类爆炸：由于每个状态都需要在 ConcreteState 中定义，可能导致创建太多功能较为单一的类。既增加了代码量，又使得状态机的结构更加难以审查</li><li>随着新行为的引入，Context 类需要进行相应的更新以处理每个行为，使得上下文行为更容易受到每个新行为的影响</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;行为模式关注的是对象的响应性，它们通过对象之间的交互以实现更复杂的功能。&lt;br&gt;状态模式是一种行为设计模式，在该模式中，一个对象可以基于其内部状态封装多个行为。比如根据收音机的基本状态（AM/FM），当调谐到 AM 或 FM 频道时，扫描频道的行为就会相应地发生动态的改变。
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Patterns" scheme="https://rollingstarky.github.io/tags/Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——命令模式</title>
    <link href="https://rollingstarky.github.io/2020/12/26/python-design-patterns-command-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/26/python-design-patterns-command-pattern/</id>
    <published>2020-12-25T16:00:00.000Z</published>
    <updated>2020-12-26T15:41:53.902Z</updated>
    
    <content type="html"><![CDATA[<p>命令模式是一种行为设计模式。可以用来实现比如安装软件时的安装向导功能，通常安装向导会通过多个步骤根据用户的选择了解用户的偏好。安装向导首先启动一个名为 Command 的对象，用于存储在向导的多个步骤中用户指定的选项。当用户在最后一个步骤中点击完成按钮时，Command 对象就会运行 execute() 方法，该方法会考察所有存储的选项并完成相应的安装过程。</p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-db6d1fb7abddb771.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><p>命令模式通常包含以下术语：</p><ul><li>Command 对象了解 Receiver 对象的情况，并能调用其方法</li><li>调用者（Invoker）方法的参数值存储在 Command 对象中</li><li>调用者知道如何执行命令</li><li>客户端（Client）用来创建 Command 对象并设置其接收者</li></ul><p>命令模式的主要意图：</p><ul><li>将请求封装为对象</li><li>可用不同的请求对客户端进行参数化</li><li>允许将请求保存在队列中</li><li>提供面向对象的回调</li></ul><p>命令模式的适用场景：</p><ul><li>根据需要执行的操作对对象进行参数化</li><li>将操作添加到队列并在不同地点执行请求</li><li>创建一个结构根据较小的操作来完成高级操作</li></ul><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyStockOrder</span><span class="params">(Order)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stock)</span>:</span></span><br><span class="line">        self.stock = stock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stock.buy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellStockOrder</span><span class="params">(Order)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stock)</span>:</span></span><br><span class="line">        self.stock = stock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stock.sell()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Agent</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__orderQueue = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">placeOrder</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        self.__orderQueue.append(order)</span><br><span class="line">        order.execute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StockTrade</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buy</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"You will buy stocks"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sell</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"You will sell stocks"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    stock = StockTrade()</span><br><span class="line">    buyStock = BuyStockOrder(stock)</span><br><span class="line">    sellStock = SellStockOrder(stock)</span><br><span class="line"></span><br><span class="line">    agent = Agent()</span><br><span class="line">    agent.placeOrder(buyStock)</span><br><span class="line">    agent.placeOrder(sellStock)</span><br><span class="line"><span class="comment"># =&gt; You will buy stocks</span></span><br><span class="line"><span class="comment"># =&gt; You will sell stocks</span></span><br></pre></td></tr></table></figure><ul><li>Order 类 -&gt; Command 对象</li><li>BuyStockOrder 和 SellStockOrder 类 -&gt; ConcreteCommand 对象，为交易系统定义适当的操作</li><li>StockTrade 类 -&gt; Receiver 对象，定义了多个方法（动作）可以被 ConcreteCommand 调用以买入或卖出股票</li><li>Agent 类 -&gt; Invoker 对象，作为客户端和 StockTrade 的中介，执行客户下达的订单</li></ul><p>命令模式的优点：</p><ul><li>将调用操作的类与知道如何执行该操作的类解耦</li><li>借助队列系统，可以创建一系列命令</li><li>添加新命令更加容易，无需更改现有代码</li><li>可以使用命令模式定义回滚系统</li></ul><p>命令模式的缺点：</p><ul><li>为了实现目标，需要大量的类和对象进行协作</li><li>每个单独的命令都是一个 ConcreteCommand 类，增加了实现和维护的成本</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;命令模式是一种行为设计模式。可以用来实现比如安装软件时的安装向导功能，通常安装向导会通过多个步骤根据用户的选择了解用户的偏好。安装向导首先启动一个名为 Command 的对象，用于存储在向导的多个步骤中用户指定的选项。当用户在最后一个步骤中点击完成按钮时，Command 对
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Patterns" scheme="https://rollingstarky.github.io/tags/Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——门面模式</title>
    <link href="https://rollingstarky.github.io/2020/12/25/python-design-patterns-facade-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/25/python-design-patterns-facade-pattern/</id>
    <published>2020-12-24T16:00:00.000Z</published>
    <updated>2020-12-25T11:14:44.369Z</updated>
    
    <content type="html"><![CDATA[<p>门面（facade）指建筑物的表面，尤其是最有吸引力的那一面。当人们从建筑物旁边经过时，可以欣赏其外部面貌，而不必了解其本身结构的复杂性。门面在隐藏内部复杂性的同时，也为客户端提供了一个可以轻松访问的接口。</p><p>比如需要到某个商店买东西，但对于该商店的布局并不清楚。可以直接找店主说明需要哪些东西，由店主将这些商品找到并提供给顾客。即店主作为购物的接口，顾客无需了解具体商品的位置。</p><p>门面设计模式的特点：</p><ul><li>为子系统的一组接口提供一个统一的高级接口，帮助客户端以更简单的方式使用这些子系统</li><li>门面并不是封装子系统，而是对底层子系统进行组合。即用单个接口对象表示复杂的子系统</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/6875152-19e85bda057736af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><p><strong>门面</strong></p><ul><li>一个接口，知道某个请求应该交由那个子系统处理</li><li>通过组合的方式将客户端的请求委派给相应的子系统对象</li></ul><p><strong>系统</strong></p><ul><li>实现子系统的功能，由一组负责不同任务的类来表示</li><li>处理门面对象分配的工作，但并不知道门面也不引用它</li></ul><p><strong>客户端</strong></p><ul><li>会实例化门面</li><li>会向门面提出请求</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventManager</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Event Manager:: Let me talk to the folks\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrange</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.hotelier = Hotelier()</span><br><span class="line">        self.hotelier.bookHotel()</span><br><span class="line"></span><br><span class="line">        self.florist = Florist()</span><br><span class="line">        self.florist.setFlowerRequirements()</span><br><span class="line"></span><br><span class="line">        self.caterer = Caterer()</span><br><span class="line">        self.caterer.setCuisine()</span><br><span class="line"></span><br><span class="line">        self.musician = Musician()</span><br><span class="line">        self.musician.setMusicType()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hotelier</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Arranging the Hotel for Marriage? --"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__isAvailable</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Is the Hotel free for the event on given day?"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bookHotel</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.__isAvailable():</span><br><span class="line">            print(<span class="string">"Registered the Booking\n\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Florist</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Flower Decorations for the Event? --"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setFlowerRequirements</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Carnations, Roses and Lilies would be used for Decorations\n\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caterer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Food Arrangements for the Event --"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCuisine</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Chinese &amp; Continental Cuisine to be served\n\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Musician</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Musical Arrangements for the Marriage --"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setMusicType</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Jazz and Classical will be played\n\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"You:: Whoa! Marriage Arrangements??!!!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">asskEventManager</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"You:: Let's Contact the Event Manager\n\n"</span>)</span><br><span class="line">        em = EventManager()</span><br><span class="line">        em.arrange()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"You:: Thanks to Event Manager, all preparations done!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">you = You()</span><br><span class="line">you.asskEventManager()</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; You:: Whoa! Marriage Arrangements??!!!</span></span><br><span class="line"><span class="comment"># =&gt; You:: Let's Contact the Event Manager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Event Manager:: Let me talk to the folks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Arranging the Hotel for Marriage? --</span></span><br><span class="line"><span class="comment"># =&gt; Is the Hotel free for the event on given day?</span></span><br><span class="line"><span class="comment"># =&gt; Registered the Booking</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Flower Decorations for the Event? --</span></span><br><span class="line"><span class="comment"># =&gt; Carnations, Roses and Lilies would be used for Decorations</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Food Arrangements for the Event --</span></span><br><span class="line"><span class="comment"># =&gt; Chinese &amp; Continental Cuisine to be served</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Musical Arrangements for the Marriage --</span></span><br><span class="line"><span class="comment"># =&gt; Jazz and Classical will be played</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; You:: Thanks to Event Manager, all preparations done!</span></span><br></pre></td></tr></table></figure><h4 id="最少知识原则"><a href="#最少知识原则" class="headerlink" title="最少知识原则"></a>最少知识原则</h4><p>门面能够将客户端与实现具体功能的子系统解耦，其背后的设计原理即最少知识原则。</p><ul><li>在设计系统时，对于创建的每个对象，都应该考察与之交互的类的数量，以及交互的方式</li><li>避免创建许多彼此紧密耦合的类。若类之间存在大量的依赖关系，系统就会变得难以维护，应坚决避免</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;门面（facade）指建筑物的表面，尤其是最有吸引力的那一面。当人们从建筑物旁边经过时，可以欣赏其外部面貌，而不必了解其本身结构的复杂性。门面在隐藏内部复杂性的同时，也为客户端提供了一个可以轻松访问的接口。&lt;/p&gt;
&lt;p&gt;比如需要到某个商店买东西，但对于该商店的布局并不清楚
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Patterns" scheme="https://rollingstarky.github.io/tags/Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——代理模式</title>
    <link href="https://rollingstarky.github.io/2020/12/25/python-design-patterns-proxy-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/25/python-design-patterns-proxy-pattern/</id>
    <published>2020-12-24T16:00:00.000Z</published>
    <updated>2020-12-25T11:10:52.713Z</updated>
    
    <content type="html"><![CDATA[<p>代理通常是指一个介于寻求方和提供方之间的中介系统。寻求发是发出请求的一方，而提供方则是根据请求提供资源的一方。<br>在设计模式中，代理通常是封装实际服务对象的装饰器或代理人，可以为其包装的对象提供附加功能同时无需改变对象本身的代码。其主要目的是为其他对象提供一个代理者或占位符，从而控制对实际对象的访问。</p><p>代理设计模式的主要工作：</p><ul><li>为其他对象提供代理，实现对原始对象的访问控制</li><li>可以用作一个中间层或接口，以支持分布式访问</li><li>通过增加代理，保护真正的组件不受意外影响</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/6875152-a919f0e04969d8de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># agent.py</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Payment</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_pay</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span><span class="params">(Payment)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.card = <span class="keyword">None</span></span><br><span class="line">        self.account = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getAccount</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.account = self.card</span><br><span class="line">        <span class="keyword">return</span> self.account</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hasFunds</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Bank:: Checking if Account "</span>, self.__getAccount(), <span class="string">" has enough funds"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCard</span><span class="params">(self, card)</span>:</span></span><br><span class="line">        self.card = card</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_pay</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.__hasFunds():</span><br><span class="line">            print(<span class="string">"Bank:: Paying the merhant"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"Bank:: Sorry, not enough funds"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DebitCard</span><span class="params">(Payment)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.bank = Bank()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_pay</span><span class="params">(self)</span>:</span></span><br><span class="line">        card = input(<span class="string">"Proxy:: Punch in Card Number: "</span>)</span><br><span class="line">        self.bank.setCard(card)</span><br><span class="line">        <span class="keyword">return</span> self.bank.do_pay()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"You:: Let's buy the Denim shirt"</span>)</span><br><span class="line">        self.debitCard = DebitCard()</span><br><span class="line">        self.isPurchased = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_payment</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.isPurchased = self.debitCard.do_pay()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.isPurchased:</span><br><span class="line">            print(<span class="string">"You:: Denim shirt is Mine :-)"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"You:: I should earn more :("</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">you = You()</span><br><span class="line">you.make_payment()</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python agent.py</span><br><span class="line"><span class="function">You:: <span class="title">Let</span>'<span class="title">s</span> <span class="title">buy</span> <span class="title">the</span> <span class="title">Denim</span> <span class="title">shirt</span></span></span><br><span class="line"><span class="function"><span class="title">Proxy</span>:: <span class="title">Punch</span> <span class="title">in</span> <span class="title">Card</span> <span class="title">Number</span>: 12345</span></span><br><span class="line"><span class="function"><span class="title">Bank</span>:: <span class="title">Checking</span> <span class="title">if</span> <span class="title">Account</span>  12345  <span class="title">has</span> <span class="title">enough</span> <span class="title">funds</span></span></span><br><span class="line"><span class="function"><span class="title">Bank</span>:: <span class="title">Paying</span> <span class="title">the</span> <span class="title">merhant</span></span></span><br><span class="line"><span class="function"><span class="title">You</span>:: <span class="title">Denim</span> <span class="title">shirt</span> <span class="title">is</span> <span class="title">Mine</span> :-)</span></span><br></pre></td></tr></table></figure><p>关于类 You（对应 UML 图中的 client）的解释：</p><ul><li>该类用于实现客户端的行为</li><li><code>__init__()</code> 会调用代理并将其实例化</li><li><code>make_payment()</code> 方法表示购买动作，会在内部调用代理的付款方法</li></ul><p>关于类 Bank（对应 UML 图中的 RealSubject）的解释：</p><ul><li>该类实际完成从顾客账户向商家划账的动作（<code>do_pay()</code>）</li><li>该类提供了多个方法来处理有关付款的一系列逻辑（<code>__getAccount()</code>、<code>__hasFunds()</code>、<code>do_pay()</code> 等）</li><li>通过 <code>setCard()</code> 方法从代理处获取借记卡信息</li></ul><p>关于 DebitCard 类（对应 UML 图中的 Proxy）的解释：</p><ul><li>该类用于实现代理的行为，充当真实主题（银行）的代理</li><li>顾客需要付款时，无需跑去银行提款再回到商家支付，而是调用 DebitCard 的 <code>do_pay()</code> 方法</li><li>DebitCard 类在内部控制真实主题（Bank）的创建，并向银行提供借记卡的详细信息</li><li>Bank 对象在内部对账户进行检查并完成支付动作</li></ul><h4 id="代理模式的优点"><a href="#代理模式的优点" class="headerlink" title="代理模式的优点"></a>代理模式的优点</h4><ul><li>可以通过缓存笨重的对象或频繁访问的对象来提高应用程序的性能</li><li>可以提供对于真实对象的访问授权</li><li>远程代理还便于与远程服务器进行交互，并监视系统</li></ul><h4 id="门面模式与代理模式的比较"><a href="#门面模式与代理模式的比较" class="headerlink" title="门面模式与代理模式的比较"></a>门面模式与代理模式的比较</h4><table><thead><tr><th>代理模式</th><th>门面模式</th></tr></thead><tbody><tr><td>为其他对象提供代理或占位符，以控制对原始对象的访问</td><td>为类的大型子系统提供了一个简单的接口</td></tr><tr><td>代理对象具有与目标对象相同的接口，并保存目标对象的引用</td><td>实现了子系统之间通信和依赖性的最小化</td></tr><tr><td>充当客户端和被封装的对象之间的中介</td><td>提供了单一的简单接口</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代理通常是指一个介于寻求方和提供方之间的中介系统。寻求发是发出请求的一方，而提供方则是根据请求提供资源的一方。&lt;br&gt;在设计模式中，代理通常是封装实际服务对象的装饰器或代理人，可以为其包装的对象提供附加功能同时无需改变对象本身的代码。其主要目的是为其他对象提供一个代理者或占
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="OOP" scheme="https://rollingstarky.github.io/tags/OOP/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Patterns" scheme="https://rollingstarky.github.io/tags/Patterns/"/>
    
      <category term="Proxy" scheme="https://rollingstarky.github.io/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Django models 详解之聚合查询（aggregate）与分组查询（annotate）</title>
    <link href="https://rollingstarky.github.io/2020/12/22/django-models-aggregate-and-annotate/"/>
    <id>https://rollingstarky.github.io/2020/12/22/django-models-aggregate-and-annotate/</id>
    <published>2020-12-21T16:00:00.000Z</published>
    <updated>2020-12-22T15:18:43.687Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、测试代码及数据"><a href="#一、测试代码及数据" class="headerlink" title="一、测试代码及数据"></a>一、测试代码及数据</h4><p><strong>models.py</strong> 代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">300</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    authors = models.ManyToManyField(Author)</span><br><span class="line">    pubdate = models.DateField()</span><br></pre></td></tr></table></figure><p><strong>测试数据</strong></p><p>authors：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"路人甲"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"路人乙"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"路人丙"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">28</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"路人丁"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">50</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>books：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"人之初"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"38.80"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2020-12-01"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"性本善"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"28.40"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2020-06-01"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">2</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"性相近"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"15.20"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2019-10-01"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">3</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"习相远"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"35.20"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2019-07-01"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">4</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"苟不教"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"5.20"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2018-07-01"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="number">4</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"性乃迁"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"55.20"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2018-12-01"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="number">4</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"教之道"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"33.20"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2018-12-23"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="number">3</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"贵以专"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"27.20"</span>,</span><br><span class="line">        <span class="attr">"pubdate"</span>: <span class="string">"2017-12-23"</span>,</span><br><span class="line">        <span class="attr">"authors"</span>: [</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">4</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h4 id="二、常用聚合操作"><a href="#二、常用聚合操作" class="headerlink" title="二、常用聚合操作"></a>二、常用聚合操作</h4><p>获取所有书籍的数量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.count()</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>获取由路人甲参与著作的所有书籍的数量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.filter(authors__name__contains=<span class="string">'路人甲'</span>).count()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>获取所有书籍的平均价格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.all().aggregate(Avg(<span class="string">'price'</span>))</span><br><span class="line">&#123;<span class="string">'price__avg'</span>: Decimal(<span class="string">'29.800000'</span>)&#125;</span><br></pre></td></tr></table></figure></p><p>获取所有书籍中的最高价格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.all().aggregate(Max(<span class="string">'price'</span>))</span><br><span class="line">&#123;<span class="string">'price__max'</span>: Decimal(<span class="string">'55.20'</span>)&#125;</span><br></pre></td></tr></table></figure></p><h5 id="涉及到一对多或多对多关系的聚合查询"><a href="#涉及到一对多或多对多关系的聚合查询" class="headerlink" title="涉及到一对多或多对多关系的聚合查询"></a>涉及到一对多或多对多关系的聚合查询</h5><p>计算每一位作者各自参与写作了多少本书：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors=Author.objects.annotate(num_books=Count(<span class="string">'book'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors</span><br><span class="line">&lt;QuerySet [&lt;Author: Author object (<span class="number">1</span>)&gt;, &lt;Author: Author object (<span class="number">2</span>)&gt;, &lt;Author: Author object (<span class="number">3</span>)&gt;, &lt;Author: Author object (<span class="number">4</span>)&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors[<span class="number">0</span>].num_books</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors.values_list(<span class="string">'name'</span>, <span class="string">'num_books'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'路人甲'</span>, <span class="number">3</span>), (<span class="string">'路人乙'</span>, <span class="number">3</span>), (<span class="string">'路人丙'</span>, <span class="number">4</span>), (<span class="string">'路人丁'</span>, <span class="number">4</span>)]&gt;</span><br></pre></td></tr></table></figure></p><p>即作者包含路人甲的书籍有3本，以此类推。</p><p>计算每一位作者各自参与写作的书籍数量，根据书籍出版年份是否在2020年以前分界：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>before_2020 = Count(<span class="string">'book'</span>, filter=Q(book__pubdate__lt=<span class="string">'2020-01-01'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>after_2020 = Count(<span class="string">'book'</span>, filter=Q(book__pubdate__gt=<span class="string">'2020-01-01'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors = Author.objects.annotate(before_2020=before_2020).annotate(after_2020=after_2020)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors</span><br><span class="line">&lt;QuerySet [&lt;Author: Author object (<span class="number">1</span>)&gt;, &lt;Author: Author object (<span class="number">2</span>)&gt;, &lt;Author: Author object (<span class="number">3</span>)&gt;, &lt;Author: Author object (<span class="number">4</span>)&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors[<span class="number">0</span>].before_2020</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors.values_list(<span class="string">'name'</span>, <span class="string">'before_2020'</span>, <span class="string">'after_2020'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'路人甲'</span>, <span class="number">2</span>, <span class="number">1</span>), (<span class="string">'路人乙'</span>, <span class="number">2</span>, <span class="number">1</span>), (<span class="string">'路人丙'</span>, <span class="number">4</span>, <span class="number">0</span>), (<span class="string">'路人丁'</span>, <span class="number">4</span>, <span class="number">0</span>)]&gt;</span><br></pre></td></tr></table></figure></p><p>即作者包含路人甲的书籍，2020年以前出版的有2本，2020年以后出版的有1本。以此类推。</p><p>获取每一位作者各自参与著作的书籍数量，将输出结果按书籍数量由大到小的顺序排序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors = Author.objects.annotate(num_books=Count(<span class="string">'book'</span>)).order_by(<span class="string">'-num_books'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors</span><br><span class="line">&lt;QuerySet [&lt;Author: Author object (<span class="number">3</span>)&gt;, &lt;Author: Author object (<span class="number">4</span>)&gt;, &lt;Author: Author object (<span class="number">1</span>)&gt;, &lt;Author: Author object (<span class="number">2</span>)&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors.values_list(<span class="string">'name'</span>, <span class="string">'num_books'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'路人丙'</span>, <span class="number">4</span>), (<span class="string">'路人丁'</span>, <span class="number">4</span>), (<span class="string">'路人甲'</span>, <span class="number">3</span>), (<span class="string">'路人乙'</span>, <span class="number">3</span>)]&gt;</span><br></pre></td></tr></table></figure></p><h4 id="三、aggregate"><a href="#三、aggregate" class="headerlink" title="三、aggregate"></a>三、aggregate</h4><p>在聚合查询中，Django 支持通过 <code>aggregate()</code> 方法从整个 <strong>QuerySet</strong> 中计算出一个汇总数据。如获取所有书籍的平均价格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.all().aggregate(Avg(<span class="string">'price'</span>))</span><br><span class="line">&#123;<span class="string">'price__avg'</span>: Decimal(<span class="string">'29.800000'</span>)&#125;</span><br></pre></td></tr></table></figure></p><p>上述语句中的 <code>all()</code> 可以省略。<code>aggregate()</code> 的参数表示我们想要做聚合计算的那一列数据，其中的 <code>&#39;price&#39;</code> 即表示 <strong>Book</strong> 模型的 <strong>price</strong> 字段。</p><p><code>aggregate()</code> 对于 <strong>QuerySet</strong> 来说是一种终止语句，会返回字典形式的键值对作为计算结果。其中的键会根据聚合的字段自动生成，也可以手动指定：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.all().aggregate(average_price=Avg(<span class="string">'price'</span>))</span><br><span class="line">&#123;<span class="string">'average_price'</span>: Decimal(<span class="string">'29.800000'</span>)&#125;</span><br></pre></td></tr></table></figure></p><p>如果想要同时完成多个聚合查询操作，可以为 <code>aggregate()</code> 添加多个参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg, Max, Min</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Book.objects.aggregate(Avg(<span class="string">'price'</span>), Max(<span class="string">'price'</span>), Min(<span class="string">'price'</span>))</span><br><span class="line">&#123;<span class="string">'price__avg'</span>: Decimal(<span class="string">'29.800000'</span>), <span class="string">'price__max'</span>: Decimal(<span class="string">'55.20'</span>), <span class="string">'price__min'</span>: Decimal(<span class="string">'5.20'</span>)&#125;</span><br></pre></td></tr></table></figure></p><h4 id="四、annotate"><a href="#四、annotate" class="headerlink" title="四、annotate"></a>四、annotate</h4><p>借助 <code>annotate()</code> 方法，Django 可以从 <strong>QuerySet</strong> 的每一个对象中计算出对应的独立的汇总数据。比如想获得 <strong>Book</strong> 模型中每一本书的作者的数量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = Book.objects.annotate(num_authors=Count(<span class="string">'authors'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q</span><br><span class="line">&lt;QuerySet [&lt;Book: Book object (<span class="number">1</span>)&gt;, &lt;Book: Book object (<span class="number">2</span>)&gt;, &lt;Book: Book object (<span class="number">3</span>)&gt;, &lt;Book: Book object (<span class="number">4</span>)&gt;, &lt;Book: Book object (<span class="number">5</span>)&gt;, &lt;Book: Book object (<span class="number">6</span>)&gt;, &lt;Book: Book object (<span class="number">7</span>)&gt;, &lt;Book: Book object (<span class="number">8</span>)&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q[<span class="number">0</span>].num_authors</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.values_list(<span class="string">'name'</span>, <span class="string">'num_authors'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'人之初'</span>, <span class="number">1</span>), (<span class="string">'性本善'</span>, <span class="number">1</span>), (<span class="string">'性相近'</span>, <span class="number">1</span>), (<span class="string">'习相远'</span>, <span class="number">1</span>), (<span class="string">'苟不教'</span>, <span class="number">3</span>), (<span class="string">'性乃迁'</span>, <span class="number">3</span>), (<span class="string">'教之道'</span>, <span class="number">2</span>), (<span class="string">'贵以专'</span>, <span class="number">2</span>)]&gt;</span><br></pre></td></tr></table></figure></p><p>不同于 <code>aggregate()</code>，<code>annotate()</code> 对于 <strong>QuerySet</strong> 来说并不是终止语句，<code>annotate()</code> 方法的输出结果仍是 <strong>QuerySet</strong> 对象。该对象可以继续执行被 <strong>QuerySet</strong> 支持的任意操作，如 <code>filter()</code>、<code>order_by()</code> 等，甚至另一个 <code>annotate()</code>。</p><h4 id="五、join-amp-aggregate"><a href="#五、join-amp-aggregate" class="headerlink" title="五、join &amp; aggregate"></a>五、join &amp; aggregate</h4><p>某些情况下，你想要聚合的字段并不属于当前正在查询的模型，而是属于关联于当前模型的另一个模型。在对这些字段进行聚合查询时，Django 允许使用与 <code>filter()</code> 中相同的用于指定关联字段的双下划线语法。</p><p>比如想要获取每一位作者所著书籍的价格区间：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max, Min</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors = Author.objects.annotate(min_price=Min(<span class="string">'book__price'</span>), max_price=Max(<span class="string">'book__price'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>authors.values_list(<span class="string">'name'</span>, <span class="string">'min_price'</span>, <span class="string">'max_price'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'路人甲'</span>, Decimal(<span class="string">'5.20'</span>), Decimal(<span class="string">'38.80'</span>)), (<span class="string">'路人乙'</span>, Decimal(<span class="string">'28.40'</span>), Decimal(<span class="string">'55.20'</span>)), (<span class="string">'路人丙'</span>, Decimal(<span class="string">'5.20'</span>), Decimal(<span class="string">'55.20'</span>)), (<span class="string">'路人丁'</span>, Decimal(<span class="string">'5.20'</span>), Decimal(<span class="string">'55.20'</span>))]&gt;</span><br></pre></td></tr></table></figure></p><p>即作者为路人甲的书籍中，最低的价格为 5.20，最高的价格为 38.80。</p><h4 id="六、filter-或-order-by-应用到-annotate"><a href="#六、filter-或-order-by-应用到-annotate" class="headerlink" title="六、filter() 或 order_by() 应用到 annotate()"></a>六、filter() 或 order_by() 应用到 annotate()</h4><p>如查找所有多人合著（作者数量大于 1）的书籍列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>books = Book.objects.annotate(num_authors=Count(<span class="string">'authors'</span>)).filter(num_authors__gt=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>books</span><br><span class="line">&lt;QuerySet [&lt;Book: Book object (<span class="number">5</span>)&gt;, &lt;Book: Book object (<span class="number">6</span>)&gt;, &lt;Book: Book object (<span class="number">7</span>)&gt;, &lt;Book: Book object (<span class="number">8</span>)&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>books.values_list(<span class="string">'name'</span>, <span class="string">'num_authors'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'苟不教'</span>, <span class="number">3</span>), (<span class="string">'性乃迁'</span>, <span class="number">3</span>), (<span class="string">'教之道'</span>, <span class="number">2</span>), (<span class="string">'贵以专'</span>, <span class="number">2</span>)]&gt;</span><br></pre></td></tr></table></figure></p><p>根据作者数量对全部书籍进行排序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>books = Book.objects.annotate(num_authors=Count(<span class="string">'authors'</span>)).order_by(<span class="string">'num_authors'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>books</span><br><span class="line">&lt;QuerySet [&lt;Book: Book object (<span class="number">2</span>)&gt;, &lt;Book: Book object (<span class="number">4</span>)&gt;, &lt;Book: Book object (<span class="number">1</span>)&gt;, &lt;Book: Book object (<span class="number">3</span>)&gt;, &lt;Book: Book object (<span class="number">8</span>)&gt;, &lt;Book: Book object (<span class="number">7</span>)&gt;, &lt;Book: Book object (<span class="number">5</span>)&gt;, &lt;Book: Book object (<span class="number">6</span>)&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>books.values_list(<span class="string">'name'</span>, <span class="string">'num_authors'</span>)</span><br><span class="line">&lt;QuerySet [(<span class="string">'性本善'</span>, <span class="number">1</span>), (<span class="string">'习相远'</span>, <span class="number">1</span>), (<span class="string">'人之初'</span>, <span class="number">1</span>), (<span class="string">'性相近'</span>, <span class="number">1</span>), (<span class="string">'教之道'</span>, <span class="number">2</span>), (<span class="string">'贵以专'</span>, <span class="number">2</span>), (<span class="string">'苟不教'</span>, <span class="number">3</span>), (<span class="string">'性乃迁'</span>, <span class="number">3</span>)]&gt;</span><br></pre></td></tr></table></figure></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://docs.djangoproject.com/en/3.1/topics/db/aggregation/" target="_blank" rel="noopener">Django 官方文档 —— Aggregation</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、测试代码及数据&quot;&gt;&lt;a href=&quot;#一、测试代码及数据&quot; class=&quot;headerlink&quot; title=&quot;一、测试代码及数据&quot;&gt;&lt;/a&gt;一、测试代码及数据&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;models.py&lt;/strong&gt; 代码&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Web" scheme="https://rollingstarky.github.io/tags/Web/"/>
    
      <category term="Django" scheme="https://rollingstarky.github.io/tags/Django/"/>
    
      <category term="Models" scheme="https://rollingstarky.github.io/tags/Models/"/>
    
      <category term="Aggregate" scheme="https://rollingstarky.github.io/tags/Aggregate/"/>
    
      <category term="Annotate" scheme="https://rollingstarky.github.io/tags/Annotate/"/>
    
      <category term="Backend" scheme="https://rollingstarky.github.io/tags/Backend/"/>
    
  </entry>
  
  <entry>
    <title>Python 设计模式——工厂模式</title>
    <link href="https://rollingstarky.github.io/2020/12/22/python-design-patterns-factory-pattern/"/>
    <id>https://rollingstarky.github.io/2020/12/22/python-design-patterns-factory-pattern/</id>
    <published>2020-12-21T16:00:00.000Z</published>
    <updated>2020-12-22T15:25:43.683Z</updated>
    
    <content type="html"><![CDATA[<p>在面向对象编程中，<strong>工厂</strong>表示一个负责创建其他类型的对象的类。<br>通常作为工厂的类会实现多个关联的方法，客户端通过某些参数调用这些方法，工厂则负责创建对应类型的对象并返回给客户端。</p><p>工厂模式的优点：</p><ul><li>松耦合。对象的创建独立于类的实现</li><li>客户端无需了解创建对象的类，只需知道需要传递的接口、方法和参数即可。简化了客户端的实现</li><li>可以轻松地在工厂中添加其他类来创建其他类型的对象，无需更改客户端代码</li><li>工厂可以重用现有的对象</li></ul><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_say</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Bhow Bhow"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Meow Meow"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForestFactory</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_sound</span><span class="params">(self, object_type)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> eval(object_type)().do_say()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ff = ForestFactory()</span><br><span class="line">    animal = input(<span class="string">"Which animal should make sound, Dog or Cat\n"</span>)</span><br><span class="line">    ff.make_sound(animal)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python make_sound.py</span><br><span class="line">Which animal should make sound, Dog or Cat</span><br><span class="line">Dog</span><br><span class="line">Bhow Bhow</span><br><span class="line">$ python make_sound.py</span><br><span class="line">Which animal should make sound, Dog or Cat</span><br><span class="line">Cat</span><br><span class="line">Meow Meow</span><br></pre></td></tr></table></figure><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>工厂方法模式的特点：</p><ul><li>定义一个接口来创建对象，但工厂本身并不负责创建动作，而是由其子类决定实例化哪些类</li><li>工厂方法的创建是通过继承而不是通过实例化来完成的</li><li>工厂方法使设计更具有定制性。可以返回相同的实例或子类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Section</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonalSection</span><span class="params">(Section)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Personal Section"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlbumSection</span><span class="params">(Section)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Album Section"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PatentSection</span><span class="params">(Section)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Patent Section"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublicationSection</span><span class="params">(Section)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Publication Section"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sections = []</span><br><span class="line">        self.createProfile()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createProfile</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSections</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.sections</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addSections</span><span class="params">(self, section)</span>:</span></span><br><span class="line">        self.sections.append(section)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedin</span><span class="params">(Profile)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createProfile</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.addSections(PersonalSection())</span><br><span class="line">        self.addSections(PatentSection())</span><br><span class="line">        self.addSections(PublicationSection())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">facebook</span><span class="params">(Profile)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createProfile</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.addSections(PersonalSection())</span><br><span class="line">        self.addSections(AlbumSection())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    profile_type = input(<span class="string">"Which Profile you'd like to create?\n[LinkedIn or FaceBook] "</span>)</span><br><span class="line">    profile = eval(profile_type.lower())()</span><br><span class="line">    print(<span class="string">"Creating Profile..."</span>, type(profile).__name__)</span><br><span class="line">    print(<span class="string">"Profile has sections --"</span>, profile.getSections())</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python profile.py</span><br><span class="line">Which Profile you'd like to create?</span><br><span class="line">[LinkedIn or FaceBook] LinkedIn</span><br><span class="line">Creating Profile... linkedin</span><br><span class="line">Profile has sections -- [&lt;__main__.PersonalSection object <span class="built_in">at</span> <span class="number">0</span>x7f3d25e53c70&gt;, &lt;__main__.PatentSection object <span class="built_in">at</span> <span class="number">0</span>x7f3d25e53ca0&gt;, &lt;__main__.PublicationSection object <span class="built_in">at</span> <span class="number">0</span>x7f3d25e53df0&gt;]</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6875152-f952b4d31d53092f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><p>Profile 抽象类代表 Creator，提供了 createProfile() 工厂方法，用于创建带有适当板块的个人信息界面。但 Profile 并不清楚某个特定界面应该具有哪些板块，如 Facebook 需要提供个人信息板块和相册区。createProfile() 工厂方法实际是由 Profile 的子类去实现的。</p><p>两个 Profile 的子类 linkedin 和 facebook 代表 ConcreteCreator，每个类都实现了 createProfile 方法，该方法在运行时创建多个板块（ConcreteProducts）。</p><p><strong>工厂方法模式的优点</strong></p><ul><li>强大的灵活性，代码更加通用。实现哪些类取决于接口（Product），而不是 ConcreteProduct 类</li><li>松耦合。创建对象的代码与使用对象的代码是分离的。客户端不需要关心传递哪些参数以及需要实例化哪些类</li></ul><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>抽象工厂模式的主要目的是提供一个接口来创建一系列相关的对象，而无需指定具体的类。因此可以帮助客户端一次使用来自一个产品/系列的多个对象。比如正在开发的应用是平台无关的，则需要对不同平台下的各种依赖项（包括操作系统、文件系统调用等）进行抽象处理，由抽象工厂为各个平台创建所需的服务，客户端就不必直接创建平台对象了。</p><p><img src="https://upload-images.jianshu.io/upload_images/6875152-68e798bf2b3e0e48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaFactory</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createNonVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndianPizzaFactory</span><span class="params">(PizzaFactory)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> DeluxVeggiePizza()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createNonVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ChickenPizza()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">USPizzaFactory</span><span class="params">(PizzaFactory)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> MexicanVegPizza()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createNonVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HamPizza()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VegPizza</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(self, VegPizza)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonVegPizza</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(self, VegPizza)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeluxVeggiePizza</span><span class="params">(VegPizza)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Prepare "</span>, type(self).__name__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChickenPizza</span><span class="params">(NonVegPizza)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(self, VegPizza)</span>:</span></span><br><span class="line">        print(type(self).__name__, <span class="string">" is served with Chicken on "</span>, type(VegPizza).__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MexicanVegPizza</span><span class="params">(VegPizza)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Prepare "</span>, type(self).__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HamPizza</span><span class="params">(NonVegPizza)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(self, VegPizza)</span>:</span></span><br><span class="line">        print(type(self).__name__, <span class="string">" is served with Ham on "</span>, type(VegPizza).__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makePizzas</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> factory <span class="keyword">in</span> [IndianPizzaFactory(), USPizzaFactory()]:</span><br><span class="line">            self.factory = factory</span><br><span class="line">            self.NonVegPizza = self.factory.createNonVegPizza()</span><br><span class="line">            self.VegPizza = self.factory.createVegPizza()</span><br><span class="line">            self.VegPizza.prepare()</span><br><span class="line">            self.NonVegPizza.serve(self.VegPizza)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pizza = PizzaStore()</span><br><span class="line">pizza.makePizzas()</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; Prepare  DeluxVeggiePizza</span></span><br><span class="line"><span class="comment"># =&gt; ChickenPizza  is served with Chicken on  DeluxVeggiePizza</span></span><br><span class="line"><span class="comment"># =&gt; Prepare  MexicanVegPizza</span></span><br><span class="line"><span class="comment"># =&gt; HamPizza  is served with Ham on  MexicanVegPizza</span></span><br></pre></td></tr></table></figure><h5 id="工厂方法与抽象工厂方法的比较"><a href="#工厂方法与抽象工厂方法的比较" class="headerlink" title="工厂方法与抽象工厂方法的比较"></a>工厂方法与抽象工厂方法的比较</h5><table><thead><tr><th>工厂方法</th><th>抽象工厂方法</th></tr></thead><tbody><tr><td>向客户端开放了一个创建对象的方法</td><td>包含一个或多个工厂方法来创建一个系列的相关对象</td></tr><tr><td>使用继承和子类决定要创建哪个对象</td><td>使用组合将创建对象的任务委托给其他类</td></tr><tr><td>工厂方法用于创建一个产品</td><td>抽象工厂方法用于创建相关产品的系列</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在面向对象编程中，&lt;strong&gt;工厂&lt;/strong&gt;表示一个负责创建其他类型的对象的类。&lt;br&gt;通常作为工厂的类会实现多个关联的方法，客户端通过某些参数调用这些方法，工厂则负责创建对应类型的对象并返回给客户端。&lt;/p&gt;
&lt;p&gt;工厂模式的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://rollingstarky.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://rollingstarky.github.io/tags/Python/"/>
    
      <category term="Advanced" scheme="https://rollingstarky.github.io/tags/Advanced/"/>
    
      <category term="Design" scheme="https://rollingstarky.github.io/tags/Design/"/>
    
      <category term="Pattern" scheme="https://rollingstarky.github.io/tags/Pattern/"/>
    
      <category term="Factory" scheme="https://rollingstarky.github.io/tags/Factory/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 截获 Ctrl+S 组合键以及自动保存（提交）功能的实现</title>
    <link href="https://rollingstarky.github.io/2020/12/14/vue-js-add-auto-save-and-ctrl-s/"/>
    <id>https://rollingstarky.github.io/2020/12/14/vue-js-add-auto-save-and-ctrl-s/</id>
    <published>2020-12-13T16:00:00.000Z</published>
    <updated>2020-12-14T14:16:36.837Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，Chrome 中按下 <code>Ctrl+S</code> 组合键会进入“保存网页”界面，并不会与网页中的具体内容做交互。</p><p>最近在做一个前端基于 Vue 的在线文档，希望网页中按下 <code>Ctrl+S</code> 组合件就能触发提交动作，将前端数据的改动存储到后端数据库中。<br>并且不管用户是否操作，每隔特定时间也会自动提交文档的当前内容到后端，实现自动保存的功能。</p><p>示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;save(&apos;button&apos;)&quot;&gt;保存&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    document.addEventListener(&apos;keydown&apos;, this.saveContent)</span><br><span class="line"></span><br><span class="line">    this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">      this.save(&apos;timer&apos;)</span><br><span class="line">    &#125;, 10 * 1000)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    document.removeEventListener(&apos;keydown&apos;, this.saveContent)</span><br><span class="line">    clearInterval(this.timer)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    save(type) &#123;</span><br><span class="line">      console.log(`content saved by $&#123;type&#125;`)</span><br><span class="line">    &#125;,</span><br><span class="line">    saveContent(e) &#123;</span><br><span class="line">      var key = window.event.keyCode ? window.event.keyCode : window.event.which</span><br><span class="line">      if (key === 83 &amp;&amp; e.ctrlKey) &#123;</span><br><span class="line">        this.save(&apos;hot key&apos;)</span><br><span class="line">        e.preventDefault()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认情况下，Chrome 中按下 &lt;code&gt;Ctrl+S&lt;/code&gt; 组合键会进入“保存网页”界面，并不会与网页中的具体内容做交互。&lt;/p&gt;
&lt;p&gt;最近在做一个前端基于 Vue 的在线文档，希望网页中按下 &lt;code&gt;Ctrl+S&lt;/code&gt; 组合件就能触发提交动作，
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://rollingstarky.github.io/categories/JavaScript/"/>
    
    
      <category term="Program" scheme="https://rollingstarky.github.io/tags/Program/"/>
    
      <category term="Web" scheme="https://rollingstarky.github.io/tags/Web/"/>
    
      <category term="Development" scheme="https://rollingstarky.github.io/tags/Development/"/>
    
      <category term="Frontend" scheme="https://rollingstarky.github.io/tags/Frontend/"/>
    
      <category term="JavaScript" scheme="https://rollingstarky.github.io/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://rollingstarky.github.io/tags/Vue-js/"/>
    
  </entry>
  
</feed>
